/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.02.2024 12:08:37

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 29176, -33842, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00017825476243160665, 0.00015077553689479828, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 21,-47,-59,109,6,-8,-24,39,87,18,-27,-48,-38,38,-20,79,68,-41,-26,-5,123,76,66,-72,-81,-88,3,127,8,-46,54,65, 
  /* [1][0][][] */ 56,69,70,-64,-93,69,-8,12,-35,-29,32,103,106,40,34,-7,-36,-1,-55,-93,-79,30,29,99,83,69,-49,-50,88,-94,-127,-22, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0046917963773012161, 0.003968522883951664, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 111, 81, 71, 269, 1495, 111, -331, 220, -63, 973, 27, 19, 100, 126, 112, 987, -89, -891, -271, 417, 388, 190, 113, 10, 67, -42, 169, 2570, -646, -231, 1560, 563, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.5856504584662616e-05, 4.5832199248252437e-05, 4.9563361244508997e-05, 4.3557651224546134e-05, 5.1720780902542174e-05, 4.0390379581367597e-05, 4.1426486859563738e-05, 4.0779330447549e-05, 4.3928052036790177e-05, 5.0648159231059253e-05, 4.29448155045975e-05, 5.1162503950763494e-05, 4.4141856051282957e-05, 4.4264950702199712e-05, 4.3523385102162138e-05, 5.2674215112347156e-05, 4.5191012759460136e-05, 4.9506499635754153e-05, 4.1654540837043896e-05, 4.0905139030655846e-05, 4.4271760998526588e-05, 4.0450689994031563e-05, 4.3608157284324989e-05, 4.7950659791240469e-05, 4.5382428652374074e-05, 4.2138388380408287e-05, 4.244768206262961e-05, 6.0826645494671538e-05, 4.4395121221896261e-05, 4.3644555262289941e-05, 6.3345170929096639e-05, 4.1745344788068905e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -36,-60,101,14,100,-9,-76,-80,55,-89,-95,24,60,0,-24,50,-54,-30,-61,-47,-59,-93,0,111,-127,9,85,-47,108,9,-10,-74,81,-57,-83,66,-99,-73,-74,41,58,-82,-94,103,55,-118,98,-20,1,-64,-21,82,-62,-43,-79,105,7,74,104,-99,-66,91,-61,51,1,19,76,89,60,101,80,-102,99,-85,45,81,-110,20,-55,29,54,18,90,-2,-66,-43,-87,109,20,92,-16,-96,9,68,36,10, 
  /* [1][0][][] */ -56,24,-62,4,-27,77,39,24,73,-93,-94,127,71,-34,36,64,103,-37,36,118,-37,0,33,38,22,16,-24,98,17,17,101,-61,60,99,-3,32,56,60,-1,-43,-76,0,-23,-82,-24,22,-29,-49,-33,-92,117,39,18,83,-64,-39,6,106,53,77,-47,125,-71,-68,-46,37,82,41,109,41,19,16,-100,95,-39,46,70,-33,-35,70,-71,75,-42,-114,15,107,-72,-49,70,67,84,34,77,90,33,-10, 
  /* [2][0][][] */ 38,26,-48,87,-9,-49,80,97,-88,78,-27,127,88,-21,84,-95,-49,-22,31,54,-77,-8,96,30,-32,69,104,5,-54,81,76,83,-57,-17,-75,-88,-68,84,102,-6,-118,-72,11,3,-65,90,-22,-65,76,21,86,-89,-34,58,28,23,-78,94,-58,3,-8,67,-39,66,87,44,52,77,-72,72,9,-57,35,-57,34,26,-53,-12,8,9,36,-87,-3,-40,-10,-87,-24,-15,73,89,-25,16,-41,-67,-34,-64, 
  /* [3][0][][] */ 88,12,49,-23,-66,54,-100,36,55,35,72,0,99,117,72,16,106,110,-50,8,115,-73,-57,-101,-15,-97,-82,114,40,-97,93,16,-26,-21,-14,-13,-98,-23,42,41,6,-74,-71,11,83,47,-38,-79,83,-63,39,37,97,33,98,-93,-83,-117,-82,-49,-98,41,-28,75,55,-19,-64,-20,-33,-85,19,104,37,-108,63,-42,42,89,99,-53,-82,-112,36,93,55,52,-25,-127,-72,60,17,-93,123,-80,-91,52, 
  /* [4][0][][] */ 71,105,21,68,-12,-2,43,6,60,106,16,17,34,8,0,-22,12,17,-13,29,111,-54,111,22,6,35,46,-28,-16,30,-36,-25,77,119,40,-68,-23,23,-86,23,13,-29,-5,-70,40,127,52,66,52,21,-5,-35,-52,42,-48,31,73,-75,76,20,28,-68,-2,-35,-33,63,11,-9,34,-79,-55,-38,-29,22,100,85,71,-14,31,-33,39,-10,-38,65,28,72,122,2,-52,-22,70,43,64,88,-39,14, 
  /* [5][0][][] */ 99,-104,87,94,52,-121,33,75,109,-120,3,-44,34,95,50,41,64,65,-75,111,41,60,17,-17,-122,-68,-2,-101,58,44,24,-105,-38,3,-69,24,-115,-35,61,41,-114,-62,41,112,-28,11,35,-54,-127,98,35,17,49,21,46,-16,92,64,-62,-44,41,-56,30,-70,-25,110,-17,32,89,15,111,-68,-45,91,-23,-75,1,-42,16,89,117,39,35,110,-99,84,-15,53,68,-115,120,106,-23,31,83,-93, 
  /* [6][0][][] */ 16,-46,113,75,-91,-68,-7,62,-18,-90,2,-95,86,55,114,-127,38,-1,-6,101,-85,-126,110,58,-66,-89,-13,-61,-32,-123,45,-82,-97,-127,-51,-111,-12,37,-117,78,87,55,23,-20,-119,107,-90,-49,-79,13,-31,-67,57,-60,92,-31,6,-12,-71,116,-104,-3,66,-78,-56,66,98,-54,77,-8,-112,-10,55,-76,-98,-47,-82,-109,-63,-31,31,-31,41,-33,-75,-94,-44,-102,84,95,97,14,-58,-69,74,-33, 
  /* [7][0][][] */ 117,72,-35,-43,-67,117,-14,7,127,3,-94,24,61,-97,55,82,47,18,1,125,63,39,-7,93,-72,109,50,59,-79,120,-14,37,30,26,72,113,-108,98,-3,-26,87,-74,91,80,58,-6,100,-114,42,-65,-105,-72,-21,99,26,30,108,-90,1,-58,12,1,79,-113,-65,-59,80,27,-109,21,70,95,89,36,70,66,-71,58,-104,51,102,-38,-20,-69,88,44,-121,104,87,3,88,75,-67,-38,4,-65, 
  /* [8][0][][] */ 9,40,-51,-92,47,23,-79,-36,14,32,40,72,-7,-33,-93,-75,-65,91,-63,13,27,-25,80,90,-106,90,33,72,-69,10,-98,112,89,-37,43,-9,109,4,-27,55,92,101,-114,-127,-24,-19,-30,104,29,-85,-69,14,-69,-8,-39,-111,65,96,-94,98,106,29,50,100,-39,-53,-30,92,-90,41,36,-7,66,65,0,24,-43,96,76,72,29,75,-117,-79,35,45,85,-52,38,-35,-80,83,-83,-110,-44,69, 
  /* [9][0][][] */ 16,36,115,45,76,-85,-31,-100,45,46,12,25,-22,-50,-85,13,14,12,-64,-48,23,84,-54,-83,127,6,-30,57,-3,-51,-71,96,65,16,32,-11,-49,32,-32,-66,69,-44,67,-70,68,48,-90,52,48,20,-66,-30,78,-52,-57,87,93,-59,23,18,-64,83,113,-57,-78,19,95,57,-38,74,103,-61,9,81,-76,-53,-29,-90,4,104,48,38,98,42,-25,-41,58,3,123,86,-8,104,109,-1,68,-2, 
  /* [10][0][][] */ -65,73,97,-60,-6,108,110,47,32,35,27,-34,112,73,-19,11,-36,80,-97,-56,-11,35,54,-56,18,53,-99,-118,-41,94,-86,-82,88,101,125,79,-33,8,-20,59,-55,107,-116,-28,-88,-79,-2,-59,-18,-13,47,-8,70,25,-54,-25,-123,-1,24,-52,4,99,101,48,127,-71,-86,-22,35,-3,-93,-61,94,73,-76,108,-31,75,70,20,80,-7,64,96,-116,64,91,-10,30,-2,-10,-57,-56,-46,-38,-76, 
  /* [11][0][][] */ 91,-2,-5,95,111,41,48,48,96,81,-57,127,8,-80,38,-56,-49,-88,55,41,37,69,13,-74,-107,-81,5,53,74,12,32,-17,-70,-60,49,44,-45,66,-6,-25,-39,82,-63,18,-26,-72,-76,-74,40,75,104,28,-67,-70,26,30,-75,-31,-28,-81,-59,95,56,15,36,80,-36,25,86,65,-63,-53,44,97,-75,45,-74,37,-35,75,-84,-25,-52,-35,26,-69,5,2,-89,-28,4,-69,-74,-21,-51,-41, 
  /* [12][0][][] */ 10,59,-47,8,95,9,-30,50,-75,61,-9,42,-33,3,60,-74,-96,-30,-45,-71,34,-4,16,107,-81,-48,113,-98,98,26,-27,114,-80,-66,-38,21,5,-69,-5,59,95,33,-108,-29,-12,-93,-39,116,-54,-124,-65,88,44,5,-70,91,-39,-45,48,65,65,127,-14,60,118,37,-33,116,66,113,43,77,88,121,-8,-3,-42,44,-109,-90,-51,96,52,12,-46,30,45,126,-95,-117,86,53,96,-10,35,66, 
  /* [13][0][][] */ 103,-68,105,99,101,111,83,76,70,-98,17,-7,96,63,76,-43,-118,-69,-66,35,73,-22,113,-37,-76,40,18,17,-79,-75,87,36,43,102,-15,43,-75,-24,36,80,-77,73,-52,21,-35,15,-5,-26,21,89,-24,-113,-88,34,107,-74,-64,37,-25,-72,-19,127,-85,20,-42,-58,-79,87,-26,-4,95,5,-84,46,-66,-38,-110,72,82,-58,56,-96,97,21,-88,-99,84,126,-13,-61,-76,62,106,-44,71,-9, 
  /* [14][0][][] */ -54,-108,94,79,90,-24,-8,-91,-79,-30,76,114,-13,-89,-72,-80,-46,-54,19,34,-33,44,0,79,-124,-68,-11,26,-101,-97,-65,41,109,-17,-23,9,104,120,51,-82,-16,-112,32,103,81,-120,69,-81,97,29,84,37,108,-12,1,28,-65,28,49,98,-7,-57,-39,82,-81,2,91,-99,-72,-69,-80,103,19,92,60,-67,42,-91,63,36,50,-24,-104,-39,-127,-91,-112,122,104,-2,90,-38,86,110,-8,56, 
  /* [15][0][][] */ 16,-2,-11,70,74,-89,58,-101,69,-5,-38,-39,77,37,-81,-78,85,13,-52,34,57,16,83,65,99,72,13,85,29,35,53,-82,15,11,-41,7,-51,119,86,-91,40,109,-15,-30,4,-7,-37,-43,1,-20,10,52,-74,-67,-44,-13,85,29,-26,95,-25,-77,37,91,-22,67,-55,10,-51,-17,70,-47,5,3,52,-61,11,28,96,79,-46,65,-94,-29,-72,8,-34,12,101,91,-69,-46,44,93,-53,127, 
  /* [16][0][][] */ -65,10,93,-66,30,104,-55,21,52,41,-106,34,-25,-36,-64,-58,98,74,66,54,97,69,-36,34,-17,53,-82,64,-104,0,30,10,-103,72,47,51,-41,49,-60,-87,41,-34,71,77,51,113,95,-13,-44,-92,-3,127,-47,108,54,31,47,70,69,15,102,85,42,52,43,7,-46,87,30,75,-32,-16,20,80,53,82,-1,82,-108,-12,9,-73,47,20,24,101,105,-5,80,23,-9,95,67,-33,-87,33, 
  /* [17][0][][] */ 14,-109,16,54,-52,-111,-79,-86,13,-89,57,37,77,32,-103,32,16,31,78,86,-96,-25,-9,-53,-2,42,-67,6,79,-48,-43,48,-44,-37,14,-8,-52,70,-84,-26,-104,-59,-33,-15,-5,-12,65,-112,66,71,-28,4,-30,57,71,-79,-127,68,-90,-118,14,-82,41,68,-87,-80,32,-104,-104,-11,72,13,3,-117,-65,37,80,-52,21,-70,-7,-37,-75,-102,-120,43,47,-35,0,50,-102,-112,-22,79,-5,-12, 
  /* [18][0][][] */ -101,103,103,-78,-15,-118,-111,1,-2,69,-116,-58,-42,31,57,-62,20,-25,52,-27,100,-51,19,-81,33,-107,-22,111,25,29,-8,39,40,-33,-115,-117,-41,31,-42,62,-50,-4,-54,-14,-121,14,28,-6,17,-31,64,43,-118,-16,-2,86,-51,32,-26,-122,83,106,10,29,-78,-127,-36,89,64,-82,-73,105,-102,-36,-94,-111,56,58,-4,-76,-64,-14,-31,-72,103,-37,65,68,-116,-81,-67,102,85,-60,43,-25, 
  /* [19][0][][] */ 42,40,88,52,65,-74,106,90,104,-50,35,-25,-89,55,-45,62,94,-89,127,74,-10,96,-46,18,91,-66,32,-61,-80,-121,-71,64,108,-67,50,11,16,-62,-62,-106,63,-125,-77,10,-71,38,87,-91,51,67,-35,50,-32,25,2,10,45,107,-4,-24,67,-55,126,70,-69,6,-22,7,-1,65,92,-44,-60,-120,-56,-73,-5,-100,23,123,71,-97,-26,79,-80,0,20,-9,108,49,12,67,-12,117,87,-34, 
  /* [20][0][][] */ 8,80,75,98,-75,105,37,50,31,21,-75,-14,-7,101,36,-63,-45,-28,-58,-26,28,-43,-64,-65,89,-55,-106,60,25,12,-30,121,111,59,-10,60,41,-23,-17,-119,-46,-6,-72,-93,-9,-45,-67,106,62,-86,-95,81,52,115,60,3,115,68,105,97,110,-52,-51,-22,-25,-49,-50,27,-82,-81,-57,82,-57,-78,33,32,127,69,112,112,93,31,83,0,75,123,4,72,32,107,38,72,40,19,3,18, 
  /* [21][0][][] */ 91,76,82,-106,107,-101,72,33,-2,-77,-69,58,11,35,-40,-94,-123,-41,39,-11,122,-46,72,-92,56,-93,-24,74,22,17,-8,-33,7,17,-95,-106,122,108,-114,-32,-27,-7,28,-13,-120,-94,-91,100,-71,-82,0,83,42,81,-93,25,-62,60,-59,122,64,-72,11,-15,90,30,-25,-70,-103,-3,65,85,34,-14,84,74,-127,-30,68,113,17,88,37,-80,17,-98,61,-83,-111,79,115,-118,-47,-53,74,-30, 
  /* [22][0][][] */ 28,-55,-78,-98,103,-59,127,72,-108,93,-70,-85,112,-118,-119,-81,25,91,-127,-59,78,-79,28,41,92,3,-111,93,-68,-74,-50,-110,51,63,14,9,-2,-21,-54,-108,8,5,1,105,65,-124,81,-27,-60,-87,10,-5,-55,-87,-18,32,-21,-24,-22,-36,106,-63,-77,-97,-63,19,-111,-40,101,95,-32,3,-60,2,73,-87,37,-65,59,84,106,-96,-78,-110,75,90,92,-39,-58,29,-73,71,15,-16,-33,99, 
  /* [23][0][][] */ 54,-91,9,58,93,-101,-1,-71,46,-71,82,98,27,-105,32,-36,81,-40,-90,94,90,-67,89,-27,-27,-16,90,14,71,58,70,-33,-38,36,22,41,93,-3,-86,29,-127,-27,4,-93,-65,-98,100,25,35,-117,-70,-61,78,-49,-38,87,-88,-4,82,40,-93,-63,-59,-6,37,35,-91,-97,71,2,101,-60,0,-22,-27,-85,27,-11,86,103,-46,-56,26,-108,70,2,93,-5,-88,25,90,0,93,-35,-24,67, 
  /* [24][0][][] */ -72,-55,-89,-52,-69,-99,-64,-63,61,113,86,88,124,49,-19,-110,-75,36,28,-41,102,-68,-54,-22,36,-30,91,53,113,69,17,-55,-2,10,56,39,-41,-77,76,4,-100,-113,99,12,25,-50,41,70,-103,-63,-7,-4,78,60,78,-55,-23,91,16,7,96,16,24,101,-80,98,-29,-83,-79,78,-50,-16,-29,51,99,98,51,-59,-95,-77,-68,-89,-50,-127,-10,58,-19,-75,17,-118,3,-60,-17,40,-78,22, 
  /* [25][0][][] */ -88,-66,-80,-4,108,-69,-95,77,32,-101,-39,57,84,-12,-101,-26,-83,65,26,-110,64,92,-26,-47,0,-48,-88,37,84,-75,54,121,97,-109,47,86,102,-70,-7,2,-93,97,-114,14,111,19,62,35,-115,72,-60,-12,51,-17,-44,19,-37,67,-127,77,121,63,45,57,12,84,-6,-3,-80,11,-34,-112,47,-119,81,18,62,80,7,17,51,50,-38,76,-90,-56,-122,-91,-39,-65,98,36,-118,-13,-26,-100, 
  /* [26][0][][] */ 76,-109,-16,-6,-97,9,-2,-25,-109,-100,109,71,-78,-26,5,-12,120,37,-74,-65,12,78,109,10,63,82,10,60,19,2,-85,9,-23,-48,-95,-98,-65,89,-54,104,-69,119,61,31,-69,87,-20,108,-8,51,-2,127,13,-48,0,-96,122,63,62,30,0,-100,76,-14,121,-9,-62,64,-85,82,92,100,87,-100,-88,13,58,-107,-96,14,-23,103,88,-70,96,7,-31,7,-76,123,24,16,-45,121,55,97, 
  /* [27][0][][] */ 32,71,-10,-56,-73,-48,-22,-31,53,84,74,-123,-20,93,57,49,72,17,88,-33,-28,19,48,-32,13,75,-104,44,68,16,-7,17,65,79,-40,-40,-40,6,-78,15,1,71,57,18,64,99,59,116,86,114,63,6,-39,-33,5,-28,127,-31,-16,-26,-10,-71,47,59,41,-14,-63,112,40,-19,-48,42,46,-9,27,2,90,-56,111,105,108,9,96,1,-2,6,39,26,45,84,25,-38,67,24,97,101, 
  /* [28][0][][] */ 71,-20,72,30,-124,-76,-110,-85,-46,-117,41,55,-93,-98,-8,81,74,91,-81,61,-35,8,-119,-86,-116,63,-95,-74,-85,-85,-16,-34,-112,0,62,57,13,-114,-54,16,84,26,-100,35,-113,-25,-1,31,9,-75,-83,-44,-97,8,37,23,39,-27,63,34,-17,-55,-108,-10,42,55,-32,63,-90,14,-116,-54,52,31,-21,-111,-127,-64,-95,32,-86,-102,94,-34,43,-121,47,-83,-114,-68,-49,-79,-51,41,-96,-74, 
  /* [29][0][][] */ 48,57,55,-54,-97,8,-127,2,103,-21,-91,-104,99,-93,-52,-44,-95,95,30,-68,-73,-28,52,-10,-28,4,-47,-27,-101,-8,93,-8,42,-3,-81,-59,-9,102,-8,81,50,101,-46,74,-10,111,-46,-20,17,-10,50,-80,66,-94,103,41,-76,47,-43,103,-118,86,-87,-57,-65,-66,47,84,92,-87,40,-75,108,75,57,26,113,-63,-28,36,-9,-90,-6,-72,73,116,52,76,-32,103,78,68,-105,19,-8,61, 
  /* [30][0][][] */ 39,57,-9,41,-59,22,-31,-15,92,3,23,-56,-62,50,45,74,22,46,94,-52,54,-45,-30,15,22,46,-50,127,41,-47,-58,18,-36,-25,-57,-20,58,14,10,2,106,-20,30,88,79,13,86,94,-31,81,23,-40,90,21,-4,80,-4,-38,19,-20,-49,-3,2,-10,-63,-32,-52,90,-24,74,45,-9,-43,85,50,-12,-6,-35,-4,-5,52,33,-51,3,-16,52,1,73,41,7,94,43,0,8,24,-18, 
  /* [31][0][][] */ 96,-75,57,122,46,69,-66,-118,-18,-26,-74,-119,100,-87,-45,127,-53,-92,44,64,86,56,-8,101,81,-114,34,53,-62,-82,49,116,12,26,-82,-5,99,-11,-75,-126,79,-59,-3,28,5,-28,-30,36,81,66,102,-4,-113,-75,-88,27,-103,69,12,127,-30,-16,97,-76,77,118,-44,-79,83,-99,-107,20,-111,-25,4,23,-48,-55,70,119,-60,-29,69,91,86,106,-72,22,47,-24,-57,-62,29,121,19,11, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0019489014521241188, 0.0019478684989735484, 0.0021064428146928549, 0.0018512001261115074, 0.0021981331519782543, 0.0017165910685434937, 0.0017606256296858191, 0.0017331214621663094, 0.001866942155174911, 0.0021525467745959759, 0.0018251546425744891, 0.0021744063124060631, 0.0018760288367047906, 0.0018812603084370494, 0.0018497437704354525, 0.0022386540658771992, 0.0019206180004402995, 0.0021040262654423714, 0.0017703179037198424, 0.0017384683014824986, 0.001881549833342433, 0.0017191543010994792, 0.0018533465918153524, 0.0020379030611366034, 0.0019287531031295657, 0.0017908815061673522, 0.0018040264258161187, 0.0025851323734968901, 0.001886792597360909, 0.0018548935186117887, 0.0026921697426587343, 0.0017741770716384053, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1734, 76, 4155, 4772, 3723, -2522, 3813, -1414, -2195, -871, 5604, -1995, 3784, 6346, 2269, 2207, -762, -718, -2382, 6689, 2288, -923, 3015, -558, -910, 4108, 1507, 2418, 6082, 2621, 4376, 1575, 1288, 6624, 5542, 4008, -633, 3686, 2844, -4661, -260, 1450, 27, 1847, -1238, 812, -1337, 944, -9802, 2345, 1145, -3687, 7140, -1116, 2164, 1673, 1623, 2734, -829, -2956, 254, 1542, 496, 4433, 5171, 4023, 3607, 6792, 4201, -713, 2923, 6004, 3838, -1788, 4719, 6958, 1175, -5553, 844, 1403, 12582, 2029, -719, -2543, 1375, 891, 1760, -2176, 3903, -331, 3822, 1471, 182, -3437, -102, 2006, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00012026081822114065, 0.00021726101113017648, 0.0001367958466289565, 0.00016063495422713459, 0.00016779894940555096, 0.00015876817633397877, 0.00015597867604810745, 0.00018146383808925748, 0.00017074179777409881, 0.00017160351853817701, 0.00011756876483559608, 0.00020900316303595901, 0.00014554755762219429, 0.00010123931133421138, 0.00013719029084313661, 0.00017753269639797509, 0.00021826691227033734, 0.00014505352010019124, 0.00012734888878185302, 9.2141097411513329e-05, 0.00019310899369884282, 0.00014512703637592494, 0.00012064926704624668, 0.00018863429431803524, 0.00022277799143921584, 0.00014743513020221144, 0.00018843633006326854, 0.00015160774637479335, 0.00011681596515700221, 0.0001586048019817099, 0.00011619029828580096, 0.00015821801207493991, 0.00023971671180333942, 9.8771837656386197e-05, 0.00010977334022754803, 0.0001190094044432044, 0.0001563995610922575, 0.00012023831368423998, 0.00012784195132553577, 0.00011418917711125687, 0.00014952709898352623, 0.00014566347817890346, 0.00017241378373000771, 0.0001299456343986094, 0.00017855671467259526, 0.00012993560812901706, 0.00018215988529846072, 0.00017471810861025006, 7.0587389927823097e-05, 0.00012860525748692453, 0.00021455313253682107, 0.00012853929365519434, 0.00010316730913473293, 0.00014178687706589699, 0.00015212090511340648, 0.0001479996572015807, 0.00015079470176715404, 0.00013868632959201932, 0.00017475303320679814, 0.00010702861618483439, 0.00017922018014360219, 0.0001663802977418527, 0.00019816659914795309, 0.00014693349658045918, 0.00012992242409382015, 0.0001174423741758801, 0.0001004293080768548, 0.00011159954738104716, 0.00015364175487775356, 0.00018837439711205661, 0.00016314997628796846, 0.00011539002298377454, 0.00011711674596881494, 0.00013503010268323123, 0.00015168709796853364, 0.000114032271085307, 0.00011694315617205575, 0.00011637974967015907, 0.00017061609833035618, 0.00015088934742379934, 7.0681162469554693e-05, 0.00014796647883486003, 0.00015354223432950675, 0.00015011509822215885, 0.00015968990919645876, 0.00014896436186973006, 0.00016501416394021362, 0.00016759138088673353, 0.00016627588775008917, 0.00018403958529233932, 0.0001577084040036425, 0.00014779175398871303, 0.00013392395339906216, 0.00012172675633337349, 0.00021252113219816238, 0.00013336245319806039, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -21,113,-78,29,49,-36,102,81,-69,8,43,-92,86,127,-70,34, 
  /* [1][0][][] */ -15,-2,-50,-32,-7,42,18,-127,29,-50,-21,-51,-11,-35,-55,-1, 
  /* [2][0][][] */ -18,-22,28,80,31,49,-107,127,-14,-3,65,-64,-21,-61,-37,56, 
  /* [3][0][][] */ 85,-93,84,-16,-11,-40,-34,127,-39,55,79,64,-5,52,9,27, 
  /* [4][0][][] */ -44,-16,1,33,-83,7,-27,-109,-15,-6,39,2,27,39,89,127, 
  /* [5][0][][] */ 127,16,-30,-19,-68,17,34,53,26,-17,52,77,114,26,-86,2, 
  /* [6][0][][] */ 6,-38,-50,-57,-82,-2,1,-40,-58,-53,-19,43,79,45,127,6, 
  /* [7][0][][] */ -61,29,-30,-75,-1,-60,-72,20,-101,53,-61,-54,-127,-38,12,97, 
  /* [8][0][][] */ 49,47,76,7,48,20,72,9,64,-25,44,7,-127,-29,-80,14, 
  /* [9][0][][] */ -31,64,25,-34,-18,-10,29,-14,-23,45,-42,-2,36,127,25,18, 
  /* [10][0][][] */ 68,57,-44,45,-37,-31,61,-52,-93,-29,-44,-90,-127,-76,8,101, 
  /* [11][0][][] */ 35,-1,64,-6,-18,-35,7,90,-83,25,-12,22,-11,-10,44,127, 
  /* [12][0][][] */ -50,-16,14,-13,13,-8,95,34,-72,25,14,2,-11,67,-45,127, 
  /* [13][0][][] */ -1,45,22,56,103,29,105,127,-29,101,-100,-79,36,73,-80,-48, 
  /* [14][0][][] */ -125,117,10,-21,-9,-2,54,1,-53,31,127,3,-95,14,-51,67, 
  /* [15][0][][] */ -3,-18,-127,-35,81,-31,-90,-31,-14,-22,-23,-67,3,-68,-51,34, 
  /* [16][0][][] */ 127,-33,-5,-5,33,-28,54,-36,-25,-2,115,41,52,14,-26,-2, 
  /* [17][0][][] */ 21,20,-27,-89,-2,-53,111,-127,6,-22,-52,24,32,78,-1,37, 
  /* [18][0][][] */ 33,125,-24,-47,69,-67,-17,-60,-27,127,-38,-22,-22,67,-13,-44, 
  /* [19][0][][] */ -75,-103,119,-100,33,-127,29,-30,32,44,104,111,21,-12,64,-11, 
  /* [20][0][][] */ -20,100,63,1,9,-1,13,-30,55,1,102,-18,-127,-32,-74,-2, 
  /* [21][0][][] */ -66,34,23,21,72,37,73,50,-127,58,-46,20,-23,24,-65,-30, 
  /* [22][0][][] */ 9,-77,49,1,12,-127,101,11,6,-48,-33,-67,41,-87,-58,-38, 
  /* [23][0][][] */ -61,-101,52,64,27,-25,27,-54,16,-31,91,8,8,69,83,127, 
  /* [24][0][][] */ -5,-8,30,86,39,13,-55,-127,66,19,-43,15,7,2,-27,-31, 
  /* [25][0][][] */ -1,32,12,-39,-15,4,10,-40,-13,53,-54,-23,35,127,23,-11, 
  /* [26][0][][] */ -65,79,6,17,23,-88,-9,-26,6,21,22,77,6,1,-75,127, 
  /* [27][0][][] */ -17,-127,-51,10,-59,101,-8,-62,22,-41,55,-32,25,-52,-107,-27, 
  /* [28][0][][] */ -36,3,42,76,24,7,-42,-127,-125,49,110,-6,67,5,-52,-18, 
  /* [29][0][][] */ -127,112,-20,-31,-35,18,-120,-69,-56,-28,9,7,4,-67,-108,81, 
  /* [30][0][][] */ 47,79,-43,66,-127,-111,-84,-12,-58,2,16,-102,125,24,-27,124, 
  /* [31][0][][] */ 127,30,-70,-33,-57,19,102,25,-48,-27,54,44,38,28,-19,-6, 
  /* [32][0][][] */ -29,-12,127,2,-17,73,74,16,-13,-24,-19,15,1,73,69,15, 
  /* [33][0][][] */ 7,53,-76,-48,-8,31,126,25,10,-13,23,-81,83,127,-52,32, 
  /* [34][0][][] */ -86,-19,86,24,26,-49,107,-11,-127,28,37,-42,48,65,-50,-30, 
  /* [35][0][][] */ -6,18,-59,6,-93,127,-42,-16,-31,127,4,117,-60,66,22,64, 
  /* [36][0][][] */ -8,-79,127,-49,-47,22,-44,-12,19,20,-55,82,2,-86,-40,39, 
  /* [37][0][][] */ 91,-7,80,-36,127,-75,-58,28,-62,126,-76,-1,-92,-47,100,-19, 
  /* [38][0][][] */ 36,43,14,-108,-19,-61,-101,78,-117,69,-87,-43,-77,-127,-123,98, 
  /* [39][0][][] */ -70,22,-47,-29,-80,-72,62,13,-127,-20,26,77,36,0,-18,60, 
  /* [40][0][][] */ 127,46,23,-98,-52,29,10,-58,-50,-14,-45,-87,4,54,24,21, 
  /* [41][0][][] */ 96,-82,-54,-51,3,-4,-63,-32,64,-23,-6,-58,127,-76,51,-32, 
  /* [42][0][][] */ -7,-82,-47,127,6,-86,-100,17,19,9,5,43,-70,67,-49,-11, 
  /* [43][0][][] */ -78,-49,-56,-113,-51,8,-7,74,53,-127,-51,26,-9,-47,-26,89, 
  /* [44][0][][] */ -32,37,33,-32,-11,-18,46,112,127,-80,67,99,107,49,-34,-10, 
  /* [45][0][][] */ 37,80,-88,103,127,-92,-37,-62,114,-73,68,-81,-12,21,-86,65, 
  /* [46][0][][] */ -25,-32,10,-13,89,-24,21,17,-14,127,-22,-102,32,58,-37,67, 
  /* [47][0][][] */ 83,-53,-38,-10,78,-16,-44,-49,11,127,-40,29,12,-103,-73,-8, 
  /* [48][0][][] */ 9,23,-2,-126,-4,-52,121,-127,5,4,-36,48,44,63,-3,34, 
  /* [49][0][][] */ -48,121,-61,39,38,-59,66,62,-25,33,40,-82,-17,67,127,-95, 
  /* [50][0][][] */ 7,43,-15,-4,-127,-5,-70,-56,47,72,36,33,-37,-42,-2,48, 
  /* [51][0][][] */ 127,-42,-50,-10,-51,81,-96,-43,53,-21,-50,64,-29,-66,8,40, 
  /* [52][0][][] */ -33,-32,49,47,-43,-99,-127,-4,-70,-45,-18,-52,14,-66,-10,110, 
  /* [53][0][][] */ 19,104,54,-127,2,108,95,-16,-9,-27,-10,-38,88,-121,19,58, 
  /* [54][0][][] */ 38,127,3,-15,5,-87,-112,49,11,-23,-50,117,84,95,23,55, 
  /* [55][0][][] */ -55,-11,66,16,48,-42,99,96,-113,-2,32,25,127,47,-16,17, 
  /* [56][0][][] */ 127,31,11,16,-51,99,-59,-65,-32,40,-83,-16,-43,116,-2,22, 
  /* [57][0][][] */ -47,-31,-40,-35,-65,-93,55,-24,-127,-24,63,68,15,30,-12,66, 
  /* [58][0][][] */ 43,-53,69,21,3,-69,-21,10,23,-14,-127,-23,19,-44,-40,49, 
  /* [59][0][][] */ 85,19,-127,90,11,41,80,-32,-70,-55,30,-103,-116,-53,20,102, 
  /* [60][0][][] */ -1,28,-16,26,-21,-23,-18,1,-30,-81,60,127,-42,-122,-23,-11, 
  /* [61][0][][] */ -32,15,78,-86,-64,37,-6,95,-21,-76,52,70,73,-11,9,127, 
  /* [62][0][][] */ 70,40,-8,-127,-20,-3,9,-42,-10,33,-34,47,24,-20,-78,-77, 
  /* [63][0][][] */ -5,-24,5,-12,-75,-78,-54,13,-86,-11,-25,-10,127,-1,47,2, 
  /* [64][0][][] */ 21,9,-10,44,-101,-44,-21,-73,42,112,44,14,33,-51,-39,127, 
  /* [65][0][][] */ -38,8,-15,-23,-96,74,23,-24,47,-119,113,-60,86,64,-127,79, 
  /* [66][0][][] */ -115,97,-100,-88,46,-30,-111,-78,-105,112,95,1,-127,-50,43,59, 
  /* [67][0][][] */ 0,-33,-127,-121,68,77,6,-29,-27,-5,47,-20,34,37,22,52, 
  /* [68][0][][] */ 53,26,-4,-52,-51,34,5,30,-73,73,126,-6,-23,-55,-127,16, 
  /* [69][0][][] */ 70,-92,62,-53,11,-114,-34,127,-19,68,93,89,-21,71,-41,13, 
  /* [70][0][][] */ 42,14,127,31,97,-25,109,6,15,36,-52,55,-87,52,-83,48, 
  /* [71][0][][] */ 12,29,92,-65,-127,-76,16,6,-12,-16,14,-110,-77,5,20,17, 
  /* [72][0][][] */ -54,-83,28,-114,66,-14,5,40,-71,18,-109,-8,57,107,-62,127, 
  /* [73][0][][] */ 15,24,56,-12,127,-98,-48,10,-43,103,-77,40,-99,-60,105,-2, 
  /* [74][0][][] */ -88,11,-127,-60,70,-27,-42,23,-72,-1,-127,-48,-34,-43,-40,58, 
  /* [75][0][][] */ 86,-18,51,-46,13,0,-127,-25,-10,-97,75,10,4,-16,-5,3, 
  /* [76][0][][] */ 2,-51,-23,116,42,86,96,-44,77,-127,72,110,39,-86,-83,31, 
  /* [77][0][][] */ -32,-24,125,-22,41,-17,-34,-127,26,26,33,96,50,58,28,-5, 
  /* [78][0][][] */ -61,8,19,-45,-5,-59,48,-5,26,-14,20,-95,-105,-70,-127,-64, 
  /* [79][0][][] */ -106,-57,-4,23,127,30,-28,15,9,37,-10,60,-55,-80,-61,-9, 
  /* [80][0][][] */ 5,-103,32,127,-33,-11,-93,84,13,10,37,-11,-69,1,12,23, 
  /* [81][0][][] */ 104,65,-16,76,-13,24,18,127,18,13,113,67,126,25,74,-11, 
  /* [82][0][][] */ -53,5,15,-32,32,-127,-122,-84,12,78,-49,-35,-30,96,-63,-32, 
  /* [83][0][][] */ 100,-21,75,-34,-31,-1,-127,-8,14,-120,6,-53,-11,0,16,-25, 
  /* [84][0][][] */ 20,-62,-88,26,127,43,23,32,-105,21,-116,-28,57,-35,-73,8, 
  /* [85][0][][] */ 18,88,50,-49,105,-2,44,-115,127,-45,37,-20,109,-84,4,-14, 
  /* [86][0][][] */ 112,-25,127,45,10,-50,68,31,-58,-50,-94,-40,31,12,-61,4, 
  /* [87][0][][] */ -6,14,23,-76,68,-30,-48,22,32,-34,76,-40,-86,-127,-2,21, 
  /* [88][0][][] */ -65,-30,35,-1,21,35,-67,-42,3,10,-76,-127,-46,-40,1,-29, 
  /* [89][0][][] */ -75,11,18,-60,23,9,-127,39,82,29,-72,-12,-4,-71,-38,-21, 
  /* [90][0][][] */ -17,-5,-23,-91,127,15,-67,37,30,64,43,-4,28,11,-76,-7, 
  /* [91][0][][] */ -43,-78,9,76,-35,4,-6,102,-29,-84,15,-74,-8,90,31,127, 
  /* [92][0][][] */ -31,85,0,-19,-29,58,-105,58,-48,-12,74,11,-37,127,62,33, 
  /* [93][0][][] */ -11,68,-65,-68,68,89,-86,16,71,56,73,39,-127,41,-44,68, 
  /* [94][0][][] */ 20,65,93,9,-127,-37,15,-4,22,-19,30,-11,-52,-26,22,-25, 
  /* [95][0][][] */ -3,32,49,5,127,-19,-100,73,18,19,-86,103,-5,1,104,-43, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015760798705741763, 0.002847317373380065, 0.001792779890820384, 0.002105203690007329, 0.0021990914829075336, 0.0020807385444641113, 0.0020441808737814426, 0.0023781768977642059, 0.0022376591805368662, 0.0022489523980766535, 0.0015407991595566273, 0.0027390939649194479, 0.0019074755255132914, 0.0013267932226881385, 0.0017979494296014309, 0.0023266572970896959, 0.0028605002444237471, 0.0019010009709745646, 0.0016689726617187262, 0.0012075564591214061, 0.0025307927280664444, 0.0019019644241780043, 0.0015811707125976682, 0.0024721494410187006, 0.0029196201357990503, 0.0019322133157402277, 0.0024695550091564655, 0.0019868975505232811, 0.00153093331027776, 0.0020785974338650703, 0.0015227335970848799, 0.0020735284779220819, 0.0031416108831763268, 0.001294455723837018, 0.0014386360999196768, 0.0015596795128658414, 0.0020496966317296028, 0.0015757849905639887, 0.0016754345269873738, 0.0014965079026296735, 0.0019596295896917582, 0.0019089948618784547, 0.0022595713380724192, 0.0017030044691637158, 0.002340077655389905, 0.0017028730362653732, 0.0023872989695519209, 0.0022897706367075443, 0.00092508405214175582, 0.0016854379791766405, 0.0028118290938436985, 0.0016845735954120755, 0.0013520607026293874, 0.0018581899348646402, 0.0019936226308345795, 0.0019396117422729731, 0.0019762420561164618, 0.0018175556324422359, 0.0022902283817529678, 0.001402665046043694, 0.0023487727157771587, 0.0021804994903504848, 0.0025970751885324717, 0.0019256389932706952, 0.0017027001595124602, 0.0015391426859423518, 0.0013161777751520276, 0.001462569460272789, 0.0020135543309152126, 0.0024687433615326881, 0.002138164360076189, 0.0015122456243261695, 0.0015348752494901419, 0.0017696389695629478, 0.0019879373721778393, 0.0014944515423849225, 0.0015326002612709999, 0.0015252165030688047, 0.0022360116709023714, 0.0019774825777858496, 0.00092631299048662186, 0.0019391768146306276, 0.0020122500136494637, 0.0019673355855047703, 0.002092818496748805, 0.0019522546790540218, 0.0021625955123454332, 0.0021963713224977255, 0.0021791311446577311, 0.0024119333829730749, 0.0020668497309088707, 0.0019368869252502918, 0.0017551422351971269, 0.0015952917747199535, 0.0027851988561451435, 0.0017477835062891245, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 7418, 13528, -3310, 7106, -436, 8895, 1523, 2871, 18365, -3345, -7254, 6759, -16120, 12284, 2718, 9394, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.5817741667851806e-05, 8.1931815657299012e-05, 5.6096992921084166e-05, 5.757814142270945e-05, 7.9527715570293367e-05, 7.3695104219950736e-05, 5.4359901696443558e-05, 6.463970203185454e-05, 0.000106309205875732, 7.2086033469531685e-05, 7.3668648838065565e-05, 6.6307693487033248e-05, 8.5448737081605941e-05, 6.8377034040167928e-05, 8.1287384091410786e-05, 7.6429474574979395e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -98,29,47,-9,-67,0,-67,18,-72,18,10,-19,36,47,16,-31,22,-9,92,12,2,-64,127,59,38,20,15,27,-56,-113,-73,10,-46,-47,25,36,6,33,-5,7,-8,-6,-86,6,-82,-15,-12,72,-9,17,-33,0,-1,-1,27,-45,-101,9,-26,74,70,32,16,13,-23,-63,-29,21,-65,-52,22,-11,0,-5,-63,-57,-57,10,-43,8,-51,46,76,-56,15,45,13,53,40,-11,10,-23,-38,-33,-38,9, 
  /* [1][0][][] */ 52,19,35,-54,-72,-20,-12,12,-11,23,54,-58,9,-23,-62,-28,-6,9,-58,32,-7,-69,16,59,1,-60,8,-41,59,-88,108,-80,49,19,-18,49,34,70,-18,-36,32,19,-5,1,3,43,-127,-43,-45,-44,-11,-28,21,-59,-36,41,11,0,-24,13,22,47,-17,-83,-13,-19,-55,-3,3,-8,-80,-8,-32,-23,13,-78,6,10,37,-58,-20,-24,-72,-28,31,-35,-14,3,-77,-6,-49,46,35,54,-61,54, 
  /* [2][0][][] */ 83,-31,35,21,31,-91,69,-3,8,-26,-30,-25,-85,-40,27,-46,-106,-45,-46,44,12,-43,-64,31,-1,-78,-5,-22,-32,44,-63,119,-52,127,-27,13,-9,-18,-10,2,-98,79,94,14,-48,1,-12,2,33,4,-45,-61,38,-15,-23,68,38,-11,63,-5,-4,34,-43,5,61,18,-10,-7,46,44,-48,-1,62,51,58,53,43,-68,84,47,87,1,-43,25,-63,25,12,65,4,17,-28,25,-42,43,-31,31, 
  /* [3][0][][] */ -5,-10,-31,8,13,-5,11,-61,-39,68,47,63,25,-9,-71,45,19,-38,26,5,16,127,43,-62,7,30,-24,4,76,-44,74,-16,-37,37,-36,-23,16,52,27,-2,-88,-42,-56,22,-51,30,28,-19,-18,-63,-2,-25,60,-81,-35,-60,8,90,-39,2,-2,-8,-46,8,32,56,-34,-15,-28,2,14,-75,-44,-50,39,-12,14,0,-52,-36,-36,-30,-63,21,-16,-39,26,-25,1,32,27,-19,45,29,-28,51, 
  /* [4][0][][] */ 32,3,-53,25,11,34,-46,11,-44,88,106,-11,-9,11,-2,-40,18,-16,-29,60,13,-55,69,79,-82,-1,-127,11,-40,-67,6,15,-67,-51,8,66,8,42,13,16,-38,-42,32,-38,-16,12,-27,53,-41,50,13,29,49,-17,-76,26,48,-9,-2,-17,54,-7,28,6,-37,18,-25,2,-64,50,-56,50,29,-67,-25,-62,20,-69,-19,14,-37,78,-79,4,-27,28,27,-58,61,3,25,0,-51,-18,45,22, 
  /* [5][0][][] */ -85,31,28,-8,49,-4,57,-24,-40,43,17,-20,42,-8,-44,-44,6,-50,50,20,-127,-35,-58,36,-43,3,59,9,46,-75,-3,60,52,115,-14,59,-12,25,37,-34,-34,89,58,-25,-20,73,33,-25,2,16,-14,36,26,-38,20,-97,35,-45,-85,-64,78,106,-35,-10,85,-51,-66,-84,-76,-12,-44,-2,-34,14,-20,-53,9,-43,-56,-24,117,-52,10,-78,-82,39,31,-3,-36,44,37,-1,-25,28,22,84, 
  /* [6][0][][] */ 38,-18,-107,46,-45,-126,117,109,-100,85,1,81,-127,-79,63,59,2,-77,-22,3,-13,-8,-49,-89,-84,39,91,22,50,29,117,-66,28,6,14,-59,8,19,37,73,-2,15,-72,-45,7,-66,-94,27,33,-124,-28,108,35,0,-20,-59,76,48,7,-12,-123,49,-89,-6,43,-2,19,51,46,53,7,-64,-59,30,117,33,69,-38,35,-81,-4,-58,-88,84,1,-79,41,33,-43,87,64,39,-19,16,-42,117, 
  /* [7][0][][] */ 34,81,-32,-41,-7,-27,33,-4,-51,16,-67,-48,-32,10,22,-14,-51,-46,-29,59,2,127,-10,32,-10,5,9,29,45,44,66,-27,75,31,-17,-4,6,-17,7,49,-57,1,31,-56,33,-39,78,-14,33,-72,-83,-27,-41,18,-10,-8,21,13,-84,15,-19,102,12,-28,-31,6,-56,30,-30,-28,-96,30,23,65,-39,51,-42,59,24,-91,-12,-41,47,-77,40,-20,-14,-3,-15,69,-89,35,55,-37,-47,13, 
  /* [8][0][][] */ -6,79,-59,47,-45,-14,-88,39,-122,-19,24,12,-33,39,17,99,12,-58,7,15,28,-12,24,-15,-41,77,9,24,-14,-23,-38,-29,-32,-56,-36,-63,-50,37,39,-6,-5,-42,13,9,-55,-37,-2,-29,-22,-28,61,85,7,-24,-75,102,-36,44,-16,-42,-29,19,26,65,-27,-69,-30,-17,-66,23,2,13,-34,-59,-114,-32,-57,23,-83,-37,-31,-18,-45,-29,-5,2,28,38,20,59,-58,-7,-97,-127,29,-58, 
  /* [9][0][][] */ -13,25,-60,43,-27,-45,71,50,9,34,-37,80,-33,-27,36,122,2,20,70,19,24,22,22,-80,-33,-12,16,-10,9,-22,33,46,-25,1,3,-127,29,-20,-19,-13,-10,22,53,-27,1,2,24,27,32,81,14,-18,-64,-74,0,-3,1,-15,78,-19,-72,48,-68,-35,71,-5,-28,11,-59,20,35,36,1,91,-25,-15,-23,20,-31,-12,55,-16,65,-8,24,-19,-18,-40,-61,20,-8,-4,70,34,-50,-1, 
  /* [10][0][][] */ 56,5,-31,-10,-20,-32,63,-12,24,-31,-35,-7,-83,-22,15,-13,-64,-18,14,14,42,41,12,6,-33,74,26,-2,-48,-68,-26,-16,64,-29,43,3,63,-79,72,127,21,-46,20,8,-12,-90,-3,56,24,75,-66,-45,-18,27,15,41,18,-62,76,50,-20,40,-62,-20,-11,-47,15,53,29,-32,-11,35,107,27,20,-68,31,-33,55,-6,-36,44,36,13,-39,-4,4,33,-44,-12,18,39,41,55,-39,8, 
  /* [11][0][][] */ -49,-32,50,-69,26,-18,-33,-64,64,-60,-12,-5,-8,-12,20,-4,-57,8,55,11,-40,34,-91,-77,30,26,-55,48,27,-53,24,-38,28,-7,16,-28,-65,9,-104,34,-65,65,-25,59,23,5,2,-30,16,-20,-71,-60,13,23,81,-64,-23,-73,25,-43,-38,-52,-24,-116,-6,-66,38,92,127,2,69,-21,-20,-22,52,-29,90,44,39,47,29,10,-14,75,79,15,1,-26,-77,-67,-14,20,59,31,39,80, 
  /* [12][0][][] */ 30,-14,7,-39,40,92,-3,24,56,52,-14,52,17,38,24,-4,-70,51,11,51,127,7,56,-62,35,17,-69,-64,-21,75,8,8,32,-6,12,-41,41,-2,-26,-23,29,-15,58,54,-12,30,3,-1,-63,23,-6,14,-31,-25,11,19,-37,51,23,47,17,-94,3,-97,-9,85,-14,-33,8,-42,71,13,2,18,-11,51,-5,49,-64,-16,-17,43,113,19,-10,70,-23,-58,63,14,-82,39,75,2,-30,-81, 
  /* [13][0][][] */ -5,35,-13,-43,-32,-2,3,-30,16,-40,-28,-93,63,-105,-41,-71,-21,-41,-90,-23,-97,-33,35,102,-38,0,114,-1,23,-41,60,35,16,1,-119,127,-29,-52,33,-67,112,6,-3,28,3,-80,58,-32,82,-9,-49,35,15,-12,-5,76,57,-56,-36,-7,56,41,1,-95,-5,33,-36,22,-64,-40,-88,14,-55,27,-45,-87,-105,21,39,73,-18,57,35,-84,53,38,27,-17,-19,-6,3,9,-59,12,-31,-11, 
  /* [14][0][][] */ -3,24,-85,-20,93,93,-91,0,9,-40,85,-1,24,-20,-48,-65,-61,6,40,127,6,-24,1,5,4,39,-22,69,11,-1,-23,13,63,-3,-37,9,-15,55,76,3,58,-4,28,10,-11,-37,51,-48,28,-15,-3,-17,56,16,-42,30,5,67,-100,-8,-7,-57,-34,-95,8,-45,-45,-8,-83,53,-9,34,-8,-31,-25,-40,37,-7,-51,-30,28,-12,-9,-6,-12,47,-12,-11,-28,67,70,23,-4,-45,-35,-62, 
  /* [15][0][][] */ -76,-34,57,-67,30,-47,-31,-107,27,1,-33,66,-9,-37,57,86,-127,-9,18,-74,34,-20,-36,-75,67,-9,40,-55,-71,-109,-78,30,-29,57,84,-108,-5,-42,28,-8,-16,7,54,-8,15,-5,81,126,-52,2,8,-63,-51,54,12,-60,-99,-26,124,16,-47,9,-106,20,-73,-3,-15,31,81,-93,84,-35,74,-30,-41,-33,19,26,60,4,-15,107,63,15,-3,-21,-116,0,-28,-49,-86,28,43,-32,-44,75, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0023722539190202951, 0.003482102183625102, 0.0023841222282499075, 0.0024470710195600986, 0.0033799277152866125, 0.00313204200938344, 0.0023102958220988512, 0.0027471871580928564, 0.0045181410387158394, 0.0030636563897132874, 0.0031309174373745918, 0.0028180768713355064, 0.0036315713077783585, 0.002906023757532239, 0.0034547138493508101, 0.0032482526730746031, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -1292, 1121, -2140, -4430, -272, 2976, -171, -952, -981, -3821, 7276, -1730, 1718, 13402, 9177, -3195, 15387, 1610, -5146, 48, 963, -3829, -3355, -2201, 150, -4284, -1997, -4397, 305, -7702, -22, 857, 10873, -2492, -1406, -177, 1451, -1444, 77, 6774, -152, 554, 494, -6197, 12702, 16090, 4510, 16134, -1939, 8721, 12214, -2508, -997, 1774, 410, 8014, 309, -636, 10243, 10724, 8309, 9170, 7874, -5373, 1419, 2739, -2265, 1840, -1973, -1329, 1286, 3922, 12473, -2927, -1384, 10648, -3298, -1308, 5677, -1966, 898, 19044, -3942, 1950, 16700, 3481, -3450, -2632, 5644, -6616, 12436, -73, -3111, 104, -3069, -3568, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.0002846829011105001, 0.00017151360225398093, 0.00014459768135566264, 0.00017001134983729571, 0.00029641552828252316, 0.00031962129287421703, 0.00033822088153101504, 0.00026437823544256389, 0.0002363213716307655, 0.00013677496463060379, 0.00014134179218672216, 0.00025740673299878836, 0.00025913215358741581, 0.00010374222620157525, 0.00014809786807745695, 0.00016544353275094181, 0.00010446226224303246, 0.00034625345142558217, 0.0001504783722339198, 8.5992622189223766e-05, 0.00018152171105612069, 0.00033261079806834459, 0.000230845354963094, 0.00019876410078722984, 0.00054081517737358809, 0.00020035039051435888, 0.00027650699485093355, 0.0001237578981090337, 0.00020179744751658291, 8.3104256191290915e-05, 0.00036537399864755571, 0.00023445907572750002, 0.00017644323816057295, 0.00017346201639156789, 0.00026382316718809307, 0.00037163097294978797, 0.00019265235459897667, 0.0003510733658913523, 0.00037723875720985234, 0.00012704904656857252, 0.00021423680300358683, 0.0002624069747980684, 0.0002681365585885942, 9.6667616162449121e-05, 9.890073852147907e-05, 7.7092401625122875e-05, 0.00016144197434186935, 9.3198483227752149e-05, 0.00022643902048002928, 9.962425974663347e-05, 0.00011468945012893528, 0.00014178756100591272, 0.00019085874373558909, 0.00013394279812928289, 0.00025591321173124015, 0.00016603380208835006, 0.00021534034749493003, 0.0002413560141576454, 0.00018981605535373092, 0.00011097249807789922, 0.00016665732255205512, 0.00019106190302409232, 0.00012554692511912435, 0.00012546518701128662, 0.00016897515160962939, 0.00028561498038470745, 0.00025963564985431731, 0.0002579493448138237, 0.00029602934955619276, 0.00027896551182493567, 0.00021529430523514748, 0.00018820184050127864, 9.2477799626067281e-05, 0.00019137658819090575, 0.0002880511456169188, 0.000112660534796305, 0.00012121329928049818, 0.00018240201461594552, 0.00022769848874304444, 0.00024331074382644147, 0.00027218845207244158, 9.0620342234615237e-05, 0.00025278405519202352, 0.00021445425227284431, 8.0291589256376028e-05, 0.00019546505063772202, 0.00015652203001081944, 0.00025277165696024895, 0.00016834306006785482, 0.00017396519251633435, 9.0473600721452385e-05, 0.00042566421325318515, 0.00027595832943916321, 0.00025857015862129629, 0.00017852007295005023, 0.00025556996115483344, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 32,116,-1,48,-33,2,41,26,77,-69,-98,92,-30,-26,27,-50,-127,13,34,51,40,67,81,91,4,-10,-43,-1,-19,20,12,-37,-75,5,-34,93,-10,21,-7,10,22,-44,11,43,-74,-62,6,-7,-15,-76,-37,-15,25,69,-24,-14,-79,-59,-59,-127,-127,7,-127,-6,-36,33,53,-15,-26,21,69,-22,-48,20,45,-16,24,-33,-54,33,8,-63,63,-23,-99,-63,-23,14,-113,18,-115,32,73,-13,34,5, -38,-40,7,116,-15,85,-20,-8,74,42,-127,74,-45,-72,-127,127,-96,54,39,127,122,21,127,127,25,31,16,39,12,127,-13,-127,58,105,3,28,48,80,-31,-99,127,-4,89,105,-55,-99,127,-81,-2,-87,-69,-46,14,127,-23,-127,3,22,-127,-118,-9,-127,-47,109,-50,77,92,-10,2,127,127,-4,-127,24,-28,-100,40,-41,-55,127,-7,-37,127,-63,-127,-60,65,53,92,127,-121,3,127,-39,127,48, 25,-127,-11,8,-19,-2,-7,40,31,62,-81,56,-19,22,21,-75,-40,11,22,54,54,49,65,110,18,-43,26,51,18,17,-11,-56,-42,-86,-35,69,-12,-5,10,2,-10,15,-7,90,-30,-54,-13,18,22,-47,23,1,33,20,15,-3,29,-71,-19,-99,-103,28,-102,-29,41,11,-51,-12,-13,-7,42,-6,-51,-40,0,-6,21,-1,-16,9,5,-90,50,-15,-34,-32,-6,-15,-98,-5,-15,26,31,49,-1,-1, 
  /* [0][1][][] */ 92,-2,47,127,9,-50,125,37,-25,-127,-84,127,-13,-127,-44,15,-98,-47,83,35,-127,5,-120,-64,-9,55,-115,127,-87,70,127,56,13,83,11,127,-127,57,-31,-52,67,-127,22,98,-127,-78,-8,-120,-90,-74,-120,15,84,-56,75,-6,-127,3,-55,-7,-53,-48,-47,37,-104,-26,102,-65,-50,13,-52,-127,-84,94,127,-88,127,82,-101,-40,127,-97,-19,103,-8,-29,15,80,-29,18,-69,28,1,-105,34,-20, -127,4,-59,124,-76,-127,-127,-127,56,19,-19,8,-85,-102,-50,89,-88,-127,127,121,20,-127,-104,100,-127,127,22,86,-72,-12,-102,69,-127,98,127,-40,17,127,127,-82,-41,24,10,66,-24,-127,-123,-101,3,-127,-127,127,31,84,51,-63,19,35,121,-57,-31,-22,-116,127,-10,-127,127,127,17,42,-123,-89,-15,90,-107,-127,97,127,127,-62,-87,-37,-103,54,-92,-102,127,127,113,106,-127,-127,-101,-62,89,127, 57,-51,79,65,-1,-31,7,26,-34,126,-43,93,-11,-25,-99,50,-3,-24,21,24,-124,13,-58,-62,1,0,127,-20,127,97,16,-103,-41,-127,3,103,-115,23,-52,-36,-9,90,37,127,-30,-46,-19,-82,127,-72,-27,2,38,-71,-127,9,84,-4,-118,44,-12,-32,17,36,127,-35,-33,-31,-61,0,-50,-50,-100,-127,-7,-51,25,-11,-100,-41,-82,-91,-9,127,-81,9,10,-16,-51,-5,-11,42,-2,127,-1,-7, 
  /* [0][2][][] */ 37,-110,34,-28,13,8,31,61,-35,-46,-1,-72,4,-30,-13,20,-10,29,4,49,-14,58,26,-27,32,57,-3,1,-37,32,4,16,-6,-5,-24,81,27,1,-13,-49,-4,25,-7,-24,-51,-42,-45,-50,-12,49,-74,37,3,-22,-34,-8,0,9,12,30,-46,5,45,-9,-37,29,-59,-32,29,2,2,55,-6,31,18,0,5,-41,-17,18,4,-86,5,-45,-86,15,-28,-15,-127,63,21,34,-2,11,16,-34, -43,22,127,-23,127,69,-29,27,-127,12,-56,-91,127,-38,-92,5,34,48,3,-78,16,29,59,-12,103,-32,0,49,-22,77,-15,21,-54,50,7,17,63,49,22,-127,-19,-5,-127,16,-36,7,-73,-127,-4,-68,-63,89,127,-113,-28,-50,-23,127,-14,-14,21,-107,113,59,-46,6,-41,3,127,-15,12,58,-66,41,-13,-48,25,-87,-8,-32,-29,-127,-20,-90,-60,127,37,2,66,68,68,29,-18,3,12,-10, 12,56,31,-16,2,-10,-13,47,12,89,31,-30,4,-33,4,23,-20,11,-3,31,-26,48,25,-23,28,56,17,20,-6,45,-26,-73,-37,-4,-19,68,29,-17,-6,-15,-13,-19,9,12,-68,-20,-36,-78,19,43,-7,5,-5,-45,-2,6,-5,3,-6,43,-18,15,32,-40,29,4,-81,2,20,-2,-3,54,8,-1,-4,11,10,-13,-15,20,-18,-114,8,-14,-47,26,-25,-28,-98,73,43,24,-4,-2,9,-36, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.012099022977054119, 0.0072893276810646057, 0.0061454013921320438, 0.0072254822589457035, 0.012597659602761269, 0.013583905063569546, 0.014374387450516224, 0.011236075311899185, 0.010043658316135406, 0.0058129359968006611, 0.0060070259496569633, 0.010939786210656166, 0.011013115756213665, 0.0044090445153415203, 0.0062941592186689377, 0.0070313499309122562, 0.0044396459124982357, 0.014715771190822124, 0.0063953306525945663, 0.0036546862684190273, 0.0077146724797785282, 0.014135958626866341, 0.0098109273239970207, 0.008447473868727684, 0.022984644398093224, 0.0085148913785815239, 0.011751547455787659, 0.0052597108297049999, 0.008576391264796257, 0.003531930735334754, 0.015528394840657711, 0.0099645107984542847, 0.0074988375417888165, 0.0073721357621252537, 0.011212484911084175, 0.015794316306710243, 0.0081877252086997032, 0.014920617453753948, 0.016032647341489792, 0.0053995843045413494, 0.0091050639748573303, 0.011152296327054501, 0.011395803652703762, 0.0041083735413849354, 0.0042032813653349876, 0.0032764270436018705, 0.0068612839095294476, 0.0039609353989362717, 0.0096236579120159149, 0.0042340308427810669, 0.0048743016086518764, 0.0060259713791310787, 0.0081114964559674263, 0.0056925686076283455, 0.010876310989260674, 0.0070564365014433861, 0.0091519644483923912, 0.010257630608975887, 0.0080671822652220726, 0.0047163311392068863, 0.0070829358883202076, 0.0081201307475566864, 0.0053357444703578949, 0.0053322706371545792, 0.007181443739682436, 0.012138636782765388, 0.011034514755010605, 0.01096284668892622, 0.01258124690502882, 0.011856033466756344, 0.0091500077396631241, 0.0079985782504081726, 0.0039303065277636051, 0.0081335045397281647, 0.012242172844707966, 0.0047880727797746658, 0.0051515651866793633, 0.0077520855702459812, 0.0096771856769919395, 0.010340706445276737, 0.011568008922040462, 0.0038513645995408297, 0.010743321850895882, 0.0091143054887652397, 0.0034123924560844898, 0.0083072641864418983, 0.0066521861590445042, 0.010742794722318649, 0.0071545797400176525, 0.0073935207910835743, 0.0038451279979199171, 0.018090728670358658, 0.011728229001164436, 0.010989231057465076, 0.0075871027074754238, 0.010861722752451897, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 6447, 3215, 1649, -1228, 5155, 6681, 6795, 1538, -158, 8569, 1156, -3270, 3226, 3299, 581, -223, 3278, 10960, -735, 128, 4646, 17280, 9720, -2271, -3794, -384, 10563, 125, 1764, 2206, 9335, -1783, 8599, 2327, 3763, -3872, 760, -4697, 385, 2071, 2173, 1273, 1876, -487, 874, 2237, 3738, 3255, 3367, 2273, 5576, 1612, -1705, 1507, 1401, 2138, 1468, 2760, 6947, 1319, -705, 4685, 3086, 2999, 3879, 5619, -4020, 2434, 5559, -875, 4737, 1278, 2917, 2908, 3383, 2747, -140, 1462, 2345, 3173, 2836, 2677, 7746, 1328, 2368, 4265, 802, -961, 17350, -384, 597, -1209, 10124, 2519, -201, -663, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00011581083526834846, 0.00012684776447713375, 0.00015355090727098286, 0.00019479903858155012, 0.00013209227472543716, 0.00011455650383140892, 0.00012138456804677844, 0.00015594223805237561, 0.00025471678236499429, 8.8752902229316533e-05, 0.00018817553063854575, 0.00013328577915672213, 0.00016288718325085938, 0.00015011682990007102, 0.00021845949231646955, 0.00015108556544873863, 0.00018021096184384078, 7.1327158366329968e-05, 0.00012725481064990163, 0.00017121467681135982, 0.00014343047223519534, 5.3655901865568012e-05, 8.849288133205846e-05, 0.00014307840319816023, 0.0001568803854752332, 0.00018663729133550078, 8.2094724348280579e-05, 0.00019887325470335782, 0.00014627435302827507, 0.00013334841059986502, 9.1478264948818833e-05, 0.00016081408830359578, 9.4758237537462264e-05, 0.00021064942120574415, 0.00017571455100551248, 0.00015731142775621265, 0.00016755271644797176, 0.00012545747449621558, 0.00014470402675215155, 0.00015693488239776343, 0.00020407719421200454, 0.00017944486171472818, 0.00021428099717013538, 0.00024948595091700554, 0.00027416183729656041, 0.00016281695570796728, 0.00016215184587053955, 0.00017954871873371303, 0.00017300934996455908, 0.00021012652723584324, 0.00012911130033899099, 0.00019923127547372133, 0.00021072050731163472, 0.00021337403450161219, 0.00017904372361954302, 0.00017977040261030197, 0.00023784030054230243, 0.00014005614502821118, 0.00011223793990211561, 0.00016539734497200698, 0.00024741984088905156, 0.00014613632811233401, 0.00017391190340276808, 0.00019183367840014398, 0.00014164432650431991, 0.00012573592539411038, 0.00013981567462906241, 0.00017585206660442054, 0.00010531331645324826, 0.00020086567383259535, 0.00014363044465426356, 0.0001519731740700081, 0.00013880648475605994, 0.00013730475620832294, 0.00016287479957100004, 0.00011357366747688502, 0.00022992189042270184, 0.00020485593995545059, 0.00019443096243776381, 0.0001718770363368094, 0.00015658797929063439, 0.00017216305423062295, 0.00010017419117502868, 0.00015059921133797616, 0.00015366461593657732, 0.00016636328655295074, 0.00018408219330012798, 0.00023832869192119688, 5.5844800954218954e-05, 0.00021720070799347013, 0.00025472149718552828, 0.00017665326595306396, 8.3976818132214248e-05, 0.00016245052393060178, 0.0002486998273525387, 0.0001372174738207832, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -73,22,4,-37,-18,-68,-57,-8,63,-29,63,-37,78,-101,19,-127, 
  /* [1][0][][] */ -100,56,-102,-127,-91,15,-17,60,-39,-14,91,-53,58,99,21,49, 
  /* [2][0][][] */ -49,-12,-66,-4,-11,-61,22,-63,-119,127,105,43,36,44,-28,95, 
  /* [3][0][][] */ -57,-83,-2,-44,-111,7,-52,-127,-11,16,63,-78,-61,-24,-117,-28, 
  /* [4][0][][] */ 68,-10,-20,48,-58,-15,-125,58,14,93,34,53,-6,18,-52,-127, 
  /* [5][0][][] */ -86,30,-103,-24,33,-38,-28,-68,111,-32,5,-37,16,-127,-124,-91, 
  /* [6][0][][] */ -29,-62,-16,19,-86,60,48,-33,-2,-38,127,-24,-5,-7,-111,20, 
  /* [7][0][][] */ -20,127,123,-47,82,95,-42,-53,66,82,-63,-6,38,25,-1,79, 
  /* [8][0][][] */ -54,-19,42,-21,32,-7,63,127,-42,-1,-57,-42,36,59,-36,-60, 
  /* [9][0][][] */ 41,34,98,22,-106,-64,-107,-107,58,13,127,24,-32,-96,38,-25, 
  /* [10][0][][] */ -36,-127,24,-81,-108,69,47,40,-25,-63,-5,20,-18,41,-127,52, 
  /* [11][0][][] */ 99,-52,14,78,-99,-32,50,-13,127,101,-53,47,12,-91,-19,125, 
  /* [12][0][][] */ -77,-42,127,-41,88,-12,46,53,104,-8,86,88,-18,27,-118,37, 
  /* [13][0][][] */ -20,-28,43,13,19,-4,127,25,-125,22,22,28,-42,106,100,-80, 
  /* [14][0][][] */ 127,-80,113,6,52,51,77,69,85,68,46,50,50,-22,54,-47, 
  /* [15][0][][] */ -17,127,19,-43,22,105,-83,77,-59,-11,-27,-15,-47,120,-19,-51, 
  /* [16][0][][] */ -47,51,127,-70,34,79,2,-7,-4,3,-35,53,89,-15,85,124, 
  /* [17][0][][] */ 8,127,95,-122,18,-65,7,-103,-60,105,-15,59,-61,-63,103,-67, 
  /* [18][0][][] */ -81,-7,-79,-76,120,91,-52,-59,51,73,119,56,-1,127,-51,-7, 
  /* [19][0][][] */ 52,127,71,84,43,-27,1,-1,-25,111,56,108,61,79,-54,51, 
  /* [20][0][][] */ 95,10,4,64,-89,4,-20,39,-39,-47,-127,-66,103,-45,28,7, 
  /* [21][0][][] */ -121,-121,-2,127,-62,-13,-122,94,-31,18,40,31,-36,39,-75,-6, 
  /* [22][0][][] */ 4,19,-83,-38,127,8,-61,55,67,93,57,64,-28,37,-7,34, 
  /* [23][0][][] */ -47,35,-44,12,32,74,126,71,-14,127,-18,-38,4,50,-69,-32, 
  /* [24][0][][] */ 44,-94,10,26,127,58,101,-39,39,50,63,38,-89,61,-6,-36, 
  /* [25][0][][] */ 100,-69,93,53,-18,-34,-46,106,83,3,-36,1,127,-47,92,69, 
  /* [26][0][][] */ 60,31,99,80,77,-4,-70,-17,3,50,7,127,16,-72,21,-52, 
  /* [27][0][][] */ -48,47,-60,27,-22,81,-5,-79,10,-75,127,15,40,-33,102,94, 
  /* [28][0][][] */ -30,31,-55,-109,35,-127,-11,-64,-106,115,-59,29,-21,11,-41,73, 
  /* [29][0][][] */ 59,127,-57,22,37,83,-54,-22,27,68,18,69,-127,10,-25,86, 
  /* [30][0][][] */ -32,84,-126,-43,65,-33,17,23,-61,57,-64,-19,10,57,-17,127, 
  /* [31][0][][] */ 41,-125,115,54,70,-86,-109,28,-17,-19,25,-33,-104,52,50,127, 
  /* [32][0][][] */ -61,80,-5,27,-110,68,19,50,16,-127,35,-78,54,56,45,27, 
  /* [33][0][][] */ -79,-3,75,87,4,12,-60,3,-44,-55,21,-13,-29,-8,1,127, 
  /* [34][0][][] */ -16,9,-104,-89,62,-24,-10,62,20,-9,-2,-11,-69,-17,-28,127, 
  /* [35][0][][] */ 66,11,36,-16,-1,14,-89,-24,-39,-127,-40,11,-22,-28,57,-33, 
  /* [36][0][][] */ -3,27,-127,-8,23,115,-3,41,-27,10,59,30,7,24,-81,34, 
  /* [37][0][][] */ 56,38,61,-47,49,-101,47,-23,-127,66,-88,-29,23,33,83,33, 
  /* [38][0][][] */ -58,127,38,-73,39,17,96,-86,10,-6,-113,33,-36,-94,-87,16, 
  /* [39][0][][] */ 81,44,-127,-110,-9,-13,26,-59,17,-5,1,-39,74,16,-116,-88, 
  /* [40][0][][] */ -25,15,-73,-76,-39,-10,8,-127,-10,-5,-2,-28,25,69,31,53, 
  /* [41][0][][] */ -39,-97,-2,127,-3,-15,-63,-24,-11,-61,64,-58,-81,-20,-1,26, 
  /* [42][0][][] */ -41,78,-24,-127,11,17,16,-4,48,-1,-34,1,82,0,-10,30, 
  /* [43][0][][] */ 9,46,2,24,127,31,36,28,15,48,0,-89,-114,-33,-13,-11, 
  /* [44][0][][] */ 84,-8,32,34,-27,-14,-3,23,24,-37,18,-9,127,11,-68,-20, 
  /* [45][0][][] */ 10,-86,-61,36,-43,-95,14,57,24,-22,22,20,-91,127,46,-31, 
  /* [46][0][][] */ -46,-93,52,26,12,1,-85,69,29,-63,45,-44,28,74,54,127, 
  /* [47][0][][] */ -23,-39,1,72,-2,5,58,19,18,-57,-127,-37,44,-10,-55,9, 
  /* [48][0][][] */ -86,93,-16,-35,11,55,-7,-127,18,-16,39,-52,59,-117,-38,-10, 
  /* [49][0][][] */ -53,24,38,-41,-4,6,127,122,-49,-25,-5,31,-45,45,-44,17, 
  /* [50][0][][] */ 58,23,-90,39,38,-127,-31,-20,-89,60,-63,-10,17,-108,-123,-60, 
  /* [51][0][][] */ -41,73,-20,99,-31,54,-68,-79,-58,-95,-2,-62,18,40,-2,127, 
  /* [52][0][][] */ -119,18,17,-8,15,50,45,13,12,-79,-42,-38,-111,-49,-127,-30, 
  /* [53][0][][] */ -34,-76,-50,-127,-38,-14,9,82,49,-68,-65,-1,-29,21,58,98, 
  /* [54][0][][] */ -11,-68,-3,7,-58,76,57,6,6,-87,52,23,-26,-9,-127,56, 
  /* [55][0][][] */ -11,-28,-42,39,63,-35,78,83,-47,-64,-127,-29,73,-45,-19,38, 
  /* [56][0][][] */ 66,-24,-66,-52,-127,14,-99,-24,-15,5,-16,14,99,-45,41,29, 
  /* [57][0][][] */ -104,-14,54,-46,127,35,51,72,-27,89,-29,-26,-51,72,-121,-4, 
  /* [58][0][][] */ 40,21,-19,-1,46,6,-60,-58,50,-127,-60,-3,-83,-28,-41,43, 
  /* [59][0][][] */ -64,-11,16,18,14,39,-116,-44,58,127,-69,15,-39,20,-13,8, 
  /* [60][0][][] */ 12,-47,4,19,-127,-33,28,24,-8,48,-19,41,-3,-28,55,34, 
  /* [61][0][][] */ 30,45,-95,-12,-50,-24,-127,-96,-27,16,46,123,69,-59,103,66, 
  /* [62][0][][] */ 54,-30,29,-4,-22,40,38,127,-25,114,11,72,22,35,93,98, 
  /* [63][0][][] */ 25,-121,-8,-14,-61,11,42,-25,-12,-15,6,-13,-30,127,92,24, 
  /* [64][0][][] */ -13,-11,-127,-16,20,61,28,-10,1,-93,29,-12,61,-25,-65,91, 
  /* [65][0][][] */ -19,-6,76,53,63,-14,95,94,-62,-11,-127,-74,49,111,-58,-30, 
  /* [66][0][][] */ -44,-127,-14,-84,-46,-123,40,-10,11,-40,9,52,-59,-46,-56,84, 
  /* [67][0][][] */ -7,-65,-83,14,-72,119,-20,-127,-58,-11,-53,-73,1,-17,-73,43, 
  /* [68][0][][] */ 127,51,61,0,-68,-29,-119,-79,-123,-118,0,15,27,-91,37,-100, 
  /* [69][0][][] */ 51,-3,24,0,-26,-38,-48,30,4,127,-15,16,-3,40,88,-24, 
  /* [70][0][][] */ 44,-5,-15,74,-127,36,-1,-95,76,100,28,33,48,-79,-4,40, 
  /* [71][0][][] */ 103,-79,77,113,-65,-30,10,-15,127,8,-34,46,44,-70,21,6, 
  /* [72][0][][] */ 8,-31,22,114,70,18,-127,71,105,7,29,36,-55,-58,-55,75, 
  /* [73][0][][] */ 74,40,70,-127,76,-71,-87,33,-26,82,-25,19,-7,-86,20,-46, 
  /* [74][0][][] */ 88,-7,28,59,-127,-20,39,3,-79,-35,19,-42,25,-58,20,24, 
  /* [75][0][][] */ 76,127,-114,25,60,62,-12,-24,-21,-23,50,65,-107,63,58,94, 
  /* [76][0][][] */ -75,-31,5,-46,-38,-10,80,-6,-61,31,88,55,-62,-127,-30,82, 
  /* [77][0][][] */ -79,127,-12,5,-34,-78,19,110,65,-77,-53,90,4,75,16,74, 
  /* [78][0][][] */ 90,42,-37,14,-51,42,-127,-20,5,-21,-58,-4,29,-95,4,41, 
  /* [79][0][][] */ -73,-43,127,30,-10,-102,-50,-28,-30,1,10,1,-72,104,-43,42, 
  /* [80][0][][] */ 56,103,35,-127,3,30,80,-33,16,12,-36,27,80,-57,10,-10, 
  /* [81][0][][] */ 42,-48,11,-88,81,54,-13,98,127,30,-31,-44,-25,17,-80,-64, 
  /* [82][0][][] */ 50,18,98,2,127,-112,29,71,-23,88,-39,23,-7,-41,49,-117, 
  /* [83][0][][] */ -74,80,29,-26,82,42,127,111,-2,68,-8,-64,-95,77,-46,-77, 
  /* [84][0][][] */ 1,-106,-7,106,7,-91,-105,51,-75,72,-81,-11,-127,73,-19,-49, 
  /* [85][0][][] */ -112,57,-39,-3,-23,-18,-42,-4,-27,34,16,-75,-127,-72,-60,34, 
  /* [86][0][][] */ 1,79,113,127,37,-45,75,21,6,11,-69,-84,41,109,-125,-76, 
  /* [87][0][][] */ -24,48,127,-33,-108,-37,31,10,39,-29,8,51,-53,20,-4,-3, 
  /* [88][0][][] */ -32,-80,-114,10,47,30,-9,40,-11,-89,-80,-106,127,-12,7,56, 
  /* [89][0][][] */ 32,14,21,-115,13,-55,-60,46,127,1,17,-89,3,-33,50,-72, 
  /* [90][0][][] */ -5,53,31,26,-34,41,41,127,18,-49,-21,123,63,-5,-34,73, 
  /* [91][0][][] */ -88,-23,11,50,58,29,-42,-90,-74,3,4,5,-102,-127,-34,-6, 
  /* [92][0][][] */ -56,39,11,-21,-127,17,-69,70,-37,66,76,43,2,-28,39,17, 
  /* [93][0][][] */ 88,33,81,41,-127,-69,22,34,-17,-49,-27,-55,19,-52,1,0, 
  /* [94][0][][] */ -33,-127,29,-118,9,41,-33,7,68,-27,6,55,16,74,-60,41, 
  /* [95][0][][] */ -31,-71,-18,-39,126,127,-40,39,105,66,-87,64,-42,123,-92,39, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0015309524023905396, 0.0016768542118370533, 0.0020298543386161327, 0.0025751309003680944, 0.0017461836105212569, 0.001514370902441442, 0.0016046339878812432, 0.0020614664535969496, 0.0033672088757157326, 0.0011732621351256967, 0.0024875719100236893, 0.0017619610298424959, 0.0021532746031880379, 0.0019844579510390759, 0.0028879083693027496, 0.001997264102101326, 0.0023822849616408348, 0.00094290392007678747, 0.0016822352772578597, 0.002263359259814024, 0.0018960681045427918, 0.00070930004585534334, 0.0011698248563334346, 0.0018914139363914728, 0.0020738681778311729, 0.0024672374129295349, 0.0010852449340745807, 0.0026289897505193949, 0.0019336625700816512, 0.0017627890920266509, 0.0012092898832634091, 0.0021258695051074028, 0.0012526492355391383, 0.0027846638113260269, 0.0023228449281305075, 0.0020795662421733141, 0.0022149502765387297, 0.0016584753757342696, 0.0019129037391394377, 0.002074588555842638, 0.0026977828238159418, 0.0023721575271338224, 0.0028326711617410183, 0.0032980602700263262, 0.0036242613568902016, 0.0021523463074117899, 0.0021435539238154888, 0.0023735305294394493, 0.0022870837710797787, 0.0027777515351772308, 0.0017067769076675177, 0.0026337224990129471, 0.0027856035158038139, 0.0028206815477460623, 0.0023668548092246056, 0.0023764609359204769, 0.0031441114842891693, 0.0018514613620936871, 0.001483720843680203, 0.0021864573936909437, 0.003270747372880578, 0.0019318378763273358, 0.0022990149445831776, 0.0025359306018799543, 0.0018724562833085656, 0.0016621563117951155, 0.0018482826417312026, 0.0023246628697961569, 0.0013921812642365694, 0.0026553282514214516, 0.0018987116636708379, 0.0020089976023882627, 0.0018349416786804795, 0.001815089606679976, 0.0021531109232455492, 0.001501378370448947, 0.0030394347850233316, 0.0027080774307250977, 0.0025702652055770159, 0.002272115321829915, 0.0020700027234852314, 0.0022758962586522102, 0.0013242450077086687, 0.001990834716707468, 0.0020313574932515621, 0.0021992267575114965, 0.0024334604386240244, 0.0031505678780376911, 0.00073823606362566352, 0.0028712679632008076, 0.0033672712743282318, 0.0023352543357759714, 0.0011101251002401114, 0.0021475022658705711, 0.0032876681070774794, 0.0018139359308406711, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -27523, -2902, 7151, -11120, 6737, -14406, 21867, -6911, 7503, -7854, 16562, 12355, 441, -29828, 584, 5336, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.9355621235445142e-05, 5.8069475926458836e-05, 5.7987810578197241e-05, 5.6985078117577359e-05, 9.238954953616485e-05, 0.00012802946730516851, 6.5846812503878027e-05, 7.2430681029800326e-05, 0.00011261086910963058, 8.9803703303914517e-05, 0.00010752367234090343, 7.8045959526207298e-05, 9.0650704805739224e-05, 9.3897106125950813e-05, 6.8693967477884144e-05, 7.4969801062252373e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 27,34,14,11,-29,-84,-16,12,-13,-70,3,-10,57,-62,62,31,-79,-34,39,7,81,18,-63,5,3,67,127,59,4,76,53,-31,11,8,-2,-29,37,35,-2,-11,113,23,13,-10,4,-12,20,-20,23,-22,86,-5,-59,-4,51,23,-16,-42,5,16,-12,49,-55,-2,18,8,59,24,1,-34,17,14,9,31,12,32,53,-29,40,27,-19,33,41,47,-46,-2,-5,62,24,15,-88,-5,33,-2,107,84, 
  /* [1][0][][] */ 15,53,-49,-16,-13,-59,85,-71,-64,-36,-60,-34,1,-55,-20,-54,-33,-17,-28,-14,-12,-107,123,-49,-1,14,6,61,-49,5,-50,19,-30,20,15,15,-9,57,-60,82,27,-1,-8,-56,64,-65,-13,28,-89,-6,43,-106,-39,57,59,59,44,26,-67,13,-50,12,-12,-5,33,24,106,3,-50,-127,4,5,23,71,-23,46,-52,-37,99,-33,49,-20,46,-75,-30,-58,-23,6,-22,-49,29,-9,92,-49,-43,55, 
  /* [2][0][][] */ 1,-19,12,-2,77,55,-41,12,-60,41,13,-36,31,-7,14,26,27,-17,-127,-17,-17,-39,-19,18,-10,-10,-46,18,-40,-23,-22,65,-18,-47,-13,9,-40,10,-20,-18,60,15,9,34,4,52,-4,-10,-77,6,-22,19,-32,51,1,-58,42,14,40,34,-25,-25,-25,49,30,-12,-43,-7,-9,7,-21,-26,19,56,15,66,-50,-6,-26,-45,30,26,41,-27,-15,-42,-18,-50,-21,-33,-12,55,-11,3,82,-40, 
  /* [3][0][][] */ 34,-55,-21,-122,-22,-30,111,-24,20,127,-91,-15,-3,-26,-13,63,60,45,-26,21,-45,20,21,7,-28,81,44,-8,-60,-22,-48,73,-5,-18,30,-28,5,-52,-12,58,1,11,-20,30,62,-41,0,49,51,-24,23,-41,104,32,29,-20,-13,-31,6,-35,-23,45,62,-7,-29,-28,110,-56,-33,-16,-44,25,14,-72,8,-75,18,-51,118,-6,3,-55,-27,-41,-31,-42,77,71,-49,39,-68,12,14,-81,-24,45, 
  /* [4][0][][] */ -35,81,35,1,-30,4,-37,-1,26,-38,16,-9,21,40,-16,28,-19,-43,-16,-64,28,-36,-58,12,-19,-30,-20,15,-37,127,-62,-21,12,-31,-1,-34,61,52,-37,-2,23,9,21,-34,-40,-4,63,-11,20,-24,-53,-7,-60,30,48,34,0,68,-30,18,-47,-52,-28,8,59,39,-50,2,-5,-13,5,-68,4,66,63,79,-37,12,-48,46,15,69,29,-50,60,-65,-23,-65,-30,-53,-52,0,6,15,36,-25, 
  /* [5][0][][] */ -7,-20,36,-33,-20,-28,-18,17,40,11,-11,0,-24,-27,23,-19,-9,-3,-53,-38,-23,6,-19,8,31,-43,56,-19,-5,36,17,77,-5,-82,21,9,-40,-25,-30,0,-49,4,-26,21,5,25,-69,36,-14,21,45,-14,30,-77,14,12,-34,-51,2,-40,39,30,25,57,-37,18,105,-28,-4,-34,15,10,1,28,34,8,-4,-13,127,44,-16,-12,-19,35,41,65,1,95,8,-33,-12,23,22,-15,-34,20, 
  /* [6][0][][] */ 8,-69,55,8,-22,127,-44,-107,-40,-73,-66,50,-3,23,-27,73,14,45,14,-26,-94,-25,-85,-56,1,-50,-16,72,-100,35,1,-38,20,81,-4,-10,-3,-42,41,-28,-56,25,34,-25,17,66,-92,-19,47,-1,-66,-121,67,8,-37,-16,17,-12,39,-16,-19,-58,19,-23,46,-88,-71,-52,-74,24,-3,-54,-31,-89,11,-97,91,3,-74,39,-18,88,32,-83,52,-23,-12,-4,-71,52,-80,82,41,-34,60,-93, 
  /* [7][0][][] */ -16,-18,-49,55,-10,15,41,-16,-88,-4,75,40,-7,-41,-7,-37,8,13,1,-3,-53,-27,-33,-35,53,51,-8,62,-5,19,34,24,-56,-127,31,78,-10,-3,-25,11,-13,-17,13,-76,15,51,49,58,-3,40,-41,-5,18,-25,27,-42,-5,23,-50,-17,61,-18,-2,-39,59,-55,100,-24,-49,1,73,15,-25,-28,-79,-35,40,-33,92,-34,4,-11,-78,-42,31,25,-74,40,-13,17,1,21,39,11,69,-11, 
  /* [8][0][][] */ -10,-55,8,-6,-25,-18,20,13,-1,-5,52,43,10,29,-33,-3,65,2,15,4,-12,-78,-30,-25,-16,-27,67,5,-19,49,16,-27,-13,8,5,-7,-40,-11,16,-30,-2,44,15,-26,26,-13,27,0,32,-1,51,0,4,10,-26,9,-28,107,-62,-12,-20,-57,-55,4,-77,-18,-10,14,-10,0,40,-28,-12,-127,44,-93,12,12,-51,22,-22,0,13,68,65,-60,-37,47,-30,85,8,-5,-36,3,0,-53, 
  /* [9][0][][] */ -24,-34,-25,27,20,33,9,29,-53,3,56,56,-21,58,17,-49,-22,33,-17,-40,0,51,-10,17,-27,22,10,21,32,-7,26,-5,-25,-27,5,54,-21,-13,31,-4,-18,-33,13,-6,7,48,-7,31,-57,1,-11,36,127,19,-23,2,19,-18,51,17,-13,-6,80,3,9,8,61,14,32,2,-22,35,6,-122,-38,-120,-35,-11,38,-8,-6,35,-1,-48,40,8,-58,-1,-6,107,42,19,48,29,-11,24, 
  /* [10][0][][] */ 27,42,13,10,-1,22,-43,-39,61,7,-45,17,20,12,-13,-58,-37,-4,19,1,24,-6,-21,-24,4,-26,-97,47,-18,54,-6,12,14,19,-16,6,8,0,0,2,36,-19,61,-49,-41,1,9,15,9,-6,11,-25,-24,-13,-11,36,-6,5,-6,-6,-6,-46,-5,3,-7,-26,-97,-18,-47,-13,46,-10,-28,29,31,14,48,-15,-98,8,-15,31,-3,-13,-1,2,-73,-127,-28,24,14,10,43,-34,19,24, 
  /* [11][0][][] */ 26,-41,9,22,-42,39,20,-15,77,-17,-29,-48,27,11,2,0,-26,59,27,-68,5,38,11,-27,22,8,74,1,28,-45,-32,19,8,107,-103,9,13,-17,57,16,-54,41,-14,5,-51,-9,-28,-26,51,-23,-24,-12,-32,19,-95,111,-22,-5,0,-31,28,-15,-17,-77,-14,-66,-127,-79,5,-23,-96,27,45,22,-7,2,35,57,-109,-42,-9,-4,-25,-16,-29,-12,67,93,20,-57,25,-5,-42,29,89,42, 
  /* [12][0][][] */ 9,29,-29,-19,35,-19,2,29,49,-41,23,-7,5,-16,-12,10,15,-44,-23,4,7,48,-3,56,-44,-36,-127,-5,70,-30,37,-7,-27,-89,67,-2,40,-19,4,19,-6,-61,15,24,34,-8,22,-28,-69,4,-52,91,70,-17,13,-81,20,23,-33,-33,16,34,70,5,-23,-25,17,22,112,37,24,28,-5,-14,-22,-14,-31,-56,37,-75,29,-56,21,-39,-8,13,3,-100,-8,37,-41,8,6,83,8,41, 
  /* [13][0][][] */ -28,21,-83,18,19,19,-9,16,17,55,-30,42,-51,-21,63,-47,7,42,55,15,-31,-40,-5,16,48,50,-29,30,6,28,60,-22,-10,67,-4,48,21,-42,-41,-49,5,-11,12,24,47,51,-29,42,-39,39,3,-2,-12,-42,65,36,12,-40,-4,-9,23,29,0,-34,8,83,127,35,29,-3,-43,-6,42,46,-82,51,23,-70,116,-39,-9,-28,27,14,22,58,-31,-29,-17,-24,2,55,50,29,46,46, 
  /* [14][0][][] */ -10,66,14,29,-47,-50,21,38,-70,-20,70,-2,-83,0,83,-26,-40,40,-61,19,-25,19,-107,13,-36,0,-48,-107,2,0,29,81,-57,24,9,-15,-15,-66,-3,-40,17,-36,43,-19,-4,42,-73,30,-10,-35,76,18,-24,21,-25,33,-55,23,11,33,41,59,-18,46,6,-46,-5,-79,46,63,63,32,-53,49,12,25,32,-8,35,5,-57,113,6,-127,79,-6,-10,8,-107,-19,-15,-8,-23,23,43,51, 
  /* [15][0][][] */ 61,-23,26,43,43,5,-11,-24,27,26,-51,-18,68,58,-20,-16,-8,4,-72,45,1,-23,14,29,46,-37,86,31,44,-26,-44,58,56,46,0,-70,55,61,43,59,81,32,-12,-3,-47,-127,23,-43,-30,-27,-14,3,-17,-41,-37,61,-4,5,-19,16,2,-65,-35,32,34,41,-67,48,-8,-22,2,-4,-1,-111,-49,-96,-22,21,-111,33,72,-33,29,15,-60,-9,-10,-16,38,80,16,-72,-31,-23,29,-46, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0029476138297468424, 0.0024679526686668396, 0.0024644818622618914, 0.0024218657054007053, 0.0039265556260943413, 0.0054412521421909332, 0.0027984895277768373, 0.0030783039983361959, 0.0047859619371592999, 0.0038166572339832783, 0.0045697558671236038, 0.0033169530797749758, 0.0038526549469679594, 0.0039906268939375877, 0.0029194934759289026, 0.0031862163450568914, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10121, -179, -6420, 8045, -471, -1563, 837, -981, 4210, -3838, 25, -687, 8121, -3977, -656, -5396, -545, -1002, -7943, -722, -1280, 2216, -6573, 1587, 77, 6616, -7277, -4862, -4128, -1453, -1918, -1799, 21152, -828, -2775, -176, -860, 10514, 6382, 12901, 133, 3267, 1439, 8032, -377, 199, 10943, 2094, -6558, 32, -3119, -560, -1592, -3597, -1858, 1721, 1140, 1123, -51, 1227, -1754, -255, -3929, 6546, 10362, -1031, 12777, 4830, 1604, -1671, 9174, -2125, 329, 546, -516, 12, 13732, 11973, 10535, 16553, 11698, -1137, 8690, 7604, -1083, -2465, 12015, -6441, 10561, -590, -9667, 245, -242, 1740, 16307, -1526, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00010527740960242227, 0.00035214671515859663, 0.00015102849283721298, 0.00016349389625247568, 0.00026143417926505208, 0.000577254977542907, 9.9065837275702506e-05, 0.00027784905978478491, 0.00032338197343051434, 0.00024728631251491606, 0.00026290994719602168, 0.00021067803027108312, 0.00010731630027294159, 0.00014517542149405926, 0.00023470180167350918, 0.00021115949493832886, 0.00030627378146164119, 0.00041003775550052524, 0.00014206464402377605, 0.00031339735141955316, 0.00026672580861486495, 0.00025714526418596506, 0.00010226826270809397, 0.00022093018924351782, 0.0019622347317636013, 0.00019025926303584129, 0.00028327616746537387, 0.0001629639882594347, 0.0003359537513460964, 0.00019026217341888696, 0.00021394119539763778, 0.00030395042267628014, 6.0862967075081542e-05, 0.00044433935545384884, 0.0001514738833066076, 0.00020017221686430275, 0.00032752432161942124, 9.6649418992456049e-05, 0.00014974904479458928, 8.9508132077753544e-05, 0.00065642123809084296, 0.0002757069596555084, 0.00021933291282039136, 0.00012480605801101774, 0.00016318287816829979, 0.00032940428354777396, 0.00012630004493985325, 0.0002967195468954742, 0.00015359823009930551, 0.00047103894758038223, 0.00033854501089081168, 0.00022389859077520669, 0.00015071587404236197, 0.00025111195282079279, 0.00027849629987031221, 0.00035967543954029679, 0.00019897308084182441, 0.00064731627935543656, 0.00047768908552825451, 0.00031734199728816748, 0.00031212493195198476, 0.00031364921596832573, 0.00013906955427955836, 0.00011202486348338425, 0.00021575558639597148, 0.00058534927666187286, 0.00012856046669185162, 0.00021492641826625913, 0.00024529747315682471, 0.0004383334016893059, 0.00012034904648317024, 0.00028466765070334077, 0.00054106209427118301, 0.0001997948857024312, 0.00020761050109285861, 0.00022535078460350633, 9.1536625404842198e-05, 0.00012385949958115816, 0.00012118288577767089, 0.00014203762111719698, 7.9507291957270354e-05, 0.00030047842301428318, 9.8232572781853378e-05, 0.00042209512321278453, 0.00010096038749907166, 0.00033152790274471045, 0.00013341753219719976, 0.00023010879522189498, 0.00012112424155930057, 0.00024249852867797017, 9.0237379481550306e-05, 0.00023005135881248862, 0.00032156819361262023, 0.00015749834710732102, 9.4117160188034177e-05, 0.00029497273499146104, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -55,-12,24,-43,85,7,27,-8,-14,-3,-14,-10,-35,5,-14,-10,-14,7,-19,-21,-13,33,-19,30,-2,-11,-38,6,35,-14,35,14,-24,2,-6,-22,8,-54,-72,13,-5,-28,32,-37,-17,49,-72,-10,-24,7,-11,63,-61,1,35,-22,16,-5,9,-12,3,-20,16,-63,-6,-19,-41,-24,-21,34,-5,-1,17,-1,-28,-13,-17,-5,127,-80,-123,7,-121,-21,-22,-17,-1,7,-22,-9,15,-52,-16,40,14,-4, -57,46,67,-85,-38,5,127,-50,-10,-14,-36,-6,-127,14,-98,54,-14,74,77,-25,0,127,41,101,25,21,44,83,127,51,127,-21,-117,-14,-94,-41,-11,-41,127,-74,-36,-127,-7,-57,74,-41,-47,1,33,-3,21,127,-85,44,-80,-12,-77,0,-5,21,4,-127,-123,-32,-59,9,-1,-72,-17,31,-54,122,-127,-9,-1,-32,-127,-72,2,-127,-94,13,-1,-49,123,87,-57,42,-127,-1,51,-23,9,124,-33,-99, -22,-8,22,-35,63,14,51,-26,-28,3,-12,-1,-3,5,-12,-17,-10,1,-44,-29,-14,8,11,21,-7,-12,1,-10,10,-11,17,14,-24,4,-29,64,5,-53,-46,12,-2,3,12,-19,-10,-26,-53,-27,-18,4,-13,37,15,-11,16,-20,62,-9,11,-16,7,-7,-41,-15,-21,-25,127,-12,-13,30,25,19,7,7,-27,3,1,9,-30,-64,-127,2,-127,-16,4,-30,4,-19,-71,-30,-20,42,5,29,3,5, 
  /* [0][1][][] */ -81,-5,46,-38,40,89,-70,-16,-12,-2,-24,-17,-118,25,18,57,-16,43,127,16,27,-23,97,-30,27,14,51,8,5,-12,2,-9,-127,-13,62,-5,-7,-127,-103,-127,-19,9,81,-50,-85,127,-105,-83,70,61,14,-32,-105,80,75,-29,30,-26,36,-7,13,-9,116,-107,-36,20,-27,-19,-26,2,-127,24,54,127,-2,-75,-58,-61,-67,-44,-84,-13,-39,-58,35,24,-127,51,-48,127,114,-91,127,1,-51,-4, 64,127,127,127,-127,-127,123,-54,127,127,-72,-71,-61,127,-24,127,127,-127,106,127,127,-104,127,-127,-127,-127,127,127,-96,127,-7,127,-87,127,127,-121,127,114,-10,-17,127,34,-127,-116,127,-29,127,127,127,-127,127,-119,127,127,-127,127,-127,127,-127,127,-93,126,113,-127,127,127,-18,127,-121,-127,5,-127,9,123,127,70,7,-127,103,-87,36,127,102,127,127,77,-111,127,-94,52,9,-28,-94,-36,-127,-19, -127,-31,30,-71,15,69,-65,1,-44,-14,-3,127,-92,24,17,50,-23,50,72,6,14,-24,59,-20,25,19,30,-5,3,-19,18,-6,-111,-26,80,127,1,-127,-111,-125,-28,-12,15,-53,-67,-68,-65,-116,56,59,-1,-16,126,16,104,-35,92,-23,50,-37,-1,-23,-110,-39,-75,0,-61,-36,-40,11,-105,14,29,-94,0,127,-49,-67,-54,13,-87,-22,-58,-61,-5,31,-96,54,-77,-69,127,127,-47,-33,-84,-1, 
  /* [0][2][][] */ -29,-50,-22,-15,30,5,9,25,-17,10,33,-40,100,7,-11,-33,5,2,-60,-17,-23,-18,22,-34,-4,-10,0,-6,15,-30,-18,8,-25,4,7,-18,-4,-8,-26,-20,-23,61,20,-10,27,16,-79,5,-15,1,-17,-11,6,-37,42,-3,5,-21,10,-23,9,13,3,30,-50,-26,124,14,20,23,-24,-1,-6,1,-27,-29,-13,2,-43,-51,24,9,-74,-33,-13,7,24,-28,20,1,14,-25,-8,-19,-11,3, -55,-80,34,-97,-39,7,70,127,-61,58,127,-46,-53,22,127,65,0,-28,89,-45,-38,-54,125,5,14,-18,25,20,2,-2,-65,-41,-97,-20,-66,-20,-91,-121,59,-114,-17,-77,-41,127,35,-23,-59,-7,48,-6,-10,-19,62,24,-46,-40,-68,-48,40,-55,127,31,127,20,-118,-58,-27,-35,127,35,-74,19,16,-38,14,-17,-13,-70,-1,47,-92,-15,-48,-63,28,-127,-7,7,-3,1,105,-7,20,-127,-61,127, -35,31,-22,-16,35,2,27,19,-26,-5,15,32,85,9,-15,-21,1,16,-42,-23,-26,-16,11,-13,-13,-10,-31,-7,6,-13,-18,8,-44,7,15,-5,-7,-61,-31,-2,-28,-26,-16,1,31,-12,-69,5,-7,-7,-12,-5,-5,-39,29,3,40,-14,12,-30,6,15,14,68,-28,-23,-38,18,18,17,-43,2,-39,-54,-26,8,-7,1,100,-18,5,-5,-55,-1,-19,12,42,14,-18,2,-17,14,2,-30,-10,3, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0044742897152900696, 0.014966235496103764, 0.0064187110401690006, 0.0069484906271100044, 0.011110952123999596, 0.024533335119485855, 0.0042102979496121407, 0.011808585375547409, 0.013743733055889606, 0.010509667918086052, 0.011173672042787075, 0.008953816257417202, 0.0045609427616000175, 0.0061699552461504936, 0.0099748261272907257, 0.0089742783457040787, 0.013016635552048683, 0.017426604405045509, 0.0060377474874258041, 0.013319387100636959, 0.011335846036672592, 0.010928673669695854, 0.0043464009650051594, 0.0093895327299833298, 0.08339497447013855, 0.0080860182642936707, 0.012039236724376678, 0.0069259693846106529, 0.014278033748269081, 0.0080861421301960945, 0.0090925004333257675, 0.012917893007397652, 0.0025866760406643152, 0.01888442225754261, 0.0064376397058367729, 0.0085073187947273254, 0.01391978282481432, 0.0041076000779867172, 0.006364334374666214, 0.0038040955550968647, 0.027897901833057404, 0.011717545799911022, 0.0093216486275196075, 0.0053042573854327202, 0.0069352719001471996, 0.013999681919813156, 0.0053677516989409924, 0.012610580772161484, 0.0065279244445264339, 0.020019154995679855, 0.014388162642717361, 0.0095156896859407425, 0.0064054247923195362, 0.010672257281839848, 0.011836092919111252, 0.01528620533645153, 0.0084563558921217918, 0.027510941028594971, 0.020301785320043564, 0.013487034477293491, 0.013265309855341911, 0.013330091722309589, 0.0059104557149112225, 0.0047610565088689327, 0.0091696120798587799, 0.024877343326807022, 0.0054638194851577282, 0.0091343726962804794, 0.010425142012536526, 0.018629169091582298, 0.0051148342899978161, 0.012098374776542187, 0.022995138540863991, 0.0084912823513150215, 0.0088234459981322289, 0.0095774084329605103, 0.003890306456014514, 0.0052640284411609173, 0.005150272510945797, 0.0060365987010300159, 0.0033790599554777145, 0.012770332396030426, 0.0041748844087123871, 0.017939042299985886, 0.0042908163741230965, 0.014089935459196568, 0.0056702448055148125, 0.0097796237096190453, 0.0051477802917361259, 0.010306186974048615, 0.0038350885733962059, 0.0097771827131509781, 0.013666647486388683, 0.0066936798393726349, 0.0039999792352318764, 0.012536341324448586, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1295, 6082, 184, 1433, 3892, 11923, -62, 2186, 10023, -1076, 14144, 5115, 1584, 448, 3921, 442, 2259, 4138, -420, 11682, 885, 9020, -1147, 1589, -8800, 949, 2275, 1438, 6592, 1767, 3144, 3341, 1820, 9262, 4273, 5203, 3609, 2259, 3661, 2039, 20041, 1482, 2289, 1461, 3230, 7132, 7452, 6967, 1079, -739, 1887, 4886, 2534, -2730, 6989, 52, 2478, 13884, 818, 1633, 2251, 8999, 3421, -319, 10475, 8712, 2076, 3425, 7169, 4813, 1938, 1424, -3587, 5393, 2526, 2951, 411, 9867, 4165, 7958, 2595, 954, 4584, 17858, 114, 7840, 6473, 1588, -465, 2163, 928, 8176, 2924, 3424, 4588, 6014, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.0002325063687749207, 0.00012535651330836117, 0.00032153399661183357, 0.00027234735898673534, 0.0001670886849751696, 7.4586307164281607e-05, 0.00021643422951456159, 0.00012663357483688742, 8.7936525233089924e-05, 0.000153262575622648, 6.0143760492792353e-05, 0.0001078203713404946, 0.00018637356697581708, 0.00037853242247365415, 0.00015113329573068768, 0.00014803174417465925, 0.00025572197046130896, 0.00016184544074349105, 0.00021450321946758777, 7.6281394285615534e-05, 0.00023409213463310152, 8.2971542724408209e-05, 0.00018048637139145285, 0.00017610887880437076, 8.4010367572773248e-05, 0.00018488550267647952, 0.0002031048497883603, 0.00024662201758474112, 0.00013117131311446428, 0.00018103605543728918, 0.00018527501379139721, 0.00016226661682594568, 0.00024600178585387766, 8.8774948380887508e-05, 0.00013491827121470124, 0.00012437471013981849, 0.00016134658653754741, 0.00018074735999107361, 0.00012745807180181146, 0.00020440698426682502, 4.789144077221863e-05, 0.00018751826428342611, 0.00018637333414517343, 0.00014143607404548675, 0.00013492870493791997, 0.00010758449207060039, 9.7136820841114968e-05, 0.00010522240336285904, 0.00027300792862661183, 0.00029252370586618781, 0.0002451016625855118, 0.00014765771629754454, 0.00017463827680330724, 0.00013714972010347992, 9.9089229479432106e-05, 0.00036722549702972174, 0.00012929785589221865, 6.7987566580995917e-05, 0.00018747037393040955, 0.00017507380107417703, 0.00018492966773919761, 9.5764640718698502e-05, 0.00017182985902763903, 0.00021496578119695187, 8.689417882123962e-05, 0.00010075494355987757, 0.0002187679783673957, 0.00018225632084067911, 0.00011169425124535337, 9.689849684946239e-05, 0.00025945893139578402, 0.0001566050632391125, 0.00015104828344192356, 0.0001288065395783633, 0.00016320442955475301, 0.00021521098096854985, 0.00020527394372038543, 7.9495104728266597e-05, 0.00015036515833344311, 0.00011517653183545917, 0.00014322050265036523, 0.00018083069880958647, 0.00011379775969544426, 5.8237372286384925e-05, 0.00014938815729692578, 8.8032145868055522e-05, 0.00011591686779865995, 0.00023962503473740071, 0.00022956544125918299, 0.00024472645600326359, 0.00017076624499168247, 0.00010490034765098244, 0.00016815897834021598, 0.00012867098848801106, 0.0001161116742878221, 0.00011748042743420228, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 45,-7,5,54,-127,-8,117,45,78,83,-45,35,18,1,29,87, 
  /* [1][0][][] */ -31,20,-77,7,127,108,-23,11,-23,30,-57,41,-79,81,-51,-60, 
  /* [2][0][][] */ -32,54,71,-4,46,77,3,34,37,-8,37,-16,45,-127,-12,6, 
  /* [3][0][][] */ 127,-21,13,12,39,44,-9,8,45,29,-47,-7,-48,60,-29,55, 
  /* [4][0][][] */ -82,-42,4,23,-127,-3,-93,-23,-10,28,-8,-46,-10,30,-15,126, 
  /* [5][0][][] */ -127,-11,38,5,126,38,22,37,-55,13,-9,22,-39,84,-73,-27, 
  /* [6][0][][] */ -127,25,-50,40,-19,-75,88,26,22,-49,-48,46,19,3,-41,14, 
  /* [7][0][][] */ 7,127,124,-90,98,26,107,6,63,30,-11,68,100,5,17,-37, 
  /* [8][0][][] */ -43,-27,-64,38,-52,91,-38,-63,44,-42,79,53,127,52,-107,4, 
  /* [9][0][][] */ -17,-127,-14,75,-33,-75,-29,53,62,63,5,64,-89,4,-26,-43, 
  /* [10][0][][] */ -47,-56,-83,16,-109,127,55,-75,30,-83,25,-58,22,74,-53,70, 
  /* [11][0][][] */ -61,-80,-22,22,-5,91,26,-11,15,17,59,-90,7,111,-127,123, 
  /* [12][0][][] */ -14,-85,-89,90,-95,-124,23,51,76,88,-31,127,-2,-45,-28,-22, 
  /* [13][0][][] */ -59,-25,-34,4,-9,-2,25,15,-18,127,-15,-23,34,32,16,-13, 
  /* [14][0][][] */ -127,-19,-26,-75,-24,88,-28,-77,114,-71,59,3,97,-70,-66,-86, 
  /* [15][0][][] */ -7,-127,119,-73,-76,-49,8,76,11,-53,-94,-39,84,-39,-41,-53, 
  /* [16][0][][] */ -17,-45,23,-53,35,25,-14,-11,71,-127,52,-3,5,8,-76,-97, 
  /* [17][0][][] */ -50,23,41,-70,25,-16,-34,21,81,-64,39,89,119,-58,-22,-127, 
  /* [18][0][][] */ 67,2,-49,-107,-20,-24,127,-12,14,41,18,55,-16,86,-1,-101, 
  /* [19][0][][] */ -49,-37,-30,-77,-106,44,2,8,27,-60,9,-127,-15,-6,-28,9, 
  /* [20][0][][] */ -6,61,74,-81,54,-3,-54,92,-111,-127,44,-72,-47,122,-33,-18, 
  /* [21][0][][] */ -16,-122,-90,-22,81,31,82,127,-83,-123,-44,25,118,-87,-1,56, 
  /* [22][0][][] */ 59,-8,84,-6,-10,-8,42,29,10,127,38,30,-13,-14,120,-12, 
  /* [23][0][][] */ -127,-53,-30,41,51,52,22,15,11,-4,-15,-97,11,63,52,108, 
  /* [24][0][][] */ 10,-10,34,35,10,-92,1,-58,16,127,-111,75,-26,-70,70,-72, 
  /* [25][0][][] */ 127,-67,95,102,50,11,-4,20,-106,83,47,-51,-1,33,38,-6, 
  /* [26][0][][] */ -20,24,11,46,-53,121,-14,39,-60,-36,-81,36,5,32,45,-127, 
  /* [27][0][][] */ 36,-5,-9,-45,-44,-4,-84,15,-96,-24,-79,-48,-78,40,-12,127, 
  /* [28][0][][] */ -86,26,21,-11,27,-16,-127,18,-3,-43,-8,-20,8,-50,-73,-19, 
  /* [29][0][][] */ -31,-109,-28,85,-31,10,127,8,66,54,-107,51,30,-24,-58,74, 
  /* [30][0][][] */ 41,-61,-56,26,-127,-2,28,-32,-13,12,14,-17,-33,34,5,51, 
  /* [31][0][][] */ -127,-13,14,89,-22,-2,-67,9,-4,-45,1,-26,-41,-60,-16,83, 
  /* [32][0][][] */ -127,-64,-85,-15,-79,-46,9,-14,108,57,-50,-56,45,48,30,-16, 
  /* [33][0][][] */ -3,9,-99,48,-127,-98,56,-18,-104,15,-73,-65,-29,90,68,54, 
  /* [34][0][][] */ 47,75,43,56,-66,-51,43,-2,2,-127,-33,25,-25,4,53,109, 
  /* [35][0][][] */ 23,-29,-77,-20,-127,14,95,-27,22,42,9,-8,30,84,28,82, 
  /* [36][0][][] */ -14,-20,-60,67,127,-14,36,70,-89,20,-101,-99,14,-23,11,20, 
  /* [37][0][][] */ -117,53,9,-70,45,-95,-35,-38,-5,-20,-23,47,57,-61,4,-127, 
  /* [38][0][][] */ 48,127,43,-66,-109,-66,-119,-59,-52,-72,31,35,-62,-108,70,-22, 
  /* [39][0][][] */ 14,-47,15,80,26,64,78,-51,-29,60,15,-22,-11,127,45,106, 
  /* [40][0][][] */ 118,51,103,95,-60,-73,7,13,-76,67,-29,-22,-54,-45,127,-36, 
  /* [41][0][][] */ -18,-15,8,63,-95,100,-3,70,-67,28,-112,13,22,46,61,-127, 
  /* [42][0][][] */ -2,-102,25,-25,127,17,67,21,-32,-91,-71,-9,-17,6,3,43, 
  /* [43][0][][] */ -50,-91,-33,9,127,-1,-25,112,-51,-63,-116,-58,124,5,-38,54, 
  /* [44][0][][] */ -62,-47,-39,-94,8,69,45,32,-31,-127,-59,68,-36,31,55,102, 
  /* [45][0][][] */ -10,-54,-61,-3,-127,51,-15,-24,49,-59,34,-42,-3,7,-18,40, 
  /* [46][0][][] */ 25,-70,-13,19,79,-100,-19,93,-25,-25,33,58,-57,-33,48,-127, 
  /* [47][0][][] */ -89,-46,-6,90,-10,4,26,31,-9,127,72,102,-37,74,-3,104, 
  /* [48][0][][] */ 48,-17,-77,-73,33,-61,2,50,47,-73,8,32,-52,6,-39,-127, 
  /* [49][0][][] */ 46,35,15,22,5,-6,58,37,-28,127,-36,38,-31,-19,70,83, 
  /* [50][0][][] */ -8,-2,12,4,-127,-11,-10,-41,46,18,29,44,-24,-58,15,-1, 
  /* [51][0][][] */ -4,5,-5,-127,-28,72,28,-30,16,6,28,-33,40,59,-27,14, 
  /* [52][0][][] */ 23,-14,6,-83,104,-119,-22,-39,58,6,127,-69,32,2,-38,99, 
  /* [53][0][][] */ -30,-59,55,-20,-48,-127,19,-83,-3,77,-79,75,-32,-24,40,-81, 
  /* [54][0][][] */ 104,71,46,-15,-127,-44,-103,-122,23,8,38,75,-99,-69,52,3, 
  /* [55][0][][] */ 24,5,-21,66,-15,22,37,-15,20,127,13,64,1,10,-5,32, 
  /* [56][0][][] */ 16,-119,-99,56,-68,56,4,77,127,24,87,78,-29,1,69,106, 
  /* [57][0][][] */ 26,32,78,-46,56,-22,-29,14,36,-8,50,127,33,-24,78,-48, 
  /* [58][0][][] */ 60,-48,12,-90,19,31,4,127,54,88,1,92,57,27,89,4, 
  /* [59][0][][] */ -50,18,28,-44,-4,-86,5,2,0,14,-119,-107,-127,-53,57,-24, 
  /* [60][0][][] */ 39,-30,35,26,-1,-39,3,-33,13,127,-6,57,-16,-17,-24,-40, 
  /* [61][0][][] */ 44,68,21,-12,-74,-127,-20,-18,-55,-30,-14,14,-55,-33,110,109, 
  /* [62][0][][] */ -24,84,-35,50,-54,127,-63,19,-61,19,-51,22,-53,32,56,-104, 
  /* [63][0][][] */ 35,-32,-71,-127,-5,-41,93,-15,-6,-109,-32,31,-20,69,46,-44, 
  /* [64][0][][] */ -41,7,29,-17,44,-90,6,97,-127,-19,-91,-42,-66,54,73,58, 
  /* [65][0][][] */ -50,5,-14,-6,49,8,-49,-67,-127,-31,14,-2,-104,106,-37,28, 
  /* [66][0][][] */ -22,59,-12,33,-52,127,-29,22,-64,16,-36,35,-41,38,50,-85, 
  /* [67][0][][] */ -2,-47,-34,-15,-6,-95,58,-64,-23,10,18,127,-47,-1,-2,-127, 
  /* [68][0][][] */ 7,-127,-31,77,-24,4,31,94,39,18,43,10,-61,34,-2,4, 
  /* [69][0][][] */ 23,106,103,-111,42,12,-52,85,59,100,57,118,94,-120,54,-127, 
  /* [70][0][][] */ 47,26,36,-24,85,7,-91,-40,-127,-97,0,32,-29,60,-107,-5, 
  /* [71][0][][] */ -23,-65,35,-57,85,-15,11,25,-58,97,-127,-24,-3,71,-17,32, 
  /* [72][0][][] */ 28,18,93,22,-83,-57,-127,-74,-14,71,-30,60,35,117,-117,-7, 
  /* [73][0][][] */ -9,-42,-17,-41,44,-127,24,-48,61,107,113,-21,14,-23,-81,120, 
  /* [74][0][][] */ -8,-1,-43,105,-97,-3,105,50,67,80,48,127,126,44,-78,22, 
  /* [75][0][][] */ -24,41,-34,34,-53,127,-18,19,-45,39,-29,39,-23,46,26,-67, 
  /* [76][0][][] */ -60,100,-55,40,-103,1,-15,22,57,45,-33,-30,37,-52,-127,40, 
  /* [77][0][][] */ 110,123,-127,99,84,78,87,63,46,19,121,-17,82,56,90,36, 
  /* [78][0][][] */ 2,-38,-2,-70,57,-116,26,-43,49,44,127,-29,3,-27,-43,119, 
  /* [79][0][][] */ -39,60,8,22,2,-53,-34,-5,-127,-1,45,10,103,45,-64,-37, 
  /* [80][0][][] */ -98,14,76,11,81,57,9,-127,-81,50,-74,-46,2,-67,11,66, 
  /* [81][0][][] */ 92,78,-37,-15,27,-22,89,104,-115,127,-56,-32,-50,25,102,121, 
  /* [82][0][][] */ 49,82,-24,-60,12,-45,108,-92,40,25,-68,74,127,1,55,-61, 
  /* [83][0][][] */ -10,-39,25,19,-3,17,-41,-80,45,-24,110,19,31,-67,-47,-127, 
  /* [84][0][][] */ -127,-85,-46,-31,-19,96,97,5,78,72,111,102,57,88,-75,8, 
  /* [85][0][][] */ 92,3,97,-115,106,8,-10,98,20,127,-90,2,-50,79,111,21, 
  /* [86][0][][] */ -93,70,-43,-1,35,90,13,25,104,42,127,-24,-27,66,2,-19, 
  /* [87][0][][] */ 15,-62,23,-40,48,-127,30,-31,49,-14,67,-36,38,-38,-42,69, 
  /* [88][0][][] */ -67,51,35,-9,99,-25,35,23,-57,-63,108,-46,69,127,106,-116, 
  /* [89][0][][] */ -18,33,-14,35,-27,127,-23,29,-40,13,-51,18,-13,51,30,-93, 
  /* [90][0][][] */ 63,-93,24,20,127,0,51,41,-1,-101,-122,-15,-10,-31,-39,23, 
  /* [91][0][][] */ -23,89,-23,-44,12,-77,-89,41,-63,22,-93,-127,-93,-65,-20,18, 
  /* [92][0][][] */ 61,39,67,37,-127,-93,12,11,-18,34,-24,-34,-23,-77,27,-15, 
  /* [93][0][][] */ 7,-127,-97,68,-41,-63,-31,93,93,83,5,71,-61,46,-9,-53, 
  /* [94][0][][] */ 110,9,127,-20,27,-28,18,34,35,81,-1,62,19,15,115,-14, 
  /* [95][0][][] */ -97,-35,-19,-11,127,-6,24,92,-69,-18,-101,-83,10,7,-70,42, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0040786550380289555, 0.0021990190725773573, 0.0056403884664177895, 0.0047775502316653728, 0.0029310900717973709, 0.0013084020465612411, 0.003796715522184968, 0.0022214215714484453, 0.0015425932360813022, 0.0026885506231337786, 0.0010550491278991103, 0.0018913981039077044, 0.0032693878747522831, 0.0066402619704604149, 0.0026511987671256065, 0.0025967909023165703, 0.0044859061017632484, 0.0028391124214977026, 0.0037628414575010538, 0.001338137430138886, 0.0041064727120101452, 0.0014554968802258372, 0.0031661137472838163, 0.0030893234070390463, 0.0014737200690433383, 0.0032432840671390295, 0.0035628899931907654, 0.0043262732215225697, 0.0023010231088846922, 0.0031757564283907413, 0.003250116715207696, 0.0028465006034821272, 0.0043153930455446243, 0.0015573009150102735, 0.0023667528294026852, 0.0021817963570356369, 0.0028303614817559719, 0.003170692129060626, 0.0022358850110322237, 0.0035857320763170719, 0.00084011745639145374, 0.0032894681207835674, 0.0032693836838006973, 0.0024810887407511473, 0.0023669358342885971, 0.0018872602377086878, 0.0017039859667420387, 0.0018458241829648614, 0.0047891382128000259, 0.0051314863376319408, 0.0042996029369533062, 0.0025902297347784042, 0.0030635260045528412, 0.0024058970157057047, 0.0017382353544235229, 0.006441914476454258, 0.0022681588307023048, 0.0011926461011171341, 0.0032886280678212643, 0.0030711658764630556, 0.0032440586946904659, 0.0016799150034785271, 0.0030142602045089006, 0.0037709558382630348, 0.001524308230727911, 0.0017674554837867618, 0.0038376545999199152, 0.0031971626449376345, 0.0019593541510403156, 0.0016998052597045898, 0.0045514600351452827, 0.0027471850626170635, 0.0026497072540223598, 0.0022595399059355259, 0.0028629519511014223, 0.0037752571515738964, 0.0036009405739605427, 0.0013945128303021193, 0.0026377239264547825, 0.0020204407628625631, 0.0025123914238065481, 0.0031721540726721287, 0.0019962540827691555, 0.0010216070804744959, 0.0026205852627754211, 0.0015442705480381846, 0.0020334278233349323, 0.0042035314254462719, 0.0040270648896694183, 0.0042930212803184986, 0.0029956023208796978, 0.0018401746638119221, 0.0029498653020709753, 0.0022571622394025326, 0.0020368450786918402, 0.0020608559716492891, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -7233, 12500, -17562, 2341, 10072, -15242, -43008, -9087, -8295, 8038, -15005, -13967, 7457, -11345, -2267, -1379, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00018417695537209511, 0.00016308552585542202, 0.00012433275696821511, 0.00013947657134849578, 9.8826094472315162e-05, 0.00014566184836439788, 9.4241222541313618e-05, 0.00016347788914572448, 9.5297466032207012e-05, 8.9824061433319002e-05, 0.00016714881348889321, 0.0001523167738923803, 0.00012206242536194623, 9.4069946499075741e-05, 0.00013028002285864204, 0.00013060102355666459, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 27,39,20,-37,71,79,-34,59,-16,113,12,49,-33,37,-10,50,34,90,46,-74,-63,78,-9,52,66,49,43,56,-41,-52,-1,95,-23,8,-71,53,52,-127,-37,15,19,-29,63,-1,2,-48,-57,-14, 
  /* [1][0][][] */ -48,3,-79,-44,8,95,-57,17,-16,-36,-46,31,60,-20,-28,-24,-35,-37,-6,17,-66,48,-111,-48,-49,-43,49,69,-30,-29,46,-45,16,-63,-32,59,18,-65,127,-40,-21,33,-48,-12,33,52,27,16, 
  /* [2][0][][] */ 4,4,56,-42,-17,-84,14,24,99,75,-67,13,110,-43,127,77,-76,-24,-39,36,81,-85,-36,-107,6,-42,34,-68,43,51,-37,11,27,-33,57,45,-72,11,-1,-40,28,34,56,-26,17,-92,105,-56, 
  /* [3][0][][] */ 37,-6,-26,-25,29,113,20,-14,43,-41,23,-18,-53,9,8,44,-41,-73,42,-125,-8,-2,-25,-8,-46,95,127,64,-14,-40,26,43,54,-29,99,31,-41,-63,2,42,24,9,-19,-2,31,19,-9,-29, 
  /* [4][0][][] */ 104,-3,8,-61,100,91,49,10,77,-28,-106,31,54,-23,26,-16,-95,-115,-18,-101,-28,22,-30,-33,-84,126,-96,127,-55,-62,31,86,46,-42,17,-27,-13,17,-22,37,-46,-8,2,63,-53,110,-18,-53, 
  /* [5][0][][] */ -2,-6,-62,6,-20,56,16,-26,64,61,39,92,54,-23,32,-7,-41,127,-16,41,10,-3,-70,-16,33,1,-71,-39,-18,37,22,-23,-47,5,42,13,-46,11,-91,2,91,-24,26,54,-17,1,-37,32, 
  /* [6][0][][] */ 56,7,13,70,6,-30,108,-55,11,70,127,112,47,47,-54,60,54,-40,-75,89,47,-62,-32,71,-85,97,90,-7,117,43,-35,-1,92,-47,-114,-11,102,35,4,15,12,57,60,-29,65,120,36,-8, 
  /* [7][0][][] */ -90,-5,-23,26,-52,-53,21,42,77,107,-55,-72,-97,17,-17,-21,-78,96,1,117,-46,43,22,36,-21,-88,-38,-75,16,43,-1,-1,-19,13,13,-12,5,-51,127,16,10,48,21,-11,50,61,-25,-3, 
  /* [8][0][][] */ -14,-101,51,-65,61,-58,78,-42,-21,-117,32,17,-30,4,29,26,1,13,-38,104,6,38,-20,28,64,-2,-69,-36,-118,-23,-58,-114,3,-59,1,81,-8,44,119,21,15,-3,79,127,-4,-69,-43,82, 
  /* [9][0][][] */ 24,-36,25,-52,42,82,-39,44,16,-34,-30,-18,21,-48,114,-14,13,-118,33,40,-70,38,55,-36,-26,-85,-25,83,43,80,-33,-26,-55,33,-8,127,-23,-45,-60,-27,-29,-1,26,109,55,89,-70,12, 
  /* [10][0][][] */ -12,22,-23,-5,22,22,-71,-43,50,40,64,-12,-37,-8,47,-54,-61,127,-5,53,1,-11,21,30,-44,40,5,94,37,5,-36,-9,70,7,-6,26,-11,-47,-36,19,-86,-6,21,-17,16,45,27,35, 
  /* [11][0][][] */ -30,52,-20,43,32,59,1,10,17,18,-127,-75,66,22,-7,-48,-6,28,-45,-55,-3,-8,108,6,49,10,-12,37,-16,27,-5,56,33,6,-49,8,39,78,104,18,36,-25,63,6,-52,-13,85,-1, 
  /* [12][0][][] */ -61,-1,28,20,-53,-57,5,6,-36,-29,-127,21,74,-95,19,32,44,95,88,-115,-27,39,-45,-85,-7,-20,27,-26,7,21,-22,74,58,74,33,-37,-55,-27,35,-9,-32,18,61,1,39,-17,-39,-43, 
  /* [13][0][][] */ -63,-107,-48,-95,13,28,52,17,-123,35,118,-66,58,39,122,4,127,17,-6,-92,77,-83,125,4,-82,4,-21,15,-46,-99,-117,10,45,-24,-72,61,33,-62,82,-72,-7,47,72,44,53,-36,110,-69, 
  /* [14][0][][] */ 74,21,-56,3,-48,19,-89,-26,-31,61,53,46,-9,-65,16,-44,51,-123,16,6,89,-57,23,-3,-6,123,-85,1,-62,-28,-95,4,127,39,92,-13,-75,8,-31,62,-9,-43,103,-22,-60,-47,-56,57, 
  /* [15][0][][] */ -63,11,44,21,105,-1,2,32,12,80,-20,56,56,-19,-39,-17,6,34,-2,-33,26,-36,-59,-56,56,-69,-44,66,-40,12,19,3,-60,-5,127,-3,-86,17,62,-13,-47,-18,13,-9,-42,-40,-15,10, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0078275203704833984, 0.0069311349652707577, 0.0052841422148048878, 0.0059277541004121304, 0.00420010881498456, 0.0061906282790005207, 0.0040052519179880619, 0.0069478102959692478, 0.0040501421317458153, 0.0038175226654857397, 0.0071038245223462582, 0.0064734630286693573, 0.0051876530051231384, 0.0039979727007448673, 0.0055369008332490921, 0.0055505433119833469, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 13325, -1896, 19472, -124, 18303, -1512, 46081, 577, 9819, 32562, 6235, 27933, 2864, 12775, 32970, 24978, 277, -547, 3483, 55038, 490, 21411, -252, 15877, 17668, 31982, -3777, -600, -3849, 13019, 20225, 21, -356, -1099, 1590, 14930, 9108, 30556, 2018, 22840, 28137, -55, 932, 16490, -1413, 4905, 39496, 29552, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.7479143985547125e-05, 0.0001176593650598079, 6.0545800806721672e-05, 0.00011341591743985191, 9.6856419986579567e-05, 8.6486652435269207e-05, 4.2886382288997993e-05, 0.00021580472821369767, 8.4662366134580225e-05, 6.5982858359348029e-05, 5.2255687478464097e-05, 8.8332191808149219e-05, 5.2737523219548166e-05, 9.2081332695670426e-05, 4.866198287345469e-05, 8.0385820183437318e-05, 8.7310407252516598e-05, 7.1159200160764158e-05, 0.00014430659939534962, 3.8793783460278064e-05, 5.8558736782288179e-05, 5.8790148614207283e-05, 0.00014175828255247325, 8.7765365606173873e-05, 5.4679931054124609e-05, 7.6021773566026241e-05, 7.2905764682218432e-05, 4.0757047827355564e-05, 0.00026337197050452232, 0.00012455145770218223, 7.8344928624574095e-05, 0.0002170543884858489, 0.00011273810378042981, 0.00017095108341891319, 7.7825614425819367e-05, 6.7687004047911614e-05, 9.1387613792903721e-05, 6.4387473685201257e-05, 9.94219517451711e-05, 7.67481978982687e-05, 5.1807255658786744e-05, 0.00013298139674589038, 0.00024206966918427497, 7.4481147748883814e-05, 0.00015770060417708009, 4.487586920731701e-05, 4.6741668484173715e-05, 5.1556075050029904e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -104,61,-127,97,-96,66,-57,93,-94,-60,84,-44,84,-49,-38,-48,73,78,95,-101,117,-127,61,-96,-107,-36,92,119,-89,-64,-83,65,95,-91,71,-127,-84,-126,88,-78,-12,-105,112,-127,102,62,-87,-72, -120,96,-74,116,-68,126,-42,104,-105,-88,117,-68,118,-96,-69,-88,93,111,127,-123,109,-126,80,-127,-127,-78,92,113,38,-79,-83,89,110,-127,92,-127,-86,-127,104,-94,-79,115,127,-102,-34,103,-88,-103, -53,42,-9,20,-36,56,-25,40,-75,-33,52,-31,61,-33,-15,-37,28,54,66,-50,38,-61,33,-53,-105,-36,39,31,106,-48,-52,49,39,-79,52,-24,-12,-29,33,-58,-127,-27,26,-18,-57,64,-8,-83, 
  /* [0][1][][] */ -84,92,-70,104,-71,127,-127,127,-118,-97,85,-88,91,-96,-82,-103,91,99,-61,-125,113,-114,86,-80,-106,-92,104,94,-127,-73,-103,120,112,39,95,-116,-111,-109,100,-121,-87,-127,101,-117,127,75,-102,-124, -127,127,-86,127,-127,125,-121,114,-127,-127,127,-127,127,-127,-127,-127,127,127,-76,-127,127,-127,127,-106,-104,-127,127,127,13,-127,-127,127,127,45,127,-123,-127,-118,127,-127,-95,124,90,-107,-52,127,-127,-127, -72,93,-77,28,-67,32,-77,68,-66,-32,70,-73,64,-33,-40,-27,71,48,-51,-37,59,-75,45,-75,-120,-43,46,48,113,-80,-59,101,54,15,52,-40,-33,-45,39,-98,-67,-54,23,-42,-74,81,-13,-100, 
  /* [0][2][][] */ -51,47,-7,58,-49,51,-91,51,-53,-34,29,-64,36,-75,-33,-41,53,35,-65,-27,46,-35,37,-28,-42,-46,52,-2,-60,-39,-41,50,28,59,46,-54,-40,-73,13,-49,-112,-81,54,-105,83,43,-76,-64, -59,88,-79,75,-81,33,-121,70,-68,-54,42,-93,65,-87,-68,-52,63,45,-88,-29,52,-53,50,-44,-56,-70,61,42,8,-88,-58,54,46,71,65,-66,-44,-60,29,-60,-63,89,45,-119,-25,74,-58,-75, -29,45,-82,10,-56,11,-66,22,-13,-2,19,-52,50,-40,-26,-2,50,11,-64,3,28,-15,16,-20,-65,-21,28,33,72,-20,-28,41,6,48,35,-12,-2,-3,14,-38,-25,-2,27,-50,-45,59,0,-64, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0037178636994212866, 0.0050005228258669376, 0.0025731965433806181, 0.004820176400244236, 0.0041163978166878223, 0.0036756827030330896, 0.0018226712709292769, 0.0091717010363936424, 0.0035981505643576384, 0.0028042714111506939, 0.0022208667360246181, 0.0037541182246059179, 0.0022413446567952633, 0.0039134565740823746, 0.0020681342575699091, 0.00341639737598598, 0.0037106922827661037, 0.003024265868589282, 0.0061330306343734264, 0.0016487357206642628, 0.0024887463077902794, 0.0024985813070088625, 0.0060247271321713924, 0.003730027936398983, 0.0023238970898091793, 0.0032309251837432384, 0.0030984948389232159, 0.0017321744235232472, 0.011193308047950268, 0.0052934368140995502, 0.0033296593464910984, 0.0092248115688562393, 0.0047913691960275173, 0.0072654210962355137, 0.0033075883984565735, 0.0028766975738108158, 0.0038839734625071287, 0.0027364676352590322, 0.0042254328727722168, 0.0032617982942610979, 0.0022018083836883307, 0.0056517091579735279, 0.01028796099126339, 0.0031654487829655409, 0.0067022754810750484, 0.0019072244176641107, 0.0019865208305418491, 0.0021911330986768007, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1468, -1007, 680, -2076, 3959, -843, 3551, -3002, 1111, 513, 1678, 5129, 283, -293, 703, 4632, -1636, 2905, 4219, 583, -606, 2242, -1046, 3533, 1883, 1732, 1073, -821, 8855, -423, 1880, -1842, -563, 3939, -798, 1954, 1415, 827, 363, 3744, 2011, 6551, -3591, 1244, 5783, 198, 1656, 2125, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00026221762527711689, 0.00030658370815217495, 0.00032679500873200595, 0.00023088780289981514, 0.00020419796055648476, 0.00021410419140011072, 0.00021048482449259609, 0.00017295907309744507, 0.00026430987054482102, 0.00032682548044249415, 0.0002184216573368758, 0.00015797041123732924, 0.000410542415920645, 0.00037994183367118239, 0.00025944015942513943, 0.00017948850290849805, 0.0002452442713547498, 0.00026297837030142546, 0.00020571955246850848, 0.000377063755877316, 0.00037041542236693203, 0.00027402411797083914, 0.00017801897774916142, 0.00022632145555689931, 0.00024187081726267934, 0.00023600472195539623, 0.00031291041523218155, 0.0002897434460464865, 0.00010903511429205537, 0.00027565393247641623, 0.000220727757550776, 0.00019818423606920987, 0.00021839814144186676, 0.0001994575432036072, 0.00028599673532880843, 0.0002759042545221746, 0.00029970350442454219, 0.00029804056975990534, 0.0002429316082270816, 0.00021443293371703476, 0.00028749421471729875, 0.00012480017903726548, 0.00014324575022328645, 0.00031414686236530542, 0.00013874650176148862, 0.00027344666887074709, 0.00031725061126053333, 0.00028084428049623966, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 67,29,127,-37,64,96,-78,-54, 
  /* [1][0][][] */ 7,-87,-127,9,53,21,42,3, 
  /* [2][0][][] */ -127,-11,-37,-31,58,27,-66,-34, 
  /* [3][0][][] */ 28,64,127,-66,-3,-92,-11,-10, 
  /* [4][0][][] */ -127,23,-54,-34,50,13,-49,-56, 
  /* [5][0][][] */ -111,31,-52,-18,9,28,-79,-127, 
  /* [6][0][][] */ -42,-127,-113,43,86,10,16,42, 
  /* [7][0][][] */ -68,-127,-92,-78,-71,-67,31,89, 
  /* [8][0][][] */ 81,29,-5,-8,95,-82,-127,3, 
  /* [9][0][][] */ -32,50,-49,89,-69,-42,127,-36, 
  /* [10][0][][] */ -23,117,34,62,127,-28,-13,53, 
  /* [11][0][][] */ -83,-38,-20,-8,-88,103,127,-5, 
  /* [12][0][][] */ 68,27,-127,27,-11,-31,-57,-12, 
  /* [13][0][][] */ 61,-37,-76,11,13,-127,-30,-17, 
  /* [14][0][][] */ 4,-71,84,7,127,-106,-60,18, 
  /* [15][0][][] */ -48,-47,-6,127,62,72,-64,24, 
  /* [16][0][][] */ 119,44,-41,19,76,-122,-127,-17, 
  /* [17][0][][] */ 60,127,63,75,51,66,23,-85, 
  /* [18][0][][] */ 35,-21,-5,10,127,6,33,-13, 
  /* [19][0][][] */ 11,127,29,11,-109,20,21,-27, 
  /* [20][0][][] */ -34,10,72,-127,30,29,-15,104, 
  /* [21][0][][] */ -36,61,31,-127,25,47,-13,113, 
  /* [22][0][][] */ -77,-81,-96,14,-116,127,118,-21, 
  /* [23][0][][] */ 85,41,-127,24,20,-46,-71,-6, 
  /* [24][0][][] */ -54,31,4,-8,-18,79,-127,97, 
  /* [25][0][][] */ -103,-59,-127,14,-59,-76,68,99, 
  /* [26][0][][] */ 42,-11,-30,-38,101,-17,127,-39, 
  /* [27][0][][] */ 127,-72,29,90,4,29,-13,95, 
  /* [28][0][][] */ 43,64,58,-13,127,-45,46,-25, 
  /* [29][0][][] */ -12,-12,-29,-39,-72,20,127,-36, 
  /* [30][0][][] */ 38,-127,-39,-61,-101,8,4,-48, 
  /* [31][0][][] */ 5,39,-6,-10,-127,9,-34,-5, 
  /* [32][0][][] */ 34,-65,-55,65,-12,-75,118,-127, 
  /* [33][0][][] */ 45,127,54,31,46,-28,-17,-23, 
  /* [34][0][][] */ -125,-34,127,-6,-19,91,100,16, 
  /* [35][0][][] */ -29,67,127,-11,-67,-61,-38,28, 
  /* [36][0][][] */ -101,7,106,-20,-17,127,73,27, 
  /* [37][0][][] */ -21,-71,-5,-127,-35,-79,66,42, 
  /* [38][0][][] */ 52,-25,92,-64,55,64,-127,5, 
  /* [39][0][][] */ -10,81,-127,-49,-18,-9,5,80, 
  /* [40][0][][] */ 59,-51,17,27,11,0,8,127, 
  /* [41][0][][] */ -35,88,127,8,18,86,-70,39, 
  /* [42][0][][] */ 57,-125,-127,-19,-120,15,15,-87, 
  /* [43][0][][] */ -5,-85,39,-68,127,-57,17,39, 
  /* [44][0][][] */ 5,119,127,27,5,46,-70,10, 
  /* [45][0][][] */ -30,45,10,83,-113,53,-127,23, 
  /* [46][0][][] */ -39,-29,57,53,-127,-120,-36,-6, 
  /* [47][0][][] */ -22,54,45,-110,-127,43,-13,64, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0027931425720453262, 0.0032657298725098372, 0.0034810206852853298, 0.0024594170972704887, 0.0021751169115304947, 0.0022806380875408649, 0.0022420845925807953, 0.0018423602450639009, 0.002815428888425231, 0.0034813452512025833, 0.0023266277275979519, 0.0016827009385451674, 0.0043730982579290867, 0.0040471409447491169, 0.0027635570149868727, 0.0019119117641821504, 0.0026123423594981432, 0.0028012457769364119, 0.0021913249511271715, 0.0040164836682379246, 0.0039456654340028763, 0.002918905345723033, 0.0018962583271786571, 0.0024107764475047588, 0.0025764082092791796, 0.002513922518119216, 0.0033331222366541624, 0.0030863475985825062, 0.0011614421382546425, 0.0029362661298364401, 0.0023511922918260098, 0.0021110586822032928, 0.0023263772018253803, 0.0021246219985187054, 0.0030464376322925091, 0.0029389322735369205, 0.0031924420036375523, 0.0031747284810990095, 0.0025877077132463455, 0.0022841398604214191, 0.003062388626858592, 0.0013293717056512833, 0.0015258538769558072, 0.0033462927676737309, 0.0014779279008507729, 0.0029127541929483414, 0.0033793537877500057, 0.0029915536288172007, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -1643, -913, 21731, -4602, 6212, -14048, 2334, -12649, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.6642281278036535e-05, 0.0001102820533560589, 0.00014840185758657753, 0.00011292307317489758, 0.00013575257617048919, 0.00013175290951039642, 7.7013872214592993e-05, 7.3699775384739041e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -42,-42,-11,-74,1,-2,87,93,-92,-83,-36,10,-45,-1,-58,43,-76,16,12,127,60,-20,19,96,77,85,32,14,-87,-47,-77,-52,-48,103,36,-45,28,-26,94,1,23,1,6,-89,42,-30,-29,-75, 
  /* [1][0][][] */ -15,45,-15,-38,-76,60,-9,-34,-35,69,-15,26,64,50,-48,1,-17,-122,81,-48,127,17,-62,33,58,5,-77,63,47,-10,74,31,-33,-13,5,-10,8,104,-15,-22,67,42,-1,17,102,12,-32,63, 
  /* [2][0][][] */ -24,-38,127,1,82,-44,-8,39,-33,-4,-13,53,18,-36,-49,-121,-55,-102,-24,14,-101,25,-37,-25,-51,22,3,-50,-37,12,-24,-10,-3,-2,30,-5,25,-30,-48,11,36,-35,30,-45,-37,-46,-64,-47, 
  /* [3][0][][] */ 52,13,59,1,19,-36,36,79,-47,-31,43,-41,-79,68,-17,55,61,36,-41,28,-104,-63,127,-1,8,2,-57,-23,-57,71,119,-68,6,-114,-22,49,-21,-82,-17,79,-76,-61,68,0,-106,-67,64,-9, 
  /* [4][0][][] */ 17,-19,67,-35,8,-17,-4,-3,-56,-7,-20,0,41,-73,34,-92,39,42,-12,-37,12,34,15,10,-5,2,55,-15,24,19,-127,-15,-26,-20,1,15,41,0,33,-1,-30,-16,-69,24,-20,-99,0,14, 
  /* [5][0][][] */ 30,-54,56,35,28,5,24,-4,-77,-11,-45,29,25,8,15,-51,92,71,-10,-19,88,-65,127,-95,-23,46,2,44,8,15,-33,-53,-17,-48,-45,12,47,20,68,10,-77,34,28,23,46,-8,85,-9, 
  /* [6][0][][] */ -48,51,-127,82,64,26,38,24,-19,-2,63,-69,-99,-21,-26,27,-126,32,-23,95,15,58,-93,-95,-10,-12,21,85,-41,-28,-47,9,39,80,-44,-21,-14,3,85,6,86,62,-121,-60,-34,118,-54,-44, 
  /* [7][0][][] */ 42,81,-95,26,14,62,122,63,41,73,-114,-10,-51,0,-73,-56,33,37,124,107,88,-6,127,25,108,97,-63,94,-83,27,-4,-84,23,-78,-28,16,-12,99,-64,84,-62,48,-12,-96,85,-19,61,-40, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0041072969324886799, 0.0046869870275259018, 0.0063070789910852909, 0.0047992304898798466, 0.0057694842107594013, 0.0055994987487792969, 0.003273089649155736, 0.0031322403810918331, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -636, 12234, -208, -969, 485, -1093, 2710, -2420, -4064, 202, -6354, 43, 329, -573, -3820, 4686, 8969, 4349, -425, -5300, -8326, -80, 18115, -3651, -2042, -1026, 6268, -4730, 375, 850, -7465, 11196, 5749, 677, 5338, 470, -13, -24, 10113, -385, 7215, -2051, 2856, 6333, -2027, 8882, -1948, 145, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00030988629441708326, 0.0001521174272056669, 0.00085978349670767784, 0.00025419070152565837, 0.00026828469708561897, 0.00034061376936733723, 0.0002146441547665745, 0.00033779517980292439, 8.3276041550561786e-05, 0.00027553483960218728, 0.00022100999194663018, 0.0016791200032457709, 0.00048326913383789361, 0.00095194968162104487, 0.00033288821578025818, 0.00059201120166108012, 0.0001462564105167985, 5.4402109526563436e-05, 0.00028660535463131964, 0.0002804290852509439, 0.00025059387553483248, 0.00027431425405666232, 8.58571074786596e-05, 0.00048570454237051308, 0.00020186368783470243, 0.0004428958345670253, 0.00058694375911727548, 0.00023808472906239331, 0.00025185718550346792, 0.00044913656893186271, 0.00014515886141452938, 0.00010743160237325355, 0.00014510077016893774, 0.00026407802943140268, 0.00012986469664610922, 0.0003883989411406219, 0.0035413564182817936, 0.00032802621717564762, 0.00012888771016150713, 0.00020374033192638308, 0.00018561856995802373, 0.00014755652227904648, 0.00034285458968952298, 0.00018276990158483386, 0.00030275364406406879, 8.9585999376140535e-05, 6.80843077134341e-05, 0.00021579909662250429, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 18,-50,8,11,-16,-99,-48,43,-29,-8,3,7,43,-3,-6,2,95,21,37,5,6,-23,-75,16,-4,-15,-11,-36,-64,74,-13,-116,38,-17,-78,-60,-10,-37,10,-5,-29,45,13,6,-5,74,127,-32, -127,-96,-25,127,-66,66,-100,127,29,8,21,-10,54,16,2,-45,-36,65,30,13,5,127,3,127,125,-31,-48,25,68,-127,-8,-77,52,-9,-57,-127,24,6,-59,-41,-127,-5,-88,-127,39,57,42,115, -11,-9,9,17,-24,24,43,51,8,-42,0,5,-17,-1,0,2,-66,52,-70,-16,-3,-42,127,16,-64,6,16,5,13,36,16,6,-13,-18,-46,65,4,-7,23,78,21,-22,28,-41,-2,40,-21,-16, 
  /* [0][1][][] */ -5,-30,-28,1,32,-102,127,-85,-2,9,23,36,127,18,8,-35,-14,-34,34,43,73,-65,37,8,-68,127,-86,-25,127,-97,36,-127,-50,-3,-89,13,13,-67,-45,3,112,127,14,-110,-57,-53,6,89, 93,-127,127,1,127,64,-72,-54,47,127,127,-127,-95,127,127,127,127,127,119,127,127,123,-2,8,127,-99,-127,96,33,126,127,6,-127,127,127,118,-127,127,-127,-127,44,32,-127,-39,127,-127,-19,88, 20,32,-40,-1,-48,127,-120,99,106,-77,12,62,-36,13,17,-66,10,21,-127,21,27,-125,-36,-7,89,-10,-13,127,-83,-35,26,-55,-31,11,89,-28,38,-9,0,-82,104,-1,28,30,-52,79,95,-89, 
  /* [0][2][][] */ 3,13,4,-27,2,-63,-24,-7,2,2,7,1,-23,-6,8,0,-37,15,10,-26,2,-18,80,-14,-112,5,31,-24,16,-6,2,21,-15,-14,-74,31,4,-17,13,40,-37,-3,18,9,-16,29,1,14, 40,-33,-38,-34,30,31,115,-85,127,-31,-11,3,-79,-13,-10,-69,-8,104,14,31,12,40,-23,-36,-91,61,75,-19,-100,5,-32,-26,-27,-9,-35,5,57,-27,-4,117,-115,-7,-6,44,37,52,17,-127, -9,17,2,-16,-14,5,-11,-30,-29,-23,-14,2,16,-7,1,15,44,49,-15,-9,2,-22,-43,-19,35,-20,26,-17,-21,-2,-12,-3,26,-23,-29,-46,-5,4,31,27,-21,-18,4,-1,-12,6,65,-50, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013170167803764343, 0.006464990321546793, 0.036540798842906952, 0.010803104378283024, 0.011402099393308163, 0.01447608508169651, 0.0091223763301968575, 0.014356294646859169, 0.0035392316058278084, 0.011710230261087418, 0.0093929246068000793, 0.071362599730491638, 0.020538937300443649, 0.040457859635353088, 0.014147749170660973, 0.025160474702715874, 0.0062158973887562752, 0.0023120895493775606, 0.012180727906525135, 0.011918236501514912, 0.010650239884853363, 0.011658355593681335, 0.0036489269696176052, 0.020642442628741264, 0.0085792066529393196, 0.01882307231426239, 0.024945108219981194, 0.010118600912392139, 0.010703929699957371, 0.019088303670287132, 0.0061692516319453716, 0.0045658429153263569, 0.006166782695800066, 0.011223316192626953, 0.0055192494764924049, 0.016506955027580261, 0.15050764381885529, 0.013941113837063313, 0.0054777278564870358, 0.0086589641869068146, 0.0078887892886996269, 0.0062711522914469242, 0.014571319334208965, 0.0077677206136286259, 0.012867029756307602, 0.0038074047770351171, 0.0028935831505805254, 0.0091714616864919662, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2355, 3669, 15014, 1029, 2537, -1405, 4329, 13317, 3085, -802, 2982, -1853, 16986, -1869, 2083, 17967, -396, 1801, 41, 2571, 3573, 4081, 587, 25309, 5627, 3401, 18356, 1424, 6001, 5916, 592, 1213, 913, 1526, -177, 252, -2826, -500, 1931, 1939, 4070, 2542, 3679, 4284, 4969, 3702, 2071, 6076, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00025394043768756092, 0.00021752339671365917, 6.5992062445729971e-05, 0.00023133699141908437, 0.00020331998530309647, 0.00025700038531795144, 0.00017200599540956318, 7.3681410867720842e-05, 0.00019566109403967857, 0.00025016898871399462, 0.00026779141626320779, 0.0002338826161576435, 5.7497047237120569e-05, 0.00024826914886943996, 0.00022664466814603657, 5.7875611673807725e-05, 0.00032065447885543108, 0.00021088708308525383, 0.00034175312612205744, 0.0002319792693015188, 0.00021657627075910568, 0.00020117251551710069, 0.0003596594906412065, 4.2157549614785239e-05, 0.00014725142682436854, 0.00015852123033255339, 5.888861051062122e-05, 0.00029148388421162963, 0.00012807289022020996, 0.00013347297499421984, 0.0004819787573069334, 0.00038404986844398081, 0.00025571821606718004, 0.0002506155869923532, 0.0003156737657263875, 0.00032137605012394488, 0.00021019186533521861, 0.00031966209644451737, 0.00027483524172566831, 0.00026194861857220531, 0.00019617514044512063, 0.00021479580027516931, 0.00022355777036864311, 0.0001803021295927465, 0.00013917050091549754, 0.00020115527149755508, 0.00034893472911790013, 0.00013420163304544985, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 72,127,-82,-69,8,86,23,62, 
  /* [1][0][][] */ 50,-78,42,-127,-49,73,-78,-44, 
  /* [2][0][][] */ -43,127,119,46,121,1,58,15, 
  /* [3][0][][] */ 109,29,-87,56,-7,-91,-127,-32, 
  /* [4][0][][] */ -52,48,9,-75,-54,127,126,54, 
  /* [5][0][][] */ 10,67,-127,-71,31,85,25,-25, 
  /* [6][0][][] */ -11,127,65,52,82,15,21,-106, 
  /* [7][0][][] */ 127,-18,-25,36,31,12,105,32, 
  /* [8][0][][] */ 50,127,46,84,92,67,89,-75, 
  /* [9][0][][] */ 50,127,-126,-86,6,106,10,83, 
  /* [10][0][][] */ -80,-45,19,-57,-15,-24,-48,127, 
  /* [11][0][][] */ 18,-102,-127,-9,15,-11,34,-12, 
  /* [12][0][][] */ -29,-105,-114,-5,-127,30,-75,31, 
  /* [13][0][][] */ -12,10,-104,99,-127,-24,-3,-14, 
  /* [14][0][][] */ -67,-55,-127,-11,43,-9,-10,-58, 
  /* [15][0][][] */ 29,-118,-127,-8,-100,-15,-22,-22, 
  /* [16][0][][] */ 127,-69,-14,71,-80,16,22,105, 
  /* [17][0][][] */ -31,124,127,-21,-59,-11,-25,-22, 
  /* [18][0][][] */ 11,-127,39,66,-6,-66,42,-84, 
  /* [19][0][][] */ 127,-42,-65,37,-95,7,43,101, 
  /* [20][0][][] */ -25,-127,74,71,-15,-87,-3,-67, 
  /* [21][0][][] */ -3,-46,-11,-35,127,-3,52,12, 
  /* [22][0][][] */ -127,27,-75,50,55,47,-99,-101, 
  /* [23][0][][] */ -102,-52,69,0,-116,127,127,-61, 
  /* [24][0][][] */ -25,53,-6,-43,-43,127,107,-4, 
  /* [25][0][][] */ -44,-107,-127,-48,-67,-29,-18,-52, 
  /* [26][0][][] */ -9,68,-6,127,-84,38,-59,-1, 
  /* [27][0][][] */ 16,-127,34,81,17,-59,1,-119, 
  /* [28][0][][] */ 28,127,74,59,109,-20,15,-46, 
  /* [29][0][][] */ 99,10,-60,-21,78,-127,-103,32, 
  /* [30][0][][] */ 27,-11,29,-127,19,-29,16,-19, 
  /* [31][0][][] */ 44,-41,5,64,-14,27,11,127, 
  /* [32][0][][] */ -70,-51,19,-43,-61,127,42,76, 
  /* [33][0][][] */ -41,49,48,-37,34,127,-106,67, 
  /* [34][0][][] */ 31,127,-79,-47,17,43,-63,69, 
  /* [35][0][][] */ 15,-127,35,57,-22,-51,42,-82, 
  /* [36][0][][] */ -12,-37,-80,-10,-127,-62,-12,11, 
  /* [37][0][][] */ -50,-127,76,86,-34,-91,-12,-32, 
  /* [38][0][][] */ -70,26,68,-66,-127,-88,-58,82, 
  /* [39][0][][] */ 56,-127,78,61,-20,-90,-20,-88, 
  /* [40][0][][] */ -2,50,18,45,-127,-16,-45,28, 
  /* [41][0][][] */ 113,127,-88,-115,62,15,-10,21, 
  /* [42][0][][] */ -7,-39,-11,14,127,9,46,18, 
  /* [43][0][][] */ 127,28,79,26,-75,-26,68,101, 
  /* [44][0][][] */ 73,48,-24,11,91,-122,-127,36, 
  /* [45][0][][] */ 47,19,16,24,69,-127,-14,-44, 
  /* [46][0][][] */ 53,-36,-12,127,37,50,12,77, 
  /* [47][0][][] */ -77,-93,59,72,-37,25,127,-77, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0034833340905606747, 0.0029837966430932283, 0.00090522173559293151, 0.0031732795760035515, 0.0027889667544513941, 0.003525307634845376, 0.0023594286758452654, 0.0010106974514201283, 0.0026839086785912514, 0.0034316005185246468, 0.0036733297165483236, 0.0032081983517855406, 0.0007886944804340601, 0.0034055402502417564, 0.0031089144758880138, 0.00079388730227947235, 0.0043984591029584408, 0.002892765449360013, 0.0046878722496330738, 0.0031820898875594139, 0.0029708049260079861, 0.0027595094870775938, 0.004933496005833149, 0.0005782805965282023, 0.0020198670681566, 0.0021744563709944487, 0.00080778275150805712, 0.0039983224123716354, 0.0017567925387993455, 0.0018308660946786404, 0.0066113653592765331, 0.0052680619992315769, 0.0035077198408544064, 0.0034377267584204674, 0.0043301382102072239, 0.0044083571992814541, 0.0028832291718572378, 0.0043848464265465736, 0.0037699507083743811, 0.0035931833554059267, 0.0026909599546343088, 0.0029463819228112698, 0.0030665709637105465, 0.0024732276797294617, 0.0019090197747573256, 0.0027592729311436415, 0.004786382894963026, 0.0018408612813800573, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7622, 14643, -4613, 6294, -449, 3831, -10553, -18351, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00021380743419285864, 0.00011313105642329901, 0.000143149693030864, 0.0001467652473365888, 0.00019990213331766427, 0.00014755589654669166, 0.00021512880630325526, 0.00012981404142919928, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -48,-2,34,12,-35,-13,10,6,-45,-7,-68,-56,-24,-65,-11,-34,48,-40,43,43,-16,29,-39,16,1,-40,56,-16,-2,-14,16,10,89,36,40,-127,15,-2,-16,-32,7,-17,45,49,37,5,29,5, 
  /* [1][0][][] */ 1,46,70,-25,-10,51,-49,-30,1,27,-15,-90,14,96,-25,63,-14,16,-23,-55,4,-81,-32,25,-76,-10,-3,-117,-34,-15,34,-59,48,76,-46,6,127,-31,2,51,-30,46,-82,-31,120,-20,-31,-22, 
  /* [2][0][][] */ -3,-16,-61,17,-2,52,22,6,-12,42,0,30,64,-91,16,-58,38,-95,22,37,-32,52,-15,32,-20,59,-26,-70,13,3,20,-71,-47,-93,40,-30,101,20,-11,-60,3,33,79,24,127,16,22,25, 
  /* [3][0][][] */ -12,31,-69,48,17,-36,-66,-100,15,-22,-37,-2,5,25,36,78,-8,16,-37,25,7,-96,30,-63,-71,-11,127,-14,-43,6,-61,16,2,-78,12,-10,-22,-36,-22,98,-43,-33,1,20,38,1,-40,45, 
  /* [4][0][][] */ -24,-55,-10,11,34,-29,-12,-9,30,-31,59,-78,4,29,8,11,-19,-26,13,-14,-6,-51,3,-18,14,-9,40,50,35,20,-13,29,-16,-6,-1,-2,-74,92,41,-25,31,-19,-21,-24,-80,14,127,10, 
  /* [5][0][][] */ 44,-13,0,17,25,-44,34,-127,30,-30,-8,117,-81,68,22,-65,-2,-91,19,6,-40,68,-38,-54,-58,73,-27,2,-17,50,-38,-35,26,51,30,-3,-43,-9,-45,-43,14,-43,-49,-9,-36,53,89,19, 
  /* [6][0][][] */ 56,-25,22,-13,-36,-16,-36,13,-42,10,-43,127,-46,-36,-5,54,8,46,15,33,31,-81,-25,20,22,36,-66,8,5,-44,11,37,4,17,-18,-4,11,2,-4,0,-12,-18,35,55,-3,-38,71,-14, 
  /* [7][0][][] */ -27,6,-4,63,27,35,4,30,20,4,71,-7,125,107,65,48,46,49,-15,0,25,-23,-85,-27,15,-1,-26,61,31,-26,-31,-13,42,9,41,-92,-76,37,38,55,-30,31,86,127,-59,-31,-107,61, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0090868156403303146, 0.0048080696724355221, 0.0060838619247078896, 0.0062375231646001339, 0.0084958402439951897, 0.0062711252830922604, 0.009142974391579628, 0.0055170967243611813, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 13207, 5725, 3822, -14, 1899, 155, -184, 37043, -1601, 3487, 7845, 55465, 1802, 4528, 224, 11579, -289, 13421, 899, 6902, 9490, 619, 3709, -8751, 9690, 1086, 4140, 12676, 1694, -3295, -10497, 9970, 6013, 1821, -198, 6973, -9307, 13526, 357, 16181, -486, -283, 5807, 3120, 1877, -1527, 3424, -1147, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.6733667810913175e-05, 0.00012506433995440602, 0.00018638436449691653, 0.00018532075046095997, 0.00065395486308261752, 0.0001726409827824682, 0.00020519839017651975, 8.7458633061032742e-05, 0.00013686603051610291, 9.6604788268450648e-05, 6.8963076046202332e-05, 5.1214025006629527e-05, 8.2622093032114208e-05, 6.2802180764265358e-05, 0.00024442019639536738, 0.00018700381042435765, 0.00012532134132925421, 0.00036974676186218858, 0.00013043340004514903, 0.00014586302859243006, 0.00012536415306385607, 0.00042754641617648304, 0.00013116943591739982, 0.00021662433573510498, 0.00012154939031461254, 8.0549194535706192e-05, 5.2800634875893593e-05, 8.6172600276768208e-05, 0.00017459951050113887, 0.00080886238720268011, 0.00023149633489083499, 7.3843570135068148e-05, 0.00010905761155299842, 0.00014941810513846576, 0.00018731897580437362, 5.8407666074344888e-05, 7.7656768553424627e-05, 4.356134741101414e-05, 0.00013095777831040323, 7.033238944131881e-05, 0.00013302068691700697, 0.00015619191981386393, 7.1997972554527223e-05, 8.1904341641347855e-05, 7.2251801611855626e-05, 0.00039040876436047256, 5.8411260397406295e-05, 0.00020178042177576572, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -87,-106,-22,-28,127,-70,61,-57,-91,-77,-21,-37,122,43,82,-127,68,-31,8,-38,-55,117,9,32,-5,95,66,-52,71,-61,38,-57,-127,-82,47,54,25,75,117,-74,-126,-20,42,77,52,-127,93,83, -79,-115,-76,58,-93,110,53,-69,-68,40,71,-102,127,88,112,-74,-87,-81,36,-70,-63,115,-46,115,-87,111,84,-113,91,-41,-2,-127,-57,-82,78,127,126,113,127,-66,-127,-59,58,88,94,115,98,81, -18,-49,-55,100,-46,-30,27,-21,94,18,49,-58,11,52,-40,-3,-88,-8,28,-44,-26,7,-76,-22,-81,58,19,-91,23,60,126,-69,9,4,-11,47,78,60,34,-2,-32,95,58,30,53,41,14,-111, 
  /* [0][1][][] */ -116,-116,-12,-84,-88,-86,112,-117,-127,-127,79,-82,108,61,-127,-83,127,-127,-59,-75,-104,115,-38,29,-1,104,107,-48,-114,-70,17,-72,-91,-127,-127,59,32,87,8,-90,52,-22,75,118,90,112,127,-127, -127,-127,-127,-107,-37,127,127,-127,102,54,127,-127,125,127,68,-114,44,-92,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-25,-117,-114,-108,48,114,127,127,-12,-127,93,-94,127,127,127,1,124,119, -41,-51,-119,127,79,-45,47,-45,79,20,22,-66,17,64,78,-49,-29,7,-20,-75,-43,-14,-93,-42,-117,54,32,-96,-58,44,127,-80,-48,7,59,71,86,73,-40,-26,35,127,86,7,56,-44,19,31, 
  /* [0][2][][] */ -93,-44,35,16,-48,-40,23,-64,29,-44,20,-10,10,29,-54,-33,-89,-31,96,-31,-1,52,-78,-3,5,69,72,-17,35,58,3,-21,-11,-77,-43,28,8,15,-72,-32,22,-15,33,45,24,52,31,-60, -86,-49,-30,-77,87,39,60,-56,109,9,-33,-35,-8,38,-125,-94,35,2,45,-65,-20,47,-57,55,-56,67,77,-35,38,10,-41,-44,-71,-28,-66,54,27,21,-122,-56,28,-46,65,77,30,-110,33,9, -13,-38,-44,-24,-22,-6,23,-43,-61,8,-14,-1,-10,10,25,-38,33,39,-4,-52,-13,4,-16,-53,-57,6,29,-27,2,-54,54,-21,-86,14,18,46,30,17,-73,-30,-1,52,29,25,14,1,11,46, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0032611808273941278, 0.0053152344189584255, 0.0079213352873921394, 0.007876131683588028, 0.027793081477284431, 0.0073372414335608482, 0.0087209315970540047, 0.0037169917486608028, 0.0058168061077594757, 0.0041057034395635128, 0.002930930582806468, 0.0021765960846096277, 0.0035114388447254896, 0.002669092733412981, 0.010387858375906944, 0.0079476619139313698, 0.0053261569701135159, 0.015714237466454506, 0.0055434191599488258, 0.0061991787515580654, 0.0053279763087630272, 0.018170721828937531, 0.0055747008882462978, 0.0092065343633294106, 0.0051658488810062408, 0.0034233408514410257, 0.0022440268658101559, 0.0036623354535549879, 0.0074204793199896812, 0.034376651048660278, 0.0098385941237211227, 0.0031383517198264599, 0.0046349484473466873, 0.0063502690754830837, 0.0079610561951994896, 0.0024823257699608803, 0.0033004125580191612, 0.001851357170380652, 0.0055657052434980869, 0.0029891263693571091, 0.0056533790193498135, 0.0066381562501192093, 0.0030599138699471951, 0.0034809345379471779, 0.0030707016121596098, 0.016592372208833694, 0.0024824785068631172, 0.0085756676271557808, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1160, -368, -349, 1107, 12386, 2125, -483, 4503, 1342, 1207, 122, 2670, 981, 530, -692, 442, 3057, 11198, 2957, -737, 852, -1251, 31, 1927, -263, -571, 1481, -32, 3252, 17406, 2027, -58, 500, -84, 2567, -6, 349, -268, 1099, 1178, 1445, 1952, 185, -272, 573, 2285, 1301, -174, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.000447573431301862, 0.0003992403217125684, 0.00032374239526689053, 0.00033962490851990879, 8.039123349590227e-05, 0.00032617538818158209, 0.00050708220805972815, 0.00020553803187794983, 0.00033362003159709275, 0.00058402208378538489, 0.00038651516661047935, 0.00032384652877226472, 0.00024839676916599274, 0.00038673175731673837, 0.00033999563311226666, 0.00031126287649385631, 0.00023259184672497213, 8.4876322944182903e-05, 0.0002487834426574409, 0.00036833580816164613, 0.0004683310107793659, 0.00019071597489528358, 0.00050064816605299711, 0.00038342349580489099, 0.00053723360178992152, 0.00084956915816292167, 0.00034888306981883943, 0.00098650786094367504, 0.00025167452986352146, 5.7628960348665714e-05, 0.00037084840005263686, 0.00086576590547338128, 0.00044632091885432601, 0.00044665316818282008, 0.00028385638142935932, 0.00038765839417465031, 0.00051607663044705987, 0.00063567917095497251, 0.00043409134377725422, 0.00049587507965043187, 0.00034741012495942414, 0.00034166217665188015, 0.00036263137008063495, 0.00053440895862877369, 0.00044779293239116669, 0.00022524353698827326, 0.00027004571165889502, 0.00036132292007096112, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -44,25,1,-17,-84,-37,-127,37, 
  /* [1][0][][] */ 82,-74,-43,-62,127,-98,101,8, 
  /* [2][0][][] */ -92,121,-44,-127,54,-22,-34,38, 
  /* [3][0][][] */ 47,38,106,0,105,119,127,-12, 
  /* [4][0][][] */ -91,-127,67,7,-73,-116,5,-41, 
  /* [5][0][][] */ 127,-26,78,61,-73,-3,7,-28, 
  /* [6][0][][] */ 30,34,127,-28,47,-35,-47,31, 
  /* [7][0][][] */ 28,10,-127,-28,-42,101,97,-74, 
  /* [8][0][][] */ 2,127,-25,-4,76,110,48,55, 
  /* [9][0][][] */ 0,127,-54,86,21,-120,37,114, 
  /* [10][0][][] */ -7,-120,-5,-30,-77,-127,-60,-77, 
  /* [11][0][][] */ -127,-78,103,48,-7,-64,94,66, 
  /* [12][0][][] */ -30,50,-127,77,38,-56,-78,99, 
  /* [13][0][][] */ 93,-127,100,83,12,32,41,-61, 
  /* [14][0][][] */ -35,82,-27,-127,-31,-113,-28,-66, 
  /* [15][0][][] */ 41,107,35,-22,38,-66,95,-127, 
  /* [16][0][][] */ -111,-127,-67,82,-52,25,-8,76, 
  /* [17][0][][] */ -25,-98,-127,84,-53,74,-51,72, 
  /* [18][0][][] */ -89,-81,-46,83,-3,61,-5,127, 
  /* [19][0][][] */ 61,-123,99,-127,15,-69,30,-34, 
  /* [20][0][][] */ -2,73,31,21,38,127,75,-12, 
  /* [21][0][][] */ 29,114,43,-34,38,-69,91,-127, 
  /* [22][0][][] */ 27,17,115,14,-2,127,34,-44, 
  /* [23][0][][] */ -92,-75,32,-66,84,105,-51,-127, 
  /* [24][0][][] */ -99,-90,36,-85,100,105,-53,-127, 
  /* [25][0][][] */ 127,15,-56,-21,18,30,-62,-14, 
  /* [26][0][][] */ -127,-27,-119,-23,-46,-32,17,1, 
  /* [27][0][][] */ 79,34,-5,-64,-127,-24,83,92, 
  /* [28][0][][] */ -127,-83,11,58,-80,-107,13,-8, 
  /* [29][0][][] */ 127,84,33,-115,41,16,-52,-91, 
  /* [30][0][][] */ -81,-70,37,-65,73,92,-47,-127, 
  /* [31][0][][] */ 47,41,-8,127,4,-66,5,9, 
  /* [32][0][][] */ -28,127,-4,26,26,61,-12,38, 
  /* [33][0][][] */ -38,127,-71,22,25,-30,-19,3, 
  /* [34][0][][] */ -127,-107,-34,95,-22,4,0,103, 
  /* [35][0][][] */ -51,127,-33,1,67,110,60,74, 
  /* [36][0][][] */ 65,18,4,-39,-127,-30,86,98, 
  /* [37][0][][] */ -72,122,31,18,-127,114,-27,-102, 
  /* [38][0][][] */ 31,41,31,12,127,67,97,51, 
  /* [39][0][][] */ -23,-75,33,-19,9,41,-98,127, 
  /* [40][0][][] */ -75,-53,-70,127,-39,-8,7,58, 
  /* [41][0][][] */ 127,8,63,105,-61,-10,-1,-19, 
  /* [42][0][][] */ -45,10,-73,-127,55,-106,9,84, 
  /* [43][0][][] */ 23,-4,81,-8,38,127,86,8, 
  /* [44][0][][] */ -29,-33,-69,127,42,10,-46,-37, 
  /* [45][0][][] */ 87,112,105,-86,50,-52,34,-127, 
  /* [46][0][][] */ -30,-127,-42,32,-9,43,-67,117, 
  /* [47][0][][] */ 46,41,127,12,82,125,110,-13, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0042844545096158981, 0.0038217795081436634, 0.0030990659724920988, 0.0032511032186448574, 0.00076955545227974653, 0.0031223560217767954, 0.0048541100695729256, 0.0019675393123179674, 0.0031936208251863718, 0.0055906269699335098, 0.0036999662406742573, 0.003100062720477581, 0.0023778101895004511, 0.0037020398303866386, 0.0032546520233154297, 0.0029796040616929531, 0.0022265154402703047, 0.00081248959759250283, 0.0023815114982426167, 0.0035259420983493328, 0.0044831591658294201, 0.0018256533658131957, 0.0047925193794071674, 0.0036703709047287703, 0.0051427381113171577, 0.0081326104700565338, 0.00333972810767591, 0.0094434740021824837, 0.0024091869127005339, 0.00055166066158562899, 0.0035499942023307085, 0.0082876561209559441, 0.0042724646627902985, 0.0042756451293826103, 0.0027172518894076347, 0.0037109099794179201, 0.0049402103759348392, 0.0060851210728287697, 0.0041553955525159836, 0.0047468282282352448, 0.003325628349557519, 0.0032706053461879492, 0.0034713356290012598, 0.0051156985573470592, 0.0042865555733442307, 0.0021561728790402412, 0.0025850473903119564, 0.0034588102716952562, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7534, -2824, 11660, -9733, 21522, 7838, -9021, 10897, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00018692215962801129, 0.00022828334476798773, 0.0001748853683238849, 0.00024229721748270094, 0.00020217998826410621, 0.00018683703092392534, 0.00016695501108188182, 0.00027191531262360513, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -9,-17,-22,-69,-28,-40,22,-16,34,6,-32,-10,106,127,-22,-103, 
  /* [1][0][][] */ 127,-62,-46,16,-49,72,-67,-46,-40,85,-36,-57,-9,4,-62,-21, 
  /* [2][0][][] */ -40,-96,44,42,46,-58,-74,-23,33,-93,25,-127,46,-22,-75,20, 
  /* [3][0][][] */ 36,11,18,18,-7,73,-54,-19,127,46,12,21,3,-14,13,26, 
  /* [4][0][][] */ -93,-38,-28,-127,-17,32,53,-120,38,-24,-50,-37,-113,30,-39,-27, 
  /* [5][0][][] */ 85,47,61,-32,35,-48,-127,-115,-17,-74,62,45,-54,47,60,-45, 
  /* [6][0][][] */ 103,38,-127,-72,31,-68,6,-89,-41,23,-121,92,90,-88,7,72, 
  /* [7][0][][] */ -127,-4,101,-31,-63,5,-1,-58,-54,63,85,-32,60,-27,30,28, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0079441918060183525, 0.0097020417451858521, 0.0074326279573142529, 0.010297631844878197, 0.0085926493629813194, 0.0079405736178159714, 0.0070955879054963589, 0.011556399986147881, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 18050, -696, 342, 2489, -850, 308, 10455, 1288, -970, 226, -2102, 2805, -758, -665, -222, -818, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00012548961967695504, 0.00021961300808470696, 0.00018066386110149324, 0.0001871040731202811, 0.0012318332446739078, 0.00097252166597172618, 0.00015291504678316414, 0.0009280208614654839, 0.00040617850027047098, 0.001288949977606535, 0.00028040009783580899, 0.00020754824799951166, 0.00011025569983758032, 0.00024426018353551626, 0.00021883260342292488, 0.00075773894786834717, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 2,-2,6,4,-19,11,7,16,-10,-11,-3,-8,-7,-7,5,-2, 6,-4,2,3,13,-2,13,-26,-11,9,-8,94,-7,20,2,-2, 3,1,-4,1,2,-14,-3,10,3,2,-5,-4,4,-5,-3,-3, 
  /* [0][1][][] */ 12,-11,-1,7,127,-24,-127,-21,127,127,-5,-7,101,-23,-4,-20, -127,127,127,2,-87,-91,-15,-102,17,-105,127,127,127,127,127,127, 23,-4,-4,2,-10,127,3,-11,0,-12,-11,-4,15,-3,-15,-10, 
  /* [0][2][][] */ 2,-4,-3,-15,-18,15,49,7,-14,-8,0,1,-9,1,-4,-13, 21,-15,-9,-127,7,-16,-11,127,-8,1,5,-16,-7,-56,-10,-39, 5,-3,-6,-1,1,-5,-3,-3,-1,2,0,-4,8,-5,-9,-14, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0053333085961639881, 0.0093335527926683426, 0.0076782139949500561, 0.0079519227147102356, 0.052352912724018097, 0.041332170367240906, 0.0064988890662789345, 0.039440885186195374, 0.017262585461139679, 0.054780371487140656, 0.011917003430426121, 0.0088208001106977463, 0.0046858671121299267, 0.010381057858467102, 0.0093003856018185616, 0.032203905284404755, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1035, -22, 37, 616, 58060, 43762, 3090, 6041, 5604, 6197, 1021, -147, 4780, -4298, -49, 42211, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00021977801225148141, 0.0012471156660467386, 0.00025830569211393595, 0.00017426139675080776, 2.5172761525027454e-05, 3.5255721741123125e-05, 0.00016693529323674738, 2.5351087970193475e-05, 0.00015444964810740203, 4.0291557525051758e-05, 0.00055102974874898791, 0.0010214499197900295, 0.00037699093809351325, 1.4482637197943404e-05, 0.00096073746681213379, 3.1982061045709997e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -30, 
  /* [0][1][][] */ 67, -36, 17, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 105, -95, -10, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -1, -13, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 121, 126, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 24, -58, 4, 
  /* [4][1][][] */ 27, -127, 8, 
  /* [4][2][][] */ 22, -78, -9, 
  /* [5][0][][] */ -59, 31, 0, 
  /* [5][1][][] */ -127, 36, 6, 
  /* [5][2][][] */ -71, 34, 4, 
  /* [6][0][][] */ -16, 79, 127, 
  /* [6][1][][] */ -50, 56, -15, 
  /* [6][2][][] */ -36, -51, -88, 
  /* [7][0][][] */ 36, 30, -10, 
  /* [7][1][][] */ 127, 73, -4, 
  /* [7][2][][] */ 31, 4, -23, 
  /* [8][0][][] */ -21, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -23, 45, -18, 
  /* [9][1][][] */ -13, 127, -18, 
  /* [9][2][][] */ -5, 76, -16, 
  /* [10][0][][] */ 24, 87, 12, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 40, 17, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 77, 20, -12, 
  /* [13][1][][] */ 127, 108, -3, 
  /* [13][2][][] */ 85, 120, 48, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -97, -30, 18, 
  /* [15][1][][] */ -127, -124, 17, 
  /* [15][2][][] */ -23, -81, -11, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.056043390184640884, 0.3180144727230072, 0.065867945551872253, 0.044436652213335037, 0.0064190537668764591, 0.0089902086183428764, 0.042568497359752655, 0.0064645269885659218, 0.039384659379720688, 0.010274346917867661, 0.14051257073879242, 0.2604697048664093, 0.096132680773735046, 0.0036930723581463099, 0.24498803913593292, 0.0081554250791668892, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10446450859308243, } };
const TfArray<1, int> quant46_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.072901546955108643, } };
const TfArray<1, int> quant50_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.064344480633735657, } };
const TfArray<1, int> quant53_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.093879073858261108, } };
const TfArray<1, int> quant54_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.057005647569894791, } };
const TfArray<1, int> quant58_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.053237877786159515, } };
const TfArray<1, int> quant61_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.075646266341209412, } };
const TfArray<1, int> quant62_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.038473363965749741, } };
const TfArray<1, int> quant65_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.076303757727146149, } };
const TfArray<1, int> quant66_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.037992861121892929, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.12829859554767609, } };
const TfArray<1, int> quant69_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_22_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_22_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_22_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_22_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_22_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
