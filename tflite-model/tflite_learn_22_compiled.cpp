/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 09.01.2024 10:57:15

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242560;
#else
constexpr int kTensorArenaSize = 241536;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 21228, -24173, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.0002468181774020195, 0.00021013412333559245, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 16,-42,-56,73,16,-8,-28,38,78,-2,-14,-46,-38,33,-27,39,64,-34,-9,-42,120,74,35,-69,-75,-77,1,127,7,-34,64,64, 
  /* [1][0][][] */ 49,61,62,-51,-82,61,-6,10,-30,-17,27,94,94,35,31,-3,-32,-1,-53,-72,-73,25,28,88,75,63,-41,-46,78,-85,-127,-19, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0052155647426843643, 0.004440386313945055, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -15, -7, -17, -319, 1047, 27, -436, 170, -143, 282, -30, -156, 14, 83, 8, -45, 16, -829, -191, -349, 410, 212, 102, -69, 5, -123, 23, 2720, -643, -73, 2187, 747, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.6620130888186395e-05, 5.1328381232451648e-05, 5.1316401368239895e-05, 4.4374224671628326e-05, 5.1738272304646671e-05, 3.999925684183836e-05, 4.2680239857872948e-05, 4.5025604777038097e-05, 4.4828844693256542e-05, 4.9934787966776639e-05, 4.3310792534612119e-05, 5.3234427468851209e-05, 4.6093879063846543e-05, 4.4803677155869082e-05, 4.5810043957317248e-05, 4.4120948587078601e-05, 4.8690442781662568e-05, 4.7825709771132097e-05, 4.0457169234286994e-05, 4.1570743633201346e-05, 4.3169126001885161e-05, 3.9990114601096138e-05, 4.8340694775106385e-05, 4.8997182602761313e-05, 5.1419690862530842e-05, 4.46128542535007e-05, 4.4551386963576078e-05, 6.6886248532682657e-05, 4.3914969864999875e-05, 4.2043313442263752e-05, 6.2945138779468834e-05, 5.0371221732348204e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -35,-57,98,12,95,-4,-78,-79,53,-94,-97,22,60,-2,-25,44,-56,-32,-61,-48,-66,-92,2,106,-127,4,82,-44,104,7,-12,-73,77,-56,-82,64,-98,-75,-78,43,53,-96,-93,101,54,-122,91,-20,7,-70,-23,62,-64,-49,-85,105,13,73,101,-101,-67,88,-69,49,-1,18,73,85,57,97,73,-103,97,-85,44,72,-98,14,-57,27,51,15,87,-42,-67,-52,-89,102,15,84,-22,-94,6,60,26,8, 
  /* [1][0][][] */ -51,20,-56,4,-26,72,32,24,77,-87,-84,117,65,-32,32,53,91,-35,36,105,-36,1,30,31,18,10,-20,87,14,15,89,-55,50,87,-2,30,51,55,-1,-37,-73,-8,-21,-74,-23,14,-31,-41,-23,-89,105,25,15,70,-61,-33,11,95,48,63,-43,110,-65,-62,-41,30,74,34,97,37,17,13,-89,91,-34,36,68,-34,-33,61,-65,64,-36,-127,11,94,-66,-45,60,54,70,30,65,77,25,-11, 
  /* [2][0][][] */ 35,23,-48,85,-12,-44,74,96,-73,70,-27,127,86,-22,80,-95,-48,-24,34,51,-77,-6,93,26,-33,62,101,5,-53,77,73,79,-59,-18,-72,-84,-65,83,99,-5,-119,-79,10,3,-64,81,-26,-60,80,14,84,-98,-33,52,23,24,-70,91,-55,-2,-9,63,-39,63,84,40,50,72,-70,71,10,-56,35,-49,34,20,-46,-16,6,8,34,-86,-1,-64,-12,-87,-24,-16,68,80,-30,14,-42,-69,-37,-64, 
  /* [3][0][][] */ 65,-1,33,-29,-73,41,-113,35,46,14,59,0,84,89,64,2,94,92,-62,8,107,-89,-66,-111,-24,-115,-88,102,38,-103,78,2,-59,-40,-20,-23,-97,-29,34,43,-25,-89,-94,-4,63,26,-48,-88,65,-85,34,-3,88,21,81,-103,-117,-119,-113,-58,-99,28,-42,67,47,-38,-65,-35,-39,-73,-3,94,15,-108,49,-52,28,89,91,-63,-93,-127,32,95,28,39,-42,-118,-82,40,-5,-110,90,-92,-93,34, 
  /* [4][0][][] */ 70,111,14,62,-13,-14,39,12,53,111,22,23,33,0,-1,-18,5,22,-24,18,106,-60,89,25,11,37,46,-30,-24,28,-36,-18,77,120,32,-73,-39,15,-85,24,12,-24,-15,-80,29,127,52,66,37,12,-26,-19,-62,45,-43,24,62,-77,82,38,7,-71,3,-46,-39,66,8,-8,33,-79,-55,-39,-30,20,94,88,57,1,17,-47,26,-12,-33,72,25,69,126,0,-60,-30,68,46,61,95,-47,9, 
  /* [5][0][][] */ 98,-107,86,95,50,-119,29,79,125,-127,1,-40,35,94,51,37,64,63,-71,111,38,61,18,-21,-125,-74,-2,-102,57,44,24,-108,-42,1,-69,26,-116,-34,62,43,-122,-73,41,112,-29,5,29,-51,-120,91,38,3,49,18,43,-15,99,65,-62,-52,40,-58,30,-72,-25,108,-17,29,90,16,113,-70,-45,99,-23,-82,8,-48,14,88,117,35,37,80,-104,83,-17,51,65,-123,115,106,-27,27,80,-96, 
  /* [6][0][][] */ 11,-46,106,70,-91,-68,-8,60,-18,-89,1,-95,80,48,108,-124,36,-1,-7,96,-84,-125,104,52,-69,-88,-15,-64,-34,-120,41,-82,-98,-127,-52,-111,-15,34,-115,75,84,51,18,-21,-120,100,-94,-51,-85,12,-32,-66,53,-58,89,-34,7,-13,-72,111,-101,-6,61,-78,-57,60,95,-54,73,-11,-112,-11,50,-74,-97,-48,-89,-106,-62,-35,27,-35,39,-30,-77,-93,-45,-100,78,89,89,10,-57,-68,71,-34, 
  /* [7][0][][] */ 105,65,-36,-42,-66,109,-17,4,127,-1,-87,15,54,-88,48,70,40,15,5,112,56,32,-7,76,-66,96,45,51,-75,106,-17,31,24,23,64,103,-98,89,-5,-24,76,-79,80,70,52,-8,85,-102,44,-63,-94,-79,-22,93,21,26,104,-83,-3,-58,9,-3,77,-105,-60,-58,72,22,-102,16,64,85,79,35,63,56,-61,49,-98,43,90,-38,-21,-84,77,45,-113,90,77,-1,77,64,-66,-40,0,-59, 
  /* [8][0][][] */ 15,40,-53,-94,50,16,-74,-36,3,44,39,74,-8,-31,-92,-74,-64,93,-63,10,22,-15,74,92,-100,94,32,65,-66,8,-91,109,93,-34,41,-11,102,1,-29,54,99,108,-114,-127,-23,-16,-20,97,22,-72,-71,26,-69,-6,-32,-110,66,93,-91,101,99,27,45,99,-40,-51,-30,91,-91,38,32,-8,64,59,-2,24,-53,99,70,63,25,79,-115,-35,42,44,85,-54,34,-38,-76,82,-69,-88,-42,71, 
  /* [9][0][][] */ 12,39,105,41,84,-90,-35,-98,29,48,7,45,-17,-63,-84,-7,15,35,-89,-59,6,81,-99,-64,107,-1,-18,37,-13,-56,-76,100,64,15,22,-11,-56,18,-32,-47,56,-52,54,-71,65,61,-85,42,127,5,-72,-23,68,-44,-62,88,80,-52,28,38,-78,95,78,-69,-73,25,91,57,-39,81,94,-73,11,75,-86,-74,-43,-98,-29,91,35,32,87,67,-41,-28,38,-1,96,49,-21,108,106,0,47,-23, 
  /* [10][0][][] */ -62,70,96,-58,-8,111,107,52,50,30,27,-27,113,71,-18,7,-33,77,-91,-55,-13,36,54,-57,16,49,-95,-120,-41,93,-85,-81,85,99,125,81,-34,11,-19,62,-61,97,-116,-29,-88,-76,-10,-56,-11,-16,48,-21,69,20,-56,-22,-115,1,22,-53,3,97,98,47,127,-74,-83,-23,35,0,-90,-61,94,81,-74,102,-21,70,67,20,79,-5,66,66,-115,62,88,-12,27,-12,-15,-57,-55,-42,-43,-73, 
  /* [11][0][][] */ 87,-11,-8,90,103,43,42,53,108,73,-57,127,8,-76,34,-68,-50,-93,58,35,29,67,12,-82,-105,-82,9,49,71,12,32,-17,-73,-59,47,43,-47,66,-4,-19,-41,67,-69,10,-29,-79,-77,-61,45,65,102,12,-67,-73,20,30,-66,-30,-28,-84,-67,88,45,14,35,73,-35,21,82,62,-60,-53,43,102,-72,34,-59,27,-41,69,-85,-25,-44,-62,28,-69,7,-6,-90,-46,-1,-71,-74,-22,-58,-41, 
  /* [12][0][][] */ 9,56,-46,8,89,12,-32,51,-57,53,-10,44,-31,1,58,-74,-93,-31,-38,-69,30,-3,16,99,-74,-50,109,-94,93,25,-26,107,-81,-65,-37,22,5,-64,-4,58,85,22,-103,-28,-12,-94,-43,115,-45,-127,-60,71,42,2,-71,89,-34,-42,47,56,61,120,-13,57,113,32,-31,108,63,109,42,73,85,123,-7,-8,-33,38,-106,-87,-50,89,52,-18,-48,28,42,119,-95,-118,76,50,88,-14,29,62, 
  /* [13][0][][] */ 101,-65,102,98,96,113,79,78,82,-102,15,-4,95,62,74,-47,-119,-70,-60,34,69,-21,112,-42,-75,35,20,16,-79,-74,85,34,39,99,-15,45,-73,-21,36,81,-82,62,-54,20,-35,8,-10,-20,25,82,-21,-127,-88,33,103,-72,-56,37,-26,-79,-20,124,-81,19,-42,-61,-77,84,-27,-3,95,4,-82,53,-64,-42,-102,67,78,-58,54,-98,98,-6,-87,-95,80,121,-15,-66,-79,59,101,-49,67,-7, 
  /* [14][0][][] */ -51,-106,90,76,82,-24,-14,-79,-65,-35,71,118,-9,-83,-67,-82,-52,-63,23,32,-34,45,0,71,-122,-71,-8,27,-96,-91,-63,35,102,-18,-20,11,100,116,51,-78,-31,-119,31,96,69,-127,61,-73,92,20,79,22,101,-16,-6,29,-59,27,48,83,-11,-56,-48,76,-76,-2,88,-97,-67,-62,-71,97,20,94,59,-71,50,-91,58,35,48,-29,-93,-66,-120,-92,-110,115,96,-12,80,-36,81,98,-13,51, 
  /* [15][0][][] */ 8,-27,-37,72,82,-104,53,-106,60,0,-76,-15,92,13,-98,-111,94,10,-83,28,42,13,72,91,94,72,33,77,18,41,58,-109,-3,1,-65,-6,-64,124,103,-84,24,116,-38,-39,10,-56,-21,-64,-8,-61,1,60,-102,-104,-47,-17,72,39,-32,105,-56,-84,13,97,-34,74,-73,-2,-68,17,72,-75,11,6,50,-104,-18,62,96,78,-82,59,-95,-33,-115,-23,-79,28,86,83,-93,-58,44,107,-96,127, 
  /* [16][0][][] */ -59,11,87,-62,30,93,-47,16,36,43,-98,26,-25,-31,-60,-51,91,71,57,51,93,61,-35,33,-13,54,-77,60,-96,0,28,10,-92,68,43,47,-38,44,-56,-82,44,-23,66,72,49,111,92,-15,-47,-77,-4,127,-43,105,54,27,39,65,62,18,96,80,42,49,40,9,-43,84,27,68,-31,-14,18,68,49,82,-7,80,-100,-11,10,-64,41,46,25,98,98,-4,77,27,-2,88,65,-27,-76,33, 
  /* [17][0][][] */ 13,-111,19,58,-52,-118,-78,-86,17,-92,60,42,80,35,-103,30,14,30,77,89,-96,-24,-9,-53,0,46,-71,4,82,-49,-44,48,-42,-37,16,-4,-59,72,-88,-28,-106,-57,-33,-15,-8,-14,64,-118,66,75,-31,5,-31,58,71,-81,-127,70,-97,-127,12,-85,46,72,-91,-84,36,-106,-106,-11,77,15,4,-126,-66,40,82,-58,23,-71,-5,-37,-81,-110,-124,43,48,-42,4,51,-106,-111,-20,77,-8,-11, 
  /* [18][0][][] */ -84,104,111,-75,-21,-115,-115,2,-22,84,-117,-56,-42,68,64,-67,27,-28,57,-25,110,-8,28,-92,27,-102,-24,113,32,32,-11,45,52,-29,-106,-127,-40,45,-38,64,-37,-9,-60,-15,-123,12,78,-9,17,1,64,24,-122,-6,-3,100,-57,34,-9,-123,88,112,16,30,-82,-127,-37,89,72,-79,-85,114,-108,-32,-98,-107,55,68,11,-74,-67,-2,-27,-16,120,-45,85,77,-112,-53,-45,103,112,-59,52,-5, 
  /* [19][0][][] */ 20,27,75,34,60,-79,97,88,93,-65,26,-14,-103,32,-61,59,76,-109,108,54,-26,78,-61,12,74,-83,24,-72,-94,-124,-67,48,85,-87,30,-4,6,-75,-62,-107,54,-122,-91,4,-95,30,81,-99,-28,37,-43,50,-39,11,4,-14,25,95,-5,-26,52,-60,98,61,-75,1,-31,-5,-12,46,74,-54,-69,-127,-63,-84,-30,-116,11,105,56,-109,-33,86,-91,-11,9,-9,90,28,-6,63,-28,119,73,-52, 
  /* [20][0][][] */ 5,91,81,97,-81,94,32,51,24,14,-74,-21,-10,102,37,-59,-43,-31,-66,-30,31,-49,-67,-73,93,-60,-113,72,29,16,-33,123,105,58,-13,58,41,-27,-14,-126,-56,-10,-79,-98,-30,-43,-62,106,61,-93,-101,77,54,123,54,-3,104,68,105,106,116,-55,-45,-26,-28,-47,-51,34,-78,-88,-67,84,-61,-88,36,40,127,72,120,114,95,25,82,17,81,125,5,77,36,115,44,70,35,25,4,19, 
  /* [21][0][][] */ 89,74,78,-107,109,-101,78,30,7,-78,-72,57,10,34,-41,-100,-127,-39,46,-10,123,-48,71,-92,56,-95,-25,68,18,12,-9,-39,14,17,-97,-106,122,113,-118,-32,-29,-4,30,-12,-107,-96,-106,101,-48,-75,1,76,41,81,-90,27,-64,60,-60,119,62,-73,12,-15,91,24,-25,-76,-110,-3,69,87,32,-6,82,71,-126,-32,63,110,17,98,36,-95,4,-95,56,-88,-116,74,108,-118,-48,-77,74,-27, 
  /* [22][0][][] */ 24,-55,-66,-84,88,-56,105,69,-91,68,-60,-70,109,-111,-96,-78,26,77,-120,-48,74,-74,29,42,74,-11,-92,85,-60,-64,-58,-103,49,55,18,7,6,-20,-49,-93,-13,-14,3,96,56,-115,66,-34,-55,-83,-8,-34,-49,-79,-31,37,-30,-18,-28,-25,102,-57,-72,-95,-59,16,-95,-36,90,95,-24,0,-51,-4,70,-84,43,-44,54,84,98,-97,-77,-127,61,77,79,-26,-56,17,-69,65,5,-1,-44,82, 
  /* [23][0][][] */ 51,-95,7,57,93,-89,3,-67,58,-73,78,103,27,-106,30,-41,77,-38,-85,92,84,-65,87,-22,-31,-19,88,12,68,55,71,-33,-36,35,21,42,92,-2,-85,31,-123,-22,4,-89,-54,-101,92,28,47,-119,-65,-73,76,-54,-37,87,-82,-3,82,31,-94,-60,-61,-4,38,33,-90,-99,67,2,99,-59,0,-15,-28,-90,34,-15,82,100,-46,-49,27,-127,66,-1,88,-7,-91,19,81,4,89,-44,-27,65, 
  /* [24][0][][] */ -62,-51,-81,-44,-59,-75,-54,-50,68,99,74,84,113,45,-15,-105,-64,34,33,-36,88,-56,-48,-17,34,-28,84,46,100,60,18,-46,0,11,51,40,-36,-64,68,7,-85,-104,87,12,28,-52,32,68,-81,-58,0,-10,69,49,67,-46,-10,83,13,-2,83,14,19,89,-66,87,-24,-73,-68,69,-42,-15,-23,54,88,79,52,-59,-85,-67,-61,-74,-40,-127,-12,49,-21,-68,11,-116,-4,-51,-14,34,-74,20, 
  /* [25][0][][] */ -88,-66,-79,-10,98,-64,-89,59,27,-107,-40,38,74,-17,-103,-31,-82,59,24,-105,48,73,-19,-46,-3,-51,-92,39,74,-80,47,113,89,-105,43,71,91,-69,-26,-1,-93,82,-113,14,104,11,47,11,-101,68,-62,-28,46,-23,-55,16,-36,61,-127,68,113,54,30,53,5,79,-13,-6,-85,-4,-45,-107,39,-120,74,13,67,68,2,5,47,43,-49,38,-91,-60,-117,-91,-35,-70,79,32,-124,-37,-36,-94, 
  /* [26][0][][] */ 72,-105,-18,-10,-89,3,-1,-23,-96,-107,104,77,-72,-27,5,-13,112,33,-86,-65,10,67,100,17,58,71,8,53,14,0,-81,8,-15,-45,-94,-94,-66,80,-54,100,-71,117,54,28,-69,83,-17,100,-19,44,-6,123,10,-45,-5,-93,107,60,57,41,-4,-92,60,-17,113,-7,-59,65,-83,74,88,92,82,-101,-85,9,50,-106,-94,14,-25,106,76,-57,94,3,-32,9,-77,114,23,19,-38,127,46,87, 
  /* [27][0][][] */ 29,81,-5,-53,-58,-49,-7,-36,44,86,65,-123,-20,85,53,65,46,26,61,-24,-19,16,31,-24,15,82,-99,45,60,19,-6,11,68,77,-41,-37,-34,-2,-70,2,12,127,52,28,74,113,58,95,81,120,54,41,-28,-17,23,-23,105,-32,-3,-8,-14,-59,56,58,37,-9,-59,112,35,-18,-49,41,45,-20,29,16,73,-29,97,103,98,20,75,48,-1,30,34,38,51,110,35,-30,64,22,98,103, 
  /* [28][0][][] */ 72,-18,71,29,-125,-77,-110,-85,-47,-119,43,55,-94,-99,-9,83,77,94,-82,61,-36,7,-119,-87,-117,64,-96,-74,-86,-87,-16,-34,-114,1,63,57,12,-117,-55,18,85,27,-102,35,-115,-23,-1,33,13,-75,-83,-43,-98,9,37,23,40,-27,64,36,-15,-56,-108,-10,42,56,-33,64,-92,12,-117,-52,53,30,-21,-112,-127,-67,-94,30,-87,-104,96,-34,44,-121,49,-84,-115,-69,-50,-80,-52,39,-98,-77, 
  /* [29][0][][] */ 51,61,62,-55,-95,4,-127,3,119,-14,-92,-105,104,-88,-53,-43,-105,101,37,-69,-72,-24,51,-6,-24,11,-49,-28,-102,-6,100,-10,52,-1,-85,-49,-11,112,-6,80,62,115,-50,77,-11,120,-40,-18,16,-4,56,-70,70,-89,112,39,-66,47,-43,109,-124,92,-87,-58,-65,-67,52,94,97,-97,48,-77,114,85,61,32,116,-64,-31,44,-7,-85,-6,-54,82,127,53,79,-27,112,93,73,-92,39,-7,77, 
  /* [30][0][][] */ 48,49,-8,43,-46,27,-14,-22,90,23,42,-66,-62,50,48,94,22,70,91,-48,48,-58,-44,19,-1,69,-55,127,16,-62,-44,31,-34,-14,-63,-9,31,17,4,-18,126,21,31,78,84,52,93,72,-21,113,33,16,82,0,22,75,-5,-46,5,8,-58,-11,18,-1,-57,-32,-46,110,-28,75,48,0,-46,79,54,6,-8,-21,-19,-10,57,57,-46,49,-36,74,-35,89,50,27,103,43,18,21,13,10, 
  /* [31][0][][] */ 88,-68,49,104,45,50,-46,-99,-24,11,-62,-103,83,-50,-34,102,-50,-73,54,52,78,67,-16,84,63,-65,28,39,-46,-62,47,96,33,27,-67,9,82,-4,-59,-108,74,-38,-6,23,7,-25,-24,23,65,109,88,4,-92,-49,-51,25,-70,55,9,105,-31,-9,86,-56,65,100,-33,-58,70,-97,-93,21,-89,-25,4,31,-51,-41,56,93,-48,-11,51,127,72,92,-65,11,49,-10,-31,-50,60,125,25,43, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.001981355482712388, 0.0021814561914652586, 0.0021809469908475876, 0.0018859044648706913, 0.0021988765802234411, 0.0016999683575704694, 0.0018139102030545473, 0.0019135881448164582, 0.0019052259158343077, 0.0021222284995019436, 0.0018407086608931422, 0.0022624630946666002, 0.0019589897710829973, 0.0019041562918573618, 0.0019469268154352903, 0.0018751402385532856, 0.0020693438127636909, 0.0020325926598161459, 0.0017194296233355999, 0.0017667565261945128, 0.001834687776863575, 0.0016995798796415329, 0.0020544794388115406, 0.0020823802333325148, 0.0021853367798030376, 0.0018960463348776102, 0.0018934339750558138, 0.0028426656499505043, 0.0018663861555978656, 0.0017868408467620611, 0.0026751682162284851, 0.0021407769527286291, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1703, 49, 3876, 4456, 3688, -2345, 3785, -1465, -2056, -589, 4655, -1804, 3356, 5349, 2110, 1869, -739, -523, -2059, 6329, 1988, -1074, 2835, -541, -738, 3154, 1312, 2459, 5336, 2485, 3867, 1471, 1231, 5764, 4364, 3106, -678, 3312, 2813, -4238, -124, 1300, 69, 1756, -1015, 836, -1333, 1042, -9226, 2233, 1141, -3100, 6977, -1031, 2089, 1458, 1315, 2382, -869, -2389, 144, 1378, 261, 3747, 5122, 3949, 3548, 6446, 3898, -720, 2712, 5708, 3501, -1736, 4518, 6712, 839, -4228, 641, 1121, 10883, 2040, -784, -1916, 1291, 1046, 1706, -1750, 3748, -305, 4153, 1300, 113, -3541, -157, 2063, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.0001249165361514315, 0.00024674017913639545, 0.00014563505828846246, 0.00017026859859470278, 0.00016724881425034255, 0.00017139360716100782, 0.00015361791884060949, 0.00018619866750668734, 0.00019024591892957687, 0.00022312128567136824, 0.00013546318223234266, 0.00023269365192390978, 0.00016348007193300873, 0.00012279933434911072, 0.00014879104855936021, 0.00021818249661009759, 0.00022186055139172822, 0.00017419188225176185, 0.00014238854055292904, 9.5643285021651536e-05, 0.00021651308634318411, 0.00016981587396003306, 0.00012542156036943197, 0.00020594550005625933, 0.00027480188873596489, 0.0001981427485588938, 0.00020897272042930126, 0.00015616491145920008, 0.00013290659990161657, 0.0001673519000178203, 0.00012929653166793287, 0.00017075864889193326, 0.00025134463794529438, 0.00011630653170868754, 0.00013406276411842555, 0.00015252121374942362, 0.00015307473950088024, 0.00013672024942934513, 0.00013071925786789507, 0.00012331415200605989, 0.00017027686408255249, 0.00019062610226683319, 0.00020104210125282407, 0.00015178532339632511, 0.00020854319154750556, 0.00015377889212686568, 0.00018598373571876436, 0.00016583609976805747, 7.6557866123039275e-05, 0.0001447076938347891, 0.00021396359079517424, 0.00015268230345100164, 0.00010657915117917582, 0.00015874727978371084, 0.00016024772776290774, 0.00017200828006025404, 0.00016021367628127337, 0.00015281974629033357, 0.00016857878654263914, 0.00012494188558775932, 0.00020050186139997095, 0.00018279843789059669, 0.0002212910185335204, 0.00016974718892015517, 0.00012926021008752286, 0.00011755901505239308, 9.7556490800343454e-05, 0.00011831945448648185, 0.00016571248124819249, 0.00019729167979676276, 0.00017062440747395158, 0.00012242082448210567, 0.00012817121751140803, 0.00013762779417447746, 0.00016033857536967844, 0.00011949551844736561, 0.00014496853691525757, 0.00015080605226103216, 0.0001938371715368703, 0.0001676558458711952, 8.2221427874173969e-05, 0.00015051820082589984, 0.00016691618657205254, 0.00018109686789102852, 0.00017324701184406877, 0.00015728382277302444, 0.00017102353740483522, 0.00019025350047741085, 0.00017180980648845434, 0.00018463103333488107, 0.00014659289445262402, 0.00016773678362369537, 0.0001437928294762969, 0.00011461216490715742, 0.00020106472948100418, 0.00013809952361043543, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -20,121,-79,30,58,-36,99,80,-75,13,45,-92,88,127,-66,39, 
  /* [1][0][][] */ -12,-2,-46,-29,-7,38,20,-127,28,-50,-26,-53,-5,-35,-65,-2, 
  /* [2][0][][] */ -17,-17,30,80,33,52,-113,127,-16,-6,61,-66,-22,-62,-43,59, 
  /* [3][0][][] */ 89,-98,81,-17,-11,-41,-35,127,-45,61,80,59,-8,51,-4,28, 
  /* [4][0][][] */ -44,-20,-3,32,-85,5,-25,-106,-19,-1,41,1,31,38,88,127, 
  /* [5][0][][] */ 127,17,-29,-15,-62,21,30,59,24,-18,52,75,105,29,-89,-5, 
  /* [6][0][][] */ 11,-42,-66,-61,-87,-4,3,-43,-69,-58,-20,37,86,48,127,9, 
  /* [7][0][][] */ -53,31,-37,-80,-8,-63,-76,12,-110,58,-69,-64,-127,-39,15,105, 
  /* [8][0][][] */ 54,48,77,6,55,20,69,7,64,-20,40,8,-127,-26,-78,15, 
  /* [9][0][][] */ -31,62,28,-35,-14,-11,30,-18,-22,44,-41,3,32,127,27,19, 
  /* [10][0][][] */ 72,62,-53,56,-35,-25,63,-50,-85,-33,-42,-93,-127,-67,16,107, 
  /* [11][0][][] */ 36,-5,63,-5,-20,-36,6,95,-88,30,-11,20,-11,-13,44,127, 
  /* [12][0][][] */ -53,-20,14,-11,12,-9,101,34,-74,31,16,3,-12,64,-43,127, 
  /* [13][0][][] */ -13,30,20,66,87,34,97,127,-29,88,-83,-69,20,73,-73,-49, 
  /* [14][0][][] */ -127,120,7,-21,-11,-3,52,-1,-54,39,127,2,-96,14,-52,65, 
  /* [15][0][][] */ -5,-12,-127,-35,82,-24,-93,-26,-13,-22,-25,-63,-2,-70,-50,32, 
  /* [16][0][][] */ 127,-30,-1,-1,36,-33,54,-29,-26,-3,121,50,47,15,-32,1, 
  /* [17][0][][] */ 17,21,-16,-81,2,-52,106,-127,5,-18,-47,29,36,77,13,35, 
  /* [18][0][][] */ 32,125,-22,-46,73,-64,-24,-58,-24,127,-40,-20,-17,71,0,-50, 
  /* [19][0][][] */ -73,-98,116,-94,29,-127,32,-28,26,52,102,112,23,-16,54,-11, 
  /* [20][0][][] */ -16,95,55,1,8,-3,14,-27,51,0,95,-17,-127,-26,-65,-2, 
  /* [21][0][][] */ -59,41,28,23,78,39,79,48,-127,64,-49,26,-25,16,-78,-31, 
  /* [22][0][][] */ 10,-81,43,-2,9,-127,109,13,6,-47,-33,-65,43,-85,-54,-35, 
  /* [23][0][][] */ -59,-94,49,64,27,-25,28,-52,20,-31,85,10,3,71,79,127, 
  /* [24][0][][] */ -8,-10,30,81,43,14,-54,-127,75,20,-35,14,13,2,-18,-26, 
  /* [25][0][][] */ -3,33,12,-39,-8,5,14,-37,-5,42,-55,-21,31,127,33,-11, 
  /* [26][0][][] */ -63,74,3,19,22,-87,-6,-25,5,23,17,75,7,2,-75,127, 
  /* [27][0][][] */ -19,-127,-46,11,-55,100,-12,-61,26,-38,56,-35,19,-55,-113,-31, 
  /* [28][0][][] */ -38,-1,40,76,20,6,-39,-126,-127,53,112,-5,72,4,-49,-16, 
  /* [29][0][][] */ -127,106,-20,-33,-39,14,-112,-65,-58,-21,14,10,7,-64,-106,81, 
  /* [30][0][][] */ 48,77,-44,61,-115,-100,-87,-14,-56,9,13,-96,127,21,-19,114, 
  /* [31][0][][] */ 127,38,-59,-31,-55,20,93,23,-56,-29,59,41,33,28,-18,-7, 
  /* [32][0][][] */ -23,-9,127,-3,-14,77,75,12,-20,-24,-14,8,8,73,65,23, 
  /* [33][0][][] */ 5,51,-65,-54,-7,28,127,22,13,-12,22,-68,71,116,-45,30, 
  /* [34][0][][] */ -78,-24,81,23,21,-52,112,-10,-127,25,37,-40,57,66,-56,-27, 
  /* [35][0][][] */ -8,9,-56,1,-93,116,-36,-15,-35,127,5,108,-60,50,10,62, 
  /* [36][0][][] */ -5,-83,127,-48,-47,22,-47,-15,21,15,-57,78,5,-88,-37,37, 
  /* [37][0][][] */ 82,-6,75,-31,125,-69,-45,35,-60,127,-70,0,-91,-40,98,-7, 
  /* [38][0][][] */ 40,49,13,-119,-26,-71,-105,74,-122,83,-86,-44,-88,-127,-119,107, 
  /* [39][0][][] */ -76,24,-46,-30,-80,-74,61,13,-127,-11,26,82,37,-1,-9,70, 
  /* [40][0][][] */ 127,51,31,-92,-55,30,18,-50,-40,-36,-48,-91,9,60,34,28, 
  /* [41][0][][] */ 87,-79,-43,-49,4,-6,-61,-30,61,-8,-16,-49,127,-79,50,-30, 
  /* [42][0][][] */ -8,-82,-48,127,0,-83,-89,17,27,12,4,47,-72,68,-41,-10, 
  /* [43][0][][] */ -84,-43,-50,-112,-39,10,-14,73,54,-127,-52,28,-18,-53,-34,86, 
  /* [44][0][][] */ -30,42,37,-33,-12,-20,35,99,127,-77,70,98,100,52,-24,-16, 
  /* [45][0][][] */ 30,75,-90,109,127,-88,-41,-62,103,-60,72,-71,-16,23,-72,83, 
  /* [46][0][][] */ -23,-39,5,-6,97,-23,28,27,-3,127,-32,-116,35,65,-38,68, 
  /* [47][0][][] */ 85,-64,-44,-7,85,-12,-51,-60,16,127,-41,27,9,-114,-73,-3, 
  /* [48][0][][] */ 12,28,-11,-127,-6,-49,124,-126,13,6,-40,46,48,64,0,38, 
  /* [49][0][][] */ -41,126,-57,38,40,-55,71,48,-23,32,33,-74,-34,57,127,-95, 
  /* [50][0][][] */ 7,50,-14,-3,-127,-3,-77,-59,47,87,35,34,-42,-46,-9,54, 
  /* [51][0][][] */ 127,-38,-50,-11,-47,83,-94,-47,44,-12,-43,66,-35,-73,-3,40, 
  /* [52][0][][] */ -34,-41,41,49,-39,-97,-127,-4,-60,-40,-15,-51,8,-72,-2,109, 
  /* [53][0][][] */ 24,104,52,-127,3,109,98,-22,-11,-29,-8,-37,78,-122,12,53, 
  /* [54][0][][] */ 37,127,2,-14,9,-83,-112,48,17,-25,-53,117,81,93,25,54, 
  /* [55][0][][] */ -53,-13,58,17,48,-38,92,99,-107,2,31,19,127,46,-12,15, 
  /* [56][0][][] */ 127,18,4,12,-41,99,-43,-67,-15,26,-80,-12,-48,104,-2,27, 
  /* [57][0][][] */ -48,-32,-42,-33,-66,-89,54,-18,-127,-19,60,60,18,29,-13,70, 
  /* [58][0][][] */ 45,-58,70,18,1,-72,-19,10,20,-13,-127,-22,15,-47,-43,52, 
  /* [59][0][][] */ 84,28,-126,93,14,43,79,-31,-73,-50,33,-107,-127,-50,21,112, 
  /* [60][0][][] */ 2,32,-18,24,-24,-23,-18,4,-35,-89,61,127,-44,-125,-26,-13, 
  /* [61][0][][] */ -35,8,75,-83,-63,35,-1,98,-26,-64,53,65,75,-15,0,127, 
  /* [62][0][][] */ 77,47,-12,-127,-15,6,6,-43,-4,24,-39,43,25,-20,-74,-81, 
  /* [63][0][][] */ -3,-28,-1,-10,-70,-73,-51,14,-80,-9,-23,-11,127,-2,44,4, 
  /* [64][0][][] */ 19,6,-11,45,-101,-47,-15,-68,38,117,44,17,34,-56,-45,127, 
  /* [65][0][][] */ -40,1,-24,-23,-99,77,28,-23,48,-123,120,-64,93,67,-127,80, 
  /* [66][0][][] */ -118,95,-94,-93,46,-31,-110,-79,-107,117,93,3,-127,-50,36,60, 
  /* [67][0][][] */ 8,-21,-127,-118,79,85,-3,-33,-26,-5,40,-27,26,37,27,40, 
  /* [68][0][][] */ 56,24,-5,-58,-65,32,6,33,-80,82,126,-5,-15,-55,-127,21, 
  /* [69][0][][] */ 68,-94,59,-49,9,-113,-32,127,-14,67,88,83,-20,69,-33,13, 
  /* [70][0][][] */ 47,13,127,33,111,-25,117,1,26,34,-63,60,-96,54,-81,48, 
  /* [71][0][][] */ 11,33,100,-67,-127,-77,13,6,-16,-17,13,-110,-83,4,18,15, 
  /* [72][0][][] */ -60,-88,31,-116,69,-13,6,47,-78,26,-116,-8,60,111,-62,127, 
  /* [73][0][][] */ 19,28,59,-10,127,-99,-45,9,-46,108,-79,41,-101,-59,97,5, 
  /* [74][0][][] */ -86,13,-127,-60,75,-22,-47,22,-65,-7,-127,-49,-37,-40,-37,54, 
  /* [75][0][][] */ 93,-18,49,-44,19,4,-127,-28,-8,-96,70,6,-2,-15,-5,-9, 
  /* [76][0][][] */ 13,-48,-34,112,38,89,78,-44,86,-127,56,96,31,-73,-75,30, 
  /* [77][0][][] */ -27,-25,125,-26,35,-21,-32,-127,21,3,24,88,48,55,28,-12, 
  /* [78][0][][] */ -54,5,20,-33,-5,-46,35,-5,14,-23,22,-89,-91,-78,-127,-65, 
  /* [79][0][][] */ -98,-54,-11,24,127,33,-18,20,9,31,-13,51,-50,-73,-65,-3, 
  /* [80][0][][] */ 7,-100,28,127,-26,-4,-98,74,14,2,44,-14,-76,-3,5,21, 
  /* [81][0][][] */ 105,70,-22,91,-7,23,19,127,22,12,109,57,106,22,76,-24, 
  /* [82][0][][] */ -55,4,16,-36,29,-127,-124,-82,6,72,-46,-32,-34,91,-63,-32, 
  /* [83][0][][] */ 103,-5,82,-38,-37,-3,-112,-16,3,-127,26,-48,-6,-9,23,-12, 
  /* [84][0][][] */ 18,-70,-85,27,127,45,24,32,-107,16,-116,-31,46,-36,-74,10, 
  /* [85][0][][] */ 10,109,53,-73,114,0,44,-114,127,-39,43,0,126,-85,2,-19, 
  /* [86][0][][] */ 111,-16,127,43,7,-54,69,30,-56,-47,-89,-30,27,6,-57,11, 
  /* [87][0][][] */ -5,6,15,-70,67,-23,-56,20,35,-38,70,-42,-78,-127,-4,19, 
  /* [88][0][][] */ -65,-27,32,0,23,44,-71,-43,2,8,-80,-127,-50,-44,-10,-38, 
  /* [89][0][][] */ -74,9,12,-62,22,16,-127,39,77,19,-65,-11,-1,-72,-32,-24, 
  /* [90][0][][] */ -17,-10,-24,-88,127,14,-63,41,32,64,39,-4,26,12,-71,-9, 
  /* [91][0][][] */ -31,-59,10,77,-26,5,-6,86,-22,-76,8,-77,-9,86,27,127, 
  /* [92][0][][] */ -32,82,-1,-17,-29,58,-106,61,-53,-7,77,10,-35,127,51,33, 
  /* [93][0][][] */ -3,69,-71,-76,79,92,-96,12,81,63,86,44,-127,39,-44,84, 
  /* [94][0][][] */ 18,71,105,13,-127,-36,14,-6,30,-20,24,-14,-68,-31,21,-31, 
  /* [95][0][][] */ -21,20,52,4,127,-9,-104,87,10,27,-76,111,3,6,114,-23, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015162004856392741, 0.0029948605224490166, 0.001767675974406302, 0.0020666706841439009, 0.0020300173200666904, 0.002080325735732913, 0.0018645696109160781, 0.0022600251249969006, 0.0023091495968401432, 0.0027081812731921673, 0.0016442126361653209, 0.0028243677224963903, 0.001984273549169302, 0.001490502618253231, 0.0018059824360534549, 0.0026482355315238237, 0.0026928787119686604, 0.0021142903715372086, 0.0017282706685364246, 0.0011608903296291828, 0.0026279727462679148, 0.0020611756481230259, 0.0015223303344100714, 0.0024997065775096416, 0.003335465444251895, 0.0024049989879131317, 0.0025364500470459461, 0.0018954841652885079, 0.0016131815500557423, 0.0020312685519456863, 0.0015693636378273368, 0.0020726188085973263, 0.0030507480259984732, 0.0014116948004812002, 0.0016272148350253701, 0.0018512581009417772, 0.0018579766619950533, 0.0016594706103205681, 0.0015866323374211788, 0.0014967513270676136, 0.0020667710341513157, 0.0023137640673667192, 0.0024401904083788395, 0.0018423261353746057, 0.0025312365032732487, 0.0018665234092622995, 0.0022574164904654026, 0.0020128702744841576, 0.00092923705233260989, 0.0017564197769388556, 0.0025970276910811663, 0.0018532132962718606, 0.0012936267303302884, 0.0019268282921984792, 0.001945040188729763, 0.002087786328047514, 0.0019446269143372774, 0.0018548815278336406, 0.0020461601670831442, 0.0015165081713348627, 0.0024336331989616156, 0.0022187542635947466, 0.002685965970158577, 0.0020603418815881014, 0.0015689227730035782, 0.0014268971281126142, 0.0011841122759506106, 0.0014361271169036627, 0.002011369913816452, 0.0023946689907461405, 0.0020709894597530365, 0.0014859082875773311, 0.001555704977363348, 0.0016704860609024763, 0.0019461429910734296, 0.0014504018472507596, 0.0017595859244465828, 0.001830439898185432, 0.0023527392186224461, 0.0020349577534943819, 0.00099797977600246668, 0.001826946041546762, 0.0020259800367057323, 0.0021981010213494301, 0.0021028218325227499, 0.0019090651767328382, 0.0020758339669555426, 0.0023092415649443865, 0.002085377462208271, 0.002240997739136219, 0.0017793019069358706, 0.0020359402988106012, 0.0017453155014663935, 0.0013911291025578976, 0.0024404651485383511, 0.0016762118320912123, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 7495, 14232, -3756, 5179, 0, 8561, 730, 5698, 16895, -2020, -6959, 7680, -14711, 12749, 2509, 11706, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.3630719776265323e-05, 8.1974299973808229e-05, 5.6686101743252948e-05, 5.8913698012474924e-05, 8.7364249338861555e-05, 7.3075258114840835e-05, 6.8589106376748532e-05, 6.0779366322094575e-05, 0.00010905525414273143, 8.2541497249621898e-05, 7.7071126725059003e-05, 6.2406848883256316e-05, 9.3437578470911831e-05, 7.2891831223387271e-05, 8.0663252447266132e-05, 8.0934623838402331e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -106,34,51,-7,-73,-13,-68,17,-82,22,13,-21,44,60,13,-36,21,-16,103,7,10,-68,127,62,53,25,2,32,-53,-117,-83,18,-52,-47,36,54,17,28,4,0,-12,-11,-94,20,-87,-13,-9,79,-8,15,-31,-6,-1,-7,28,-45,-99,19,-28,77,85,33,16,16,-33,-70,-38,18,-69,-60,31,-8,5,-7,-61,-59,-65,5,-44,3,-54,48,75,-57,17,43,9,58,50,-14,6,-31,-30,-30,-49,9, 
  /* [1][0][][] */ 54,19,26,-60,-71,-17,-1,3,-24,24,60,-35,14,-29,-69,-22,-8,-5,-55,39,-11,-74,18,49,1,-52,-3,-39,62,-89,99,-69,55,16,-24,60,43,75,-21,-44,51,26,-2,-10,0,42,-127,-43,-49,-49,-7,-28,28,-66,-38,47,8,14,-31,20,9,46,-16,-71,-14,-26,-52,-8,-3,-5,-73,-11,-27,-25,27,-97,4,17,32,-67,-12,-33,-88,-19,29,-33,-21,12,-79,-9,-57,45,32,65,-50,59, 
  /* [2][0][][] */ 78,-36,32,12,28,-89,65,3,9,-29,-28,-13,-105,-43,29,-39,-106,-37,-48,48,10,-45,-57,33,-5,-77,8,-15,-36,42,-64,117,-45,127,-30,10,-14,-14,-20,7,-91,79,94,4,-51,-1,-10,-7,30,10,-42,-55,48,-14,-17,65,32,-16,66,-10,-12,34,-40,3,70,11,-2,-4,49,35,-46,-8,59,60,54,49,44,-63,80,46,81,7,-38,25,-52,28,17,68,3,12,-24,32,-43,44,-20,34, 
  /* [3][0][][] */ -1,4,-13,11,16,-4,10,-61,-33,54,36,67,35,-14,-62,47,21,-31,37,10,14,127,39,-46,12,24,-27,13,74,-28,66,-6,-41,35,-24,-32,18,47,29,-7,-84,-37,-46,44,-51,23,25,-7,-15,-65,-2,-23,49,-70,-27,-55,6,92,-27,2,-5,-13,-53,16,27,54,-31,-6,-28,10,18,-69,-39,-54,38,-14,21,0,-45,-40,-35,-27,-55,19,-19,-32,25,-20,-4,29,12,-32,45,19,-35,54, 
  /* [4][0][][] */ 37,7,-46,26,20,30,-42,9,-46,90,96,-11,17,8,-10,-50,9,-24,-27,48,16,-47,57,75,-68,-1,-127,13,-30,-66,6,28,-71,-54,10,72,19,30,17,12,-36,-47,43,-30,-15,13,-34,53,-35,45,20,22,45,-20,-75,24,52,5,-10,-13,57,-5,24,21,-43,17,-31,1,-67,41,-42,54,31,-72,-21,-60,13,-64,-20,13,-32,68,-80,2,-38,19,22,-51,60,12,20,-4,-51,-14,40,23, 
  /* [5][0][][] */ -88,39,31,5,50,-21,62,-25,-35,47,18,-35,54,-1,-53,-49,14,-55,58,15,-125,-40,-62,38,-43,1,46,-1,51,-74,-2,70,47,120,-7,72,-10,22,51,-43,-45,89,56,-9,-24,82,34,-16,12,15,-23,34,16,-44,28,-97,46,-45,-85,-69,97,110,-32,-10,82,-56,-72,-81,-73,-3,-53,11,-30,7,-16,-54,4,-56,-52,-14,127,-59,9,-79,-89,36,36,-4,-28,50,34,-6,-18,29,13,83, 
  /* [6][0][][] */ 34,-23,-86,38,-33,-127,106,94,-76,54,-1,73,-122,-70,63,50,-2,-60,-18,-7,-11,-10,-59,-75,-49,45,71,33,43,30,86,-47,27,10,10,-48,14,30,28,67,11,28,-61,-35,8,-64,-83,27,25,-99,-21,92,29,-4,-20,-49,62,53,6,-7,-112,37,-75,10,26,-13,14,37,47,32,5,-45,-36,30,103,22,57,-26,41,-85,1,-38,-86,63,6,-67,33,34,-37,70,55,46,-14,21,-41,108, 
  /* [7][0][][] */ 30,78,-43,-34,-18,-29,25,-7,-50,8,-72,-51,-44,13,30,-9,-51,-41,-35,56,-10,127,-5,34,-9,-4,18,30,44,42,59,-35,78,31,-29,-14,-2,-16,2,52,-59,-8,26,-63,39,-40,85,-14,39,-73,-90,-24,-47,18,1,-8,9,7,-83,12,-24,102,14,-42,-22,13,-54,37,-31,-38,-106,30,17,68,-42,55,-42,48,23,-81,-30,-46,51,-86,45,-29,-15,-18,-24,64,-86,29,61,-41,-46,17, 
  /* [8][0][][] */ 0,85,-52,59,-39,-18,-83,41,-122,-17,20,1,-15,43,13,93,13,-63,11,9,30,-9,20,-17,-32,76,-1,19,-3,-21,-37,-20,-36,-56,-31,-50,-42,28,47,-13,-9,-43,15,24,-56,-28,-2,-22,-13,-34,55,80,0,-24,-72,104,-30,51,-19,-38,-16,15,23,68,-36,-68,-32,-18,-62,24,3,24,-30,-61,-108,-30,-61,17,-82,-43,-29,-27,-49,-33,-10,-3,22,36,23,64,-63,-12,-91,-127,22,-59, 
  /* [9][0][][] */ -15,19,-61,35,-25,-37,64,40,9,30,-36,82,-43,-26,36,113,3,20,59,14,21,19,20,-76,-36,-8,26,-4,2,-21,32,39,-19,5,0,-127,22,-18,-25,-3,-6,22,51,-34,4,-3,24,17,21,80,17,-14,-48,-67,0,-7,-3,-20,73,-14,-75,49,-62,-34,76,-10,-22,14,-55,12,34,22,-5,86,-29,-10,-19,26,-34,-12,45,-9,61,-4,26,-14,-10,-38,-57,16,-2,-1,58,26,-41,-1, 
  /* [10][0][][] */ 52,3,-33,-15,-26,-25,59,-15,22,-32,-34,-2,-89,-27,20,-12,-63,-12,13,18,42,40,21,6,-43,69,33,-3,-57,-72,-29,-24,69,-27,39,-7,59,-71,65,127,22,-39,16,-3,-8,-97,-3,52,19,78,-71,-42,-19,25,13,41,11,-63,76,49,-26,40,-60,-23,-4,-46,16,56,27,-29,-10,28,99,35,13,-68,31,-31,59,-6,-41,47,42,9,-39,1,6,29,-47,-13,22,43,39,58,-33,11, 
  /* [11][0][][] */ -61,-32,48,-79,18,-5,-40,-68,62,-60,-10,0,-23,-13,23,3,-54,15,54,13,-46,31,-80,-81,16,28,-41,54,22,-58,29,-51,34,-5,7,-36,-74,15,-117,43,-64,71,-29,48,28,-4,-2,-42,8,-13,-75,-57,25,24,83,-64,-34,-81,25,-45,-46,-49,-20,-127,9,-69,50,103,127,0,68,-25,-33,-13,47,-29,98,46,44,56,25,13,-12,78,87,21,10,-29,-85,-74,-10,26,56,33,51,89, 
  /* [12][0][][] */ 31,-23,5,-49,39,89,-5,22,52,48,-6,43,3,32,28,-6,-68,54,13,51,127,6,51,-65,27,18,-64,-64,-25,70,7,4,33,0,16,-47,31,4,-30,-19,30,-17,45,54,-8,21,1,-3,-62,24,-6,16,-25,-30,12,16,-37,43,18,52,21,-93,7,-99,-9,88,-15,-35,5,-39,66,10,-6,26,-13,48,-5,50,-60,-8,-22,39,115,28,-12,74,-23,-67,57,13,-78,52,68,-2,-22,-86, 
  /* [13][0][][] */ -7,18,-22,-59,-29,-21,13,-40,9,-31,-14,-69,61,-102,-43,-66,-18,-46,-81,-20,-84,-38,9,94,-30,13,107,10,27,-39,49,46,24,1,-108,127,-25,-49,30,-60,118,11,-7,26,-5,-77,53,-35,81,0,-38,28,24,-20,-7,65,57,-45,-40,-8,47,37,2,-79,-13,23,-35,21,-66,-37,-69,-2,-47,14,-36,-96,-101,19,37,63,-21,50,10,-70,53,34,25,-15,-13,-9,-1,0,-51,18,-29,-14, 
  /* [14][0][][] */ 0,27,-79,-11,83,84,-83,1,16,-38,87,-6,24,-16,-49,-56,-60,7,40,127,4,-30,2,10,10,30,-28,61,15,0,-26,15,60,-3,-32,14,-15,55,80,-5,54,-4,24,15,-13,-29,47,-40,35,-16,-10,-18,45,9,-34,33,7,64,-90,-9,-2,-58,-32,-99,3,-54,-40,-5,-80,53,-9,35,5,-34,-17,-43,33,-16,-52,-36,28,-16,-11,-1,-6,43,-10,-12,-26,65,66,18,4,-41,-44,-64, 
  /* [15][0][][] */ -85,-48,48,-84,19,-39,-38,-117,25,1,-28,78,-29,-45,64,95,-127,-4,17,-68,32,-21,-27,-76,54,-5,60,-52,-85,-113,-81,18,-25,56,80,-125,-17,-33,12,3,-13,10,51,-30,14,-17,84,118,-63,15,14,-59,-47,58,9,-68,-111,-37,123,18,-63,15,-103,13,-66,4,-11,35,75,-97,83,-49,65,-25,-52,-38,24,33,65,11,-21,117,72,17,1,-13,-118,-5,-33,-52,-82,38,37,-37,-28,80, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022793055977672338, 0.0034839077852666378, 0.0024091592058539391, 0.0025038321036845446, 0.003712980542331934, 0.0031056983862072229, 0.0029150370974093676, 0.0025831230450421572, 0.0046348483301699162, 0.0035080136731266975, 0.0032755227293819189, 0.0026522909756749868, 0.0039710970595479012, 0.0030979027505964041, 0.0034281881526112556, 0.0034397214185446501, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 389, 611, -1933, -4089, 1434, 4008, 1658, -1449, -823, -1193, 8345, -1899, -393, 15104, 8323, -3254, 16164, 1803, -6789, 27, 569, -5303, -3300, -2180, 543, -4000, -2533, -3995, 520, -9320, 1195, 926, 11930, -1333, -2990, -137, 2092, -1801, 713, 8386, 137, 552, 728, -4099, 15485, 19012, 2508, 14736, -2775, 8288, 12487, -3553, -588, 2242, -424, 8053, -402, 984, 12387, 10286, 10090, 9255, 8090, -6201, 2376, 3596, -3019, 2329, -1850, -1100, 1489, 3933, 13880, -1704, -467, 9839, -3687, 1192, 6606, 1046, -1390, 16068, -3719, 1752, 14894, 2821, -4259, -1887, 5350, -6149, 15173, -176, -3103, 745, -2851, -2529, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00032281095627695322, 0.0001790338137652725, 0.00013591884635388851, 0.00018884094606619328, 0.00026459083892405033, 0.00032942582038231194, 0.00035870238207280636, 0.00024313780886586756, 0.00022311165230348706, 0.00015441498544532806, 0.00011363731027813628, 0.0002581414591986686, 0.00029621421708725393, 9.1789443104062229e-05, 0.00015254026220645756, 0.00017378201300743967, 0.00010089544957736507, 0.00035756657598540187, 0.0001250188797712326, 8.1673009844962507e-05, 0.00019355042604729533, 0.00029760721372440457, 0.00022323727898765355, 0.00019894816796295345, 0.00057864550035446882, 0.00017155497334897518, 0.00028414666303433478, 0.0001367165386909619, 0.00021891939104534686, 7.919493509689346e-05, 0.00038917674100957811, 0.00020187372865621001, 0.00017491406470071524, 0.00018484395695850253, 0.00024672914878465235, 0.0004052582080475986, 0.00019477849127724767, 0.00026299979072064161, 0.00039956680848263204, 9.0325986093375832e-05, 0.00023427634732797742, 0.00025048229144886136, 0.00024515556287951767, 0.00010813347762450576, 8.2687969552353024e-05, 6.7211360146757215e-05, 0.00020524694991763681, 9.4738075858913362e-05, 0.00022390834055840969, 9.8615855677053332e-05, 0.00010891765123233199, 0.00013410534302238375, 0.00020036974456161261, 0.00013909909466747195, 0.00022886510123498738, 0.00018234302115160972, 0.00021259607456158847, 0.00026631247601471841, 0.00016129380674101412, 0.00011633383837761357, 0.00014490718604065478, 0.00018174732394982129, 0.00012422414147295058, 0.0001180434919660911, 0.00014997216931078583, 0.00028741610003635287, 0.00017988133186008781, 0.00024715549079701304, 0.00030652660643681884, 0.00026411795988678932, 0.00022277543030213565, 0.00019101121870335191, 9.3141781690064818e-05, 0.00020216075063217431, 0.00025547025143168867, 0.00013035073061473668, 0.00011385413381503895, 0.00015286145207937807, 0.00019423499179538339, 0.00022309011546894908, 0.00032886993722058833, 0.00010897391621256247, 0.0002467447193339467, 0.00019997027993667871, 9.0173874923493713e-05, 0.00021496890985872597, 0.00014777389878872782, 0.00032615524833090603, 0.00018222194921690971, 0.00018336977518629283, 8.093944052234292e-05, 0.00044017491745762527, 0.00028705361182801425, 0.00024169911921489984, 0.00016065187810454518, 0.0003639232600107789, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 33,127,-5,11,-55,-6,30,39,68,-68,-124,77,-28,-2,17,-42,-127,8,47,46,29,70,80,114,-1,-40,-33,-4,-22,37,11,-36,-79,-14,-22,41,-15,35,-6,1,21,-42,19,50,-43,-58,3,-21,-11,-127,-65,-1,46,68,-9,-14,-59,-64,-63,-127,-107,10,-127,6,-35,33,74,-9,-20,48,69,-31,-63,13,39,-7,14,-61,-50,18,5,-50,69,-26,-92,-55,-17,14,-112,10,-99,36,63,-7,47,-4, -35,-57,-1,109,-15,82,-24,-12,73,28,-127,69,-43,-114,-127,127,-112,60,47,105,114,36,127,127,11,7,14,45,6,127,-14,-127,74,80,12,3,54,86,-38,-93,127,-16,101,127,-81,-85,127,-77,-1,-61,-88,-25,33,127,-20,-127,10,16,-119,-110,-21,-127,-53,98,-41,74,116,-21,7,127,116,19,-127,21,-41,-114,27,-79,-60,127,-6,-62,127,-60,-84,-36,62,32,88,127,-118,0,127,-47,127,22, 24,-113,5,2,-21,-13,-7,51,38,45,-107,71,-8,37,11,-65,-21,11,40,36,40,48,56,75,20,-54,18,56,9,20,-16,-56,-64,-80,-22,56,-13,-5,6,16,-11,10,-4,100,-57,-66,-2,27,26,-60,-7,22,41,9,16,-12,36,-86,-45,-99,-127,31,-86,-29,31,7,-43,-11,-20,-13,54,-22,-61,-52,-9,12,30,-21,-56,-11,2,-127,53,-13,-57,-45,15,-29,-72,-15,-28,21,39,41,1,-7, 
  /* [0][1][][] */ 74,0,50,127,-9,-58,103,53,-27,-127,-114,127,-4,-126,-23,11,-92,-48,124,55,-127,24,-127,-45,-14,64,-116,127,-68,73,127,69,21,86,21,127,-127,78,-38,-113,56,-127,12,56,-127,-127,7,-127,-89,-62,-104,12,92,-60,81,-9,-127,-6,-60,-12,-74,-52,-46,52,-102,-30,103,-99,-50,24,-63,-127,-80,97,127,-84,127,80,-64,-56,127,-47,-20,90,-9,-30,14,65,-18,12,-101,27,-3,-111,40,-13, -127,7,-66,113,-87,-127,-127,-127,54,2,-23,36,-49,-127,-35,91,-95,-127,127,127,16,-127,-94,110,-127,127,30,81,-51,-16,-103,74,-127,83,127,-11,12,127,127,-127,-40,24,4,-5,-18,-108,-99,-113,5,-122,-127,127,22,72,56,-46,3,20,97,-40,-63,-37,-127,127,-15,-127,127,127,17,32,-127,-82,-6,107,-114,-127,84,127,127,-80,-62,22,-105,60,-28,-82,127,127,112,97,-127,-127,-103,-65,111,127, 46,-46,81,87,-2,-24,-2,24,-26,106,-92,104,-9,-48,-62,51,-23,-30,50,12,-115,13,-64,-61,5,35,127,-30,127,90,18,-114,-38,-127,9,98,-112,5,-52,-55,-16,99,28,103,-12,-98,-18,-58,127,-97,-6,-1,31,-92,-127,3,94,-18,-127,38,-25,-27,15,33,127,-33,-24,-34,-68,-5,-49,-69,-110,-127,-21,-36,32,-49,-103,-53,-59,-99,0,127,-56,2,13,-8,-37,-10,-37,36,-3,127,1,-15, 
  /* [0][2][][] */ 31,-109,32,-19,17,5,32,65,-55,-52,2,-75,17,-46,-16,13,-12,19,20,65,-16,62,34,-37,23,92,1,6,-46,44,-19,15,-23,1,-22,85,19,-13,-20,-64,-2,25,-5,-51,-82,-59,-30,-52,-1,77,-50,36,-15,-26,-36,6,8,5,20,33,-37,7,44,8,-69,22,-81,-18,35,5,1,63,-17,16,24,12,20,-30,-33,7,12,-100,-5,-44,-127,11,-22,-6,-127,71,4,42,-2,8,25,-26, -48,32,127,-22,127,63,-28,27,-127,8,-67,-85,127,-22,-79,2,32,50,-3,-67,32,24,64,-11,70,-78,8,47,-28,106,-22,10,-65,44,10,9,44,53,12,-103,-19,-6,-127,-50,-55,37,-69,-94,1,-62,-62,90,127,-107,-24,-45,-24,127,-2,-7,12,-112,113,60,-57,-10,-74,9,127,-15,18,60,-75,13,-9,-21,18,-97,-7,-35,-3,-94,-27,-68,-76,127,30,6,58,53,36,39,-21,3,-1,6, 0,60,21,22,-5,-5,-19,50,16,70,66,-64,10,-69,-32,21,-33,12,-13,45,-10,58,23,-35,2,72,25,18,-15,55,-25,-77,-44,-3,-13,71,20,-25,-16,-60,-7,-15,10,-15,-107,-70,-26,-59,24,56,-15,2,7,-37,-5,-7,13,-1,-10,32,-16,33,36,-13,27,7,-72,6,15,11,1,62,0,-23,-9,-8,21,-17,-30,0,5,-80,4,-4,-32,24,-20,-20,-115,92,16,21,-1,-10,11,-26, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.013719465583562851, 0.0076089370995759964, 0.0057765510864555836, 0.008025740273296833, 0.011245111003518105, 0.014000596478581429, 0.015244850888848305, 0.010333356447517872, 0.009482244960963726, 0.0065626366995275021, 0.0048295855522155762, 0.010971011593937874, 0.012589103542268276, 0.0039010511245578527, 0.0064829611219465733, 0.0073857354000210762, 0.0042880563996732235, 0.015196578577160835, 0.0053133023902773857, 0.0034711027983576059, 0.0082258926704525948, 0.012648305855691433, 0.0094875842332839966, 0.008455296978354454, 0.024592433124780655, 0.0072910860180854797, 0.012076233513653278, 0.0058104526251554489, 0.0093040736392140388, 0.0033657846506685019, 0.016540011391043663, 0.0085796331986784935, 0.0074338475242257118, 0.0078558679670095444, 0.010485989041626453, 0.017223473638296127, 0.0082780858501791954, 0.011177490465342999, 0.016981588676571846, 0.0038388543762266636, 0.0099567444995045662, 0.010645497590303421, 0.010419110767543316, 0.0045956727117300034, 0.0035142386332154274, 0.0028564827516674995, 0.0087229954078793526, 0.004026368260383606, 0.0095161041244864464, 0.0041911737062036991, 0.0046290000900626183, 0.0056994766928255558, 0.0085157137364149094, 0.0059117116034030914, 0.0097267664968967438, 0.0077495784498751163, 0.0090353330597281456, 0.011318279430270195, 0.006854986771941185, 0.004944188054651022, 0.0061585553921759129, 0.0077242609113454819, 0.0052795256488025188, 0.0050168484449386597, 0.0063738171011209488, 0.012215184047818184, 0.0076449564658105373, 0.010504107922315598, 0.013027380220592022, 0.011225013062357903, 0.0094679556787014008, 0.0081179765984416008, 0.0039585256017744541, 0.008591831661760807, 0.010857485234737396, 0.0055399062111973763, 0.004838800523430109, 0.0064966115169227123, 0.0082549871876835823, 0.009481329470872879, 0.013976971618831158, 0.0046313912607729435, 0.01048665028065443, 0.0084987366572022438, 0.0038323896005749702, 0.0091361785307526588, 0.0062803905457258224, 0.013861597515642643, 0.0077444328926503658, 0.0077932155691087246, 0.0034399263095110655, 0.018707433715462685, 0.012199778109788895, 0.010272212326526642, 0.0068277046084403992, 0.015466738492250443, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 6712, 2739, 1338, -1479, 4486, 8902, 8084, 1610, -153, 7679, 1069, -3195, 2507, 2647, 445, -403, 2941, 9625, -712, -8, 4495, 12759, 12955, -2222, -2989, -535, 10982, -130, 1375, 2074, 9226, -1467, 9075, 2187, 3367, -3857, 912, -3788, 359, 1591, 2291, 1013, 1514, -105, 975, 2306, 3247, 3654, 3672, 2205, 4928, 1740, -2028, 1347, 1080, 2042, 1402, 2877, 5935, 1254, -633, 4475, 3616, 2752, 4412, 5909, -3400, 2184, 6132, -1073, 5776, 1125, 2264, 3342, 3528, 3165, 11, 1376, 2388, 3316, 2311, 2379, 8577, 790, 3198, 4587, 515, -1307, 18964, -346, 560, -1387, 9909, 2550, -203, -930, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00011295922013232484, 0.00012947460345458239, 0.00016092872829176486, 0.00017383320664521307, 0.00015624718798790127, 9.5108160167001188e-05, 0.00010466991807334125, 0.00015708999126218259, 0.00024206984380725771, 9.5975257863756269e-05, 0.00018718796491157264, 0.0001310002407990396, 0.00018393319624010473, 0.00018038049165625125, 0.00024265037791337818, 0.0001386199874104932, 0.00019381218589842319, 7.8560195106547326e-05, 0.00012643366062548012, 0.00017411290900781751, 0.00014066453150007874, 7.0891102950554341e-05, 7.0892820076551288e-05, 0.00015223714581225067, 0.00019749069178942591, 0.00019806568161584437, 7.5327741797082126e-05, 0.00015533219266217202, 0.00017779543122742325, 0.00013635899813380092, 9.9195065558888018e-05, 0.00017062008555512875, 9.1336769401095808e-05, 0.00022317295952234417, 0.00019927567336708307, 0.00015569498646073043, 0.00016541025252081454, 0.00014812570589128882, 0.00015270461153704673, 0.00020048416627105325, 0.00020499266975093633, 0.00024292919260915369, 0.00023236205743160099, 0.00025530796847306192, 0.00026673637330532074, 0.00015840702690184116, 0.00017564260633662343, 0.0001661625865381211, 0.00015792851627338678, 0.00020893628243356943, 0.00013874225260224193, 0.00019813192193396389, 0.00019434731802903116, 0.00020544804283417761, 0.0001879557385109365, 0.00018712642486207187, 0.00024250645947176963, 0.00013897503959015012, 0.00012517246068455279, 0.0001692481164354831, 0.00022571139561478049, 0.00015046667249407619, 0.00016132538439705968, 0.00019289941701572388, 0.00013333007518667728, 0.00012407389294821769, 0.00015209215052891523, 0.00019062461797147989, 0.00010153600305784494, 0.00020801945356652141, 0.0001286012411583215, 0.00019032559066545218, 0.00016308734484482557, 0.00012293588952161372, 0.00015913792594801635, 0.00010659590770956129, 0.00019741166033782065, 0.00022838791483081877, 0.00018831984198186547, 0.00016522796067874879, 0.00018488329078536481, 0.00017100524564739317, 9.2923743068240583e-05, 0.00018593331333249807, 0.00012313845218159258, 0.00015418959083035588, 0.0002180080336984247, 0.00021930717048235238, 5.1952545618405566e-05, 0.00023148251057136804, 0.00026295837596990168, 0.00016520495410077274, 8.7158805399667472e-05, 0.00016183029219973832, 0.00024086215125862509, 0.00015330199676100165, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -70,34,-3,-36,-27,-67,-65,-19,65,-40,55,-39,73,-121,22,-127, 
  /* [1][0][][] */ -119,62,-108,-127,-80,28,-34,54,-50,0,82,-58,66,127,7,51, 
  /* [2][0][][] */ -42,-3,-74,-12,-8,-59,41,-63,-114,127,114,40,35,44,-34,112, 
  /* [3][0][][] */ -60,-84,6,-53,-110,20,-47,-127,-6,21,62,-82,-56,-48,-125,-30, 
  /* [4][0][][] */ 59,8,-9,25,-67,-14,-127,28,6,68,23,51,-10,-9,-36,-80, 
  /* [5][0][][] */ -95,19,-101,-31,23,-68,-20,-78,127,-32,-18,-65,40,-112,-101,-101, 
  /* [6][0][][] */ -29,-70,-16,27,-85,63,55,-39,10,-44,126,-34,1,-9,-127,29, 
  /* [7][0][][] */ -28,127,127,-58,74,95,-70,-43,73,96,-77,-16,26,6,-2,69, 
  /* [8][0][][] */ -43,-17,30,-21,35,-18,79,127,-39,-5,-63,-42,64,60,-36,-61, 
  /* [9][0][][] */ 50,26,100,15,-112,-59,-109,-126,60,11,127,40,-25,-94,28,-30, 
  /* [10][0][][] */ -23,-125,14,-83,-116,58,46,33,-22,-64,-18,14,-3,52,-127,43, 
  /* [11][0][][] */ 86,-66,21,71,-76,-43,36,-7,127,124,-57,64,8,-104,-40,127, 
  /* [12][0][][] */ -57,-45,127,-53,91,-21,50,49,97,-14,63,61,-11,28,-123,3, 
  /* [13][0][][] */ -8,-12,27,7,20,-8,127,16,-101,1,20,27,-31,94,84,-69, 
  /* [14][0][][] */ 127,-74,119,7,39,53,78,59,76,92,68,60,67,-15,66,-57, 
  /* [15][0][][] */ -5,127,13,-45,41,125,-97,77,-58,-8,-37,-5,-65,125,-19,-65, 
  /* [16][0][][] */ -47,58,117,-70,24,76,8,-17,-11,-7,-46,39,93,-7,84,127, 
  /* [17][0][][] */ -1,99,94,-127,38,-77,7,-103,-39,118,2,71,-84,-59,69,-39, 
  /* [18][0][][] */ -86,-9,-79,-80,127,89,-39,-58,55,70,125,49,8,125,-47,5, 
  /* [19][0][][] */ 55,127,70,83,44,-19,2,-3,-27,121,59,108,68,83,-52,49, 
  /* [20][0][][] */ 87,16,0,75,-99,-13,-14,45,-37,-40,-127,-60,106,-32,48,10, 
  /* [21][0][][] */ -127,-101,4,84,-23,-25,-102,78,-22,18,34,48,-36,26,-63,8, 
  /* [22][0][][] */ 5,22,-82,-49,127,5,-55,59,55,88,59,73,-20,47,9,37, 
  /* [23][0][][] */ -66,24,-31,31,39,89,127,79,-19,127,-11,-50,-14,43,-67,-27, 
  /* [24][0][][] */ 29,-72,13,8,127,35,79,-41,32,23,48,27,-54,51,-3,-6, 
  /* [25][0][][] */ 102,-48,75,22,-7,-46,-30,107,96,6,-55,-12,127,-40,77,57, 
  /* [26][0][][] */ 84,61,127,125,107,8,-90,-14,-12,70,3,123,8,-70,41,-50, 
  /* [27][0][][] */ -42,51,-78,26,-19,116,-1,-97,24,-89,127,15,48,-18,125,112, 
  /* [28][0][][] */ -42,9,-83,-107,18,-127,5,-57,-63,116,-58,37,-5,10,-48,96, 
  /* [29][0][][] */ 62,127,-51,13,39,69,-41,-34,28,67,17,81,-116,3,-22,78, 
  /* [30][0][][] */ -22,80,-122,-58,60,-52,9,21,-36,55,-63,-11,21,29,-23,127, 
  /* [31][0][][] */ 28,-127,100,43,82,-66,-115,40,-18,-12,21,-42,-101,44,31,118, 
  /* [32][0][][] */ -71,92,-16,28,-102,72,16,53,6,-127,33,-67,39,67,41,43, 
  /* [33][0][][] */ -81,-2,63,92,-3,13,-57,10,-41,-62,15,-17,-16,-7,8,127, 
  /* [34][0][][] */ -19,7,-99,-89,54,-18,-2,62,20,-5,-3,-18,-54,-27,-45,127, 
  /* [35][0][][] */ 56,15,45,-23,3,7,-93,-16,-46,-127,-39,37,-21,-23,68,-35, 
  /* [36][0][][] */ -5,31,-106,-14,35,127,-13,38,-34,10,59,20,11,18,-84,31, 
  /* [37][0][][] */ 57,25,55,-57,64,-100,49,-6,-127,47,-87,-17,20,46,106,44, 
  /* [38][0][][] */ -61,127,47,-76,27,16,107,-93,-6,-10,-110,55,-30,-97,-81,16, 
  /* [39][0][][] */ 77,44,-127,-90,-23,-3,24,-47,21,6,4,-21,65,13,-84,-61, 
  /* [40][0][][] */ -24,20,-73,-73,-50,1,8,-127,-17,-12,1,-27,22,74,32,45, 
  /* [41][0][][] */ -39,-77,6,127,3,-8,-47,-10,-10,-41,50,-55,-62,-1,8,24, 
  /* [42][0][][] */ -39,78,-34,-127,26,14,14,-10,43,6,-45,18,78,15,-3,5, 
  /* [43][0][][] */ 0,64,-5,29,127,30,48,56,5,57,17,-90,-107,-27,-6,-18, 
  /* [44][0][][] */ 81,-13,22,37,-20,-13,-13,39,26,-21,23,3,127,30,-71,-21, 
  /* [45][0][][] */ 7,-82,-73,37,-47,-107,19,63,27,-21,33,24,-98,127,57,-27, 
  /* [46][0][][] */ -43,-96,23,35,2,12,-73,79,47,-57,34,-44,33,75,42,127, 
  /* [47][0][][] */ -28,-49,10,70,8,7,48,17,15,-50,-127,-37,49,-16,-66,10, 
  /* [48][0][][] */ -94,111,-16,-48,10,74,-6,-127,30,-9,44,-45,61,-110,-42,-2, 
  /* [49][0][][] */ -41,28,25,-42,-8,16,127,121,-60,-47,-1,26,-48,51,-37,28, 
  /* [50][0][][] */ 68,16,-102,55,27,-127,-36,-12,-73,26,-46,-19,10,-105,-113,-44, 
  /* [51][0][][] */ -38,65,-16,97,-20,51,-60,-59,-39,-87,1,-64,8,41,-1,127, 
  /* [52][0][][] */ -117,16,13,-22,15,44,64,4,2,-88,-36,-52,-106,-47,-127,-12, 
  /* [53][0][][] */ -57,-88,-86,-127,-32,-14,4,119,57,-60,-75,10,-4,36,75,94, 
  /* [54][0][][] */ -5,-58,-5,22,-72,69,49,14,-3,-99,51,11,-21,-15,-127,61, 
  /* [55][0][][] */ -11,-23,-24,33,73,-43,61,66,-50,-77,-127,-32,58,-62,-19,26, 
  /* [56][0][][] */ 61,-24,-92,-46,-121,18,-127,7,-39,2,-14,35,106,-16,63,29, 
  /* [57][0][][] */ -127,-21,60,-61,126,19,55,86,-27,107,-17,-11,-67,77,-105,-13, 
  /* [58][0][][] */ 46,14,-14,-11,44,9,-65,-55,55,-127,-58,-1,-80,-36,-39,33, 
  /* [59][0][][] */ -71,-33,12,24,6,49,-108,-35,82,127,-58,28,-47,-1,-6,-9, 
  /* [60][0][][] */ 32,-51,-2,13,-127,-49,54,15,12,41,-31,50,15,-40,61,34, 
  /* [61][0][][] */ 27,48,-97,-27,-53,-14,-127,-90,-23,24,42,122,75,-56,108,66, 
  /* [62][0][][] */ 60,-18,42,20,-52,35,31,116,-44,115,6,67,27,36,127,96, 
  /* [63][0][][] */ 24,-123,-3,-17,-49,10,40,-22,-6,-16,4,-8,-35,127,93,26, 
  /* [64][0][][] */ -24,-13,-127,-45,23,73,30,-14,1,-91,36,-16,79,-26,-89,99, 
  /* [65][0][][] */ -15,19,75,41,61,-23,91,67,-83,-30,-116,-55,46,127,-55,-34, 
  /* [66][0][][] */ -63,-127,-31,-101,-45,-120,51,2,15,-34,17,67,-38,-29,-51,94, 
  /* [67][0][][] */ -7,-68,-63,-1,-60,98,-22,-127,-65,-11,-53,-94,7,-11,-56,33, 
  /* [68][0][][] */ 127,29,75,-20,-70,-16,-124,-56,-116,-118,-14,10,6,-111,30,-96, 
  /* [69][0][][] */ 51,-7,27,2,-21,-27,-46,28,10,127,-28,5,4,45,95,-29, 
  /* [70][0][][] */ 27,-8,-16,74,-127,26,-9,-96,78,117,33,47,41,-57,8,36, 
  /* [71][0][][] */ 80,-72,58,92,-54,-5,11,-16,127,25,-7,45,45,-61,32,-3, 
  /* [72][0][][] */ 20,-41,18,109,71,20,-127,71,118,1,27,17,-27,-54,-56,54, 
  /* [73][0][][] */ 77,46,71,-127,93,-89,-86,47,-28,69,-26,9,-16,-96,4,-42, 
  /* [74][0][][] */ 76,-10,41,45,-127,-31,40,6,-75,-46,13,-46,30,-64,15,25, 
  /* [75][0][][] */ 88,121,-102,30,67,65,-36,-28,-15,-29,43,69,-127,63,73,73, 
  /* [76][0][][] */ -97,-28,0,-51,-52,-20,97,7,-74,34,95,57,-60,-127,-12,98, 
  /* [77][0][][] */ -50,127,-25,23,-61,-34,35,95,51,-73,-44,54,-1,41,2,54, 
  /* [78][0][][] */ 98,34,-44,13,-40,27,-127,-34,0,-19,-72,-12,49,-98,-2,50, 
  /* [79][0][][] */ -53,-25,127,40,-30,-108,-66,-80,-9,14,5,30,-76,102,-81,56, 
  /* [80][0][][] */ 57,101,28,-127,-6,22,83,-35,10,23,-24,24,75,-57,8,-13, 
  /* [81][0][][] */ 61,-36,8,-107,83,83,-35,113,127,21,-19,-53,-29,23,-89,-90, 
  /* [82][0][][] */ 64,45,95,-29,122,-127,61,42,-29,102,-41,32,9,-47,41,-105, 
  /* [83][0][][] */ -68,65,23,-31,100,38,127,106,3,49,-12,-41,-110,62,-31,-76, 
  /* [84][0][][] */ 6,-80,-6,114,-11,-104,-127,64,-95,73,-67,-4,-123,90,1,-84, 
  /* [85][0][][] */ -121,50,-46,-7,-23,-33,-40,-4,-20,37,12,-84,-127,-75,-56,45, 
  /* [86][0][][] */ 5,48,91,127,21,-36,65,12,20,8,-46,-74,28,87,-101,-44, 
  /* [87][0][][] */ -19,48,127,-33,-98,-41,30,7,32,-30,23,47,-52,12,-10,-2, 
  /* [88][0][][] */ -45,-87,-106,-8,37,18,2,21,-20,-104,-93,-90,127,-15,3,55, 
  /* [89][0][][] */ 27,9,11,-107,1,-64,-58,58,127,11,19,-95,3,-26,44,-62, 
  /* [90][0][][] */ -7,58,17,20,-40,36,49,127,16,-49,-17,124,65,14,-30,79, 
  /* [91][0][][] */ -79,-34,7,47,72,24,-33,-86,-58,12,-8,29,-106,-127,-41,-17, 
  /* [92][0][][] */ -45,50,13,-34,-127,-9,-69,60,-36,71,81,63,6,-36,41,20, 
  /* [93][0][][] */ 78,28,83,48,-127,-77,32,42,-18,-49,-21,-50,26,-48,10,6, 
  /* [94][0][][] */ -32,-127,27,-120,11,40,-29,3,66,-33,7,48,5,83,-50,50, 
  /* [95][0][][] */ -35,-57,-14,-63,127,118,-48,30,81,40,-88,91,-32,113,-107,-7, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0014536279486492276, 0.0016661578556522727, 0.0020709286909550428, 0.0022369914222508669, 0.0020106837619096041, 0.0012239096686244011, 0.0013469561235979199, 0.0020215294789522886, 0.0031151019502431154, 0.001235067960806191, 0.0024088486097753048, 0.0016857908340170979, 0.0023669642396271229, 0.0023212458472698927, 0.0031225725542753935, 0.0017838462954387069, 0.0024940930306911469, 0.0010109603172168136, 0.001627025194466114, 0.0022405907511711121, 0.0018101567402482033, 0.00091226981021463871, 0.00091229187091812491, 0.001959080109372735, 0.0025414302945137024, 0.0025488296523690224, 0.0009693631436675787, 0.0019989090505987406, 0.0022879797033965588, 0.0017547504976391792, 0.0012765023857355118, 0.0021956430282443762, 0.0011753770522773266, 0.0028719252441078424, 0.0025644004344940186, 0.002003577770665288, 0.0021285996772348881, 0.0019061715574935079, 0.0019650957547128201, 0.0025799521245062351, 0.0026379702612757683, 0.0031261604744940996, 0.0029901762027293444, 0.0032854580786079168, 0.0034325257875025272, 0.0020384779199957848, 0.0022602758836001158, 0.0021382812410593033, 0.0020323202479630709, 0.002688719192519784, 0.0017854196485131979, 0.0025496820453554392, 0.0025009794626384974, 0.0026438303757458925, 0.0024187287781387568, 0.0024080565199255943, 0.0031207206193357706, 0.0017884152475744486, 0.0016107952687889338, 0.0021779877133667469, 0.0029045913834124804, 0.0019362966995686293, 0.0020760330371558666, 0.0024823469575494528, 0.0017157724360004067, 0.0015966582577675581, 0.0019572142045944929, 0.0024530733935534954, 0.0013066270621493459, 0.0026769207324832678, 0.0016549188876524568, 0.0024492254015058279, 0.0020987070165574551, 0.0015820137923583388, 0.0020478835795074701, 0.0013717409456148744, 0.0025404132902622223, 0.0029390344861894846, 0.0024234142620116472, 0.0021262539085000753, 0.0023791906423866749, 0.0022005995269864798, 0.0011957992101088166, 0.0023927029687911272, 0.0015846204478293657, 0.0019842053297907114, 0.0028054600115865469, 0.0028221779502928257, 0.00066855695331469178, 0.0029788576066493988, 0.0033839081879705191, 0.0021259577479213476, 0.001121612498536706, 0.0020825306419283152, 0.0030995605047792196, 0.0019727833569049835, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -27767, -3169, 8071, -12040, 4931, -17036, 22709, -5195, 6805, -6702, 14530, 14030, -301, -32387, 3185, 5825, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 7.3232658905908465e-05, 5.6140328524634242e-05, 5.2305600547697395e-05, 5.4718726460123435e-05, 9.2250244051683694e-05, 0.00013636166113428771, 6.9697358412668109e-05, 6.3927152950782329e-05, 0.00011205233749933541, 8.9936169388238341e-05, 0.00010619370004860684, 7.851694681448862e-05, 9.0693312813527882e-05, 8.6809384811203927e-05, 7.4013951234519482e-05, 7.4277362728025764e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 24,34,23,11,-26,-90,-12,7,-14,-70,-6,-14,60,-69,65,31,-84,-38,32,-3,86,18,-59,14,9,68,127,62,-5,75,59,-37,21,3,-3,-34,39,37,-12,-11,115,17,17,-11,2,-15,21,-21,31,-24,99,6,-65,-17,51,22,-20,-40,-7,15,-16,39,-64,9,17,8,60,23,12,-34,25,16,3,37,10,36,67,-32,46,37,-20,39,37,42,-46,-5,-7,70,24,15,-94,-5,30,-3,104,84, 
  /* [1][0][][] */ 21,53,-69,-18,-15,-63,89,-70,-64,-27,-69,-48,-8,-55,-25,-63,-36,-11,-32,-14,-24,-118,123,-57,15,10,9,56,-54,6,-45,13,-27,26,13,10,-15,54,-55,98,32,8,-12,-40,70,-73,-17,41,-84,-9,59,-104,-34,40,70,74,43,20,-57,16,-47,18,-19,-12,34,25,101,-11,-45,-127,-8,0,26,80,-17,53,-44,-29,105,-33,50,-15,52,-82,-34,-61,-14,8,-7,-52,36,-1,94,-73,-54,67, 
  /* [2][0][][] */ 0,-22,11,-5,77,52,-51,30,-59,39,17,-34,20,-10,18,30,22,-19,-127,-9,-13,-64,-20,16,-5,-9,-48,21,-29,-26,-29,69,-20,-37,-6,21,-46,17,-21,-17,66,16,0,40,9,52,3,-14,-85,10,-18,1,-30,59,7,-72,39,9,52,35,-18,-25,-22,47,32,-13,-49,-9,-28,10,-17,-33,29,60,23,69,-55,-5,-33,-52,34,30,48,-31,-21,-55,-19,-53,-17,-35,-21,59,-4,17,92,-51, 
  /* [3][0][][] */ 34,-62,-14,-110,-22,-20,108,-27,13,127,-98,-5,8,-26,-16,57,66,42,-32,16,-41,16,24,9,-36,76,43,-4,-64,-16,-38,75,-1,-13,31,-29,3,-41,-10,54,6,16,-21,32,65,-46,-17,46,47,-22,29,-40,104,23,23,-20,-3,-22,3,-41,-37,39,63,3,-22,-22,103,-53,-24,-12,-44,17,19,-77,11,-76,20,-61,118,1,6,-53,-28,-43,-26,-41,79,80,-58,42,-59,0,20,-97,-16,68, 
  /* [4][0][][] */ -35,71,30,1,-30,4,-36,-6,24,-37,12,-12,23,40,-16,26,-13,-42,-16,-63,26,-33,-58,3,-26,-22,-15,14,-42,127,-47,-18,12,-27,5,-26,53,50,-33,-9,23,16,25,-32,-36,-4,57,-10,29,-18,-44,6,-67,21,48,39,5,70,-15,17,-46,-49,-30,-2,52,35,-48,1,2,-15,10,-62,-3,69,64,81,-30,18,-44,49,19,65,23,-44,56,-69,-21,-63,-31,-57,-43,10,3,3,35,-16, 
  /* [5][0][][] */ -1,-14,43,-25,-13,-34,-19,16,47,10,-15,-1,-21,-25,29,-15,-5,-11,-55,-40,-24,10,-15,16,33,-46,59,-16,-8,45,14,78,-5,-80,21,7,-36,-23,-45,-5,-46,-3,-26,21,3,30,-67,37,-11,24,53,-4,27,-78,23,22,-36,-43,-7,-38,38,34,24,62,-35,24,108,-30,1,-41,17,9,-6,29,38,14,0,-3,127,49,-20,-16,-24,42,42,60,7,89,9,-35,-7,28,27,-18,-32,26, 
  /* [6][0][][] */ 14,-76,50,16,-31,115,-50,-98,-47,-70,-46,57,-6,23,-31,71,5,50,21,-30,-89,-42,-90,-71,10,-55,-11,63,-82,37,6,-25,7,84,11,0,-4,-35,47,-29,-41,41,28,-18,26,70,-109,-23,33,5,-64,-127,53,19,-36,-14,27,-8,53,-8,-24,-42,19,-27,47,-73,-81,-48,-76,42,-9,-65,-14,-73,22,-80,79,-9,-85,32,-10,77,28,-92,52,-14,-8,0,-84,40,-80,72,40,-35,66,-87, 
  /* [7][0][][] */ -9,-22,-62,49,-32,-4,32,-15,-97,-5,93,46,-7,-52,-9,-42,-5,9,5,5,-52,-35,-46,-42,54,49,-7,55,-1,17,24,29,-61,-127,30,97,-6,8,-21,14,-5,-6,12,-70,25,46,53,58,-10,35,-51,-18,28,-23,31,-46,-11,22,-43,-10,60,-8,4,-50,63,-57,103,-14,-61,-2,66,9,-12,-26,-80,-31,30,-46,94,-45,13,-21,-68,-44,35,16,-78,42,-14,13,1,12,49,7,79,-14, 
  /* [8][0][][] */ -8,-56,12,-8,-24,-18,20,23,-5,-7,50,43,12,31,-24,-7,69,-5,13,-4,-6,-82,-27,-27,-17,-24,66,5,-25,48,16,-29,-9,6,5,-7,-43,-12,15,-37,-3,41,14,-26,28,-11,25,7,41,12,54,8,7,11,-25,15,-25,110,-64,-9,-26,-57,-51,5,-81,-13,-9,8,-1,-1,40,-21,-24,-127,44,-93,18,14,-47,22,-20,-5,3,72,65,-61,-39,48,-32,91,10,1,-38,9,1,-44, 
  /* [9][0][][] */ -23,-35,-31,29,13,35,3,22,-54,6,58,54,-26,58,20,-45,-18,36,-13,-36,-6,47,-10,10,-32,16,11,16,32,-6,22,-3,-27,-25,4,46,-22,-12,35,-1,-14,-29,12,-3,10,51,-9,25,-58,2,-5,29,123,27,-26,1,19,-19,58,21,-26,-4,77,5,9,11,58,16,31,3,-23,20,11,-127,-38,-122,-38,-17,33,-5,-2,30,5,-48,39,12,-48,-5,-7,105,42,14,45,21,-7,23, 
  /* [10][0][][] */ 26,38,9,9,0,27,-39,-38,56,12,-45,19,19,13,-9,-56,-33,4,17,5,21,-3,-25,-22,7,-24,-93,47,-16,53,-4,12,12,18,-14,4,5,-4,7,5,36,-15,62,-46,-40,4,12,15,10,-9,10,-21,-18,-6,-11,37,-4,3,0,-3,-7,-44,-5,0,-5,-25,-90,-13,-52,-11,40,-9,-18,25,28,10,41,-18,-97,6,-17,33,-3,-6,0,4,-71,-127,-29,24,13,5,43,-38,19,23, 
  /* [11][0][][] */ 21,-41,1,15,-47,36,15,-4,72,-15,-18,-51,25,13,1,-4,-27,70,30,-60,4,37,8,-32,30,10,75,-3,33,-62,-33,13,9,101,-110,8,8,-22,65,23,-55,45,-16,13,-52,-14,-24,-27,40,-29,-27,-24,-25,31,-88,96,-26,-12,15,-34,41,-13,-22,-81,-9,-65,-127,-76,-1,-18,-98,24,60,26,-12,3,30,50,-110,-48,-15,-1,-23,-15,-30,-7,58,88,18,-63,18,-9,-42,30,86,28, 
  /* [12][0][][] */ 11,31,-42,-27,17,-28,-3,39,63,-41,34,-12,-8,-15,-11,12,11,-42,-22,11,14,40,-6,57,-33,-43,-127,-4,75,-35,34,-4,-39,-83,63,-6,42,-19,12,22,0,-59,9,30,39,-12,22,-26,-81,-4,-59,80,77,-5,20,-82,17,19,-26,-28,23,43,75,0,-23,-10,22,19,113,45,23,26,0,-18,-27,-11,-35,-65,40,-79,30,-54,34,-39,-11,11,1,-106,-11,39,-45,1,13,92,12,42, 
  /* [13][0][][] */ -26,26,-76,9,3,2,-13,6,25,49,-28,42,-49,-25,67,-47,9,52,63,-4,-27,-52,-9,13,47,52,-20,30,-4,36,79,-17,-12,72,6,43,21,-35,-50,-53,16,-8,11,30,54,64,-36,51,-39,43,13,14,-16,-45,73,46,13,-37,1,-8,13,30,4,-35,11,90,127,33,35,1,-45,-18,39,48,-80,51,26,-65,118,-33,-2,-31,26,15,32,59,-27,-32,-17,-15,2,57,45,21,53,64, 
  /* [14][0][][] */ -12,72,10,22,-60,-54,20,35,-63,-28,56,-7,-69,3,74,-25,-32,47,-68,21,-17,16,-109,4,-29,9,-44,-109,-7,-4,37,73,-56,20,-7,-18,-11,-62,-3,-30,12,-37,32,-13,-5,38,-75,29,-27,-40,75,18,-14,4,-18,18,-47,9,17,35,57,52,-23,48,8,-41,-8,-80,42,69,49,19,-41,48,-2,25,26,-16,31,14,-62,110,-3,-127,76,-12,-15,13,-102,-19,-21,-16,-18,12,44,48, 
  /* [15][0][][] */ 63,-18,12,34,43,4,-9,-18,25,34,-41,-19,69,60,-15,-20,-9,6,-71,51,-9,-22,6,29,44,-38,87,26,44,-33,-51,56,49,39,-4,-70,50,61,50,67,82,39,-11,-3,-43,-127,33,-44,-39,-27,-25,-2,-13,-33,-31,61,-8,4,-13,13,4,-56,-36,18,40,41,-59,58,-13,-22,-4,-1,0,-111,-49,-103,-29,22,-105,20,64,-35,37,18,-56,-6,-12,-23,40,83,16,-69,-33,-32,25,-54, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0031123880762606859, 0.0023859639186412096, 0.0022229880560189486, 0.0023255457635968924, 0.0039206352084875107, 0.0057953707873821259, 0.0029621378052979708, 0.0027169038075953722, 0.0047622243873775005, 0.0038222870789468288, 0.0045132320374250412, 0.0033369702287018299, 0.0038544656708836555, 0.0036893987562507391, 0.0031455929856747389, 0.0031567877158522606, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 8269, -342, -5226, 9351, -756, -1436, 1969, -945, 5787, -4054, -260, -1750, 8800, -3756, -657, -4741, 90, -893, -7379, -941, -1997, 3023, -6141, 371, 22, 6066, -7173, -5189, -4462, -1305, -553, -2077, 19814, -805, -1983, 731, -367, 11808, 3476, 12887, -1396, 2261, 1820, 7934, -734, -1239, 8632, 1638, -4898, 380, -2029, 2539, -1559, -2056, -222, 1886, 716, 933, 102, 662, -2374, -1082, -3636, 6700, 10320, -1404, 12862, 3163, 470, -1622, 9918, 1211, 187, 539, -245, -309, 14043, 12472, 10665, 6607, 9111, -1085, 6327, 10483, -1179, -2321, 13284, -6870, 13893, 373, -8351, 411, 534, -278, 14644, -266, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00012036397674819455, 0.00039763547829352319, 0.00017482983821537346, 0.00012820222764275968, 0.00025947543326765299, 0.00064924376783892512, 0.00010186184954363853, 0.00024074384418781847, 0.00027713959570974112, 0.00024111196398735046, 0.00022936156892683357, 0.00019995463662780821, 9.8532975243870169e-05, 0.00015620436170138419, 0.00025317777181044221, 0.00022960084606893361, 0.0003266595012973994, 0.00048667661030776799, 0.00014384553651325405, 0.0002999555435962975, 0.00026096313376910985, 0.00023489362502004951, 0.00011589191854000092, 0.00020847073756158352, 0.002970187459141016, 0.00017714650311972946, 0.00029179989360272884, 0.00015372502093669027, 0.00035410825512371957, 0.00019033663556911051, 0.00022747043112758547, 0.00026509416056796908, 5.7356908655492589e-05, 0.00042362502426840365, 0.0001581846154294908, 0.00020376827160362154, 0.0003361841372679919, 8.7871492723934352e-05, 0.00019934157899115235, 0.00010262840805808082, 0.00065891619306057692, 0.0002993441594298929, 0.00024146429495885968, 0.0001213688010466285, 0.00014842175005469471, 0.00034963179496116936, 0.00016185062122531235, 0.00031609405414201319, 0.00019113878079224378, 0.00035938885412178934, 0.0003328146121930331, 0.00020770182891283184, 0.00015297216305043548, 0.00041583905112929642, 0.0003024513425771147, 0.0003509072121232748, 0.00015726759738754481, 0.00062640674877911806, 0.00047620243276469409, 0.00032271692180074751, 0.00031171078444458544, 0.00028877108707092702, 0.00013979586947243661, 0.00013572406896855682, 0.00022047710081096739, 0.00058802840067073703, 0.00012559916649479419, 0.00028559405473060906, 0.00027783433324657381, 0.00041549609159119427, 0.00010144444240722805, 0.00024621112970635295, 0.00046755984658375382, 0.00020794066949747503, 0.00020621035946533084, 0.00024213163123931736, 8.3845225162804127e-05, 0.00013222574489191175, 0.00012119339226046577, 0.0002066294546239078, 0.00010741651203716174, 0.00026411493308842182, 0.00011825442197732627, 0.0003235795593354851, 0.00011392190936021507, 0.00033093456295318902, 0.00012325600255280733, 0.00019879124010913074, 9.7076495876535773e-05, 0.00024850512272678316, 0.00010622518311720341, 0.00022937556786928326, 0.00029236340196803212, 0.00018014207307714969, 0.00011246607755310833, 0.00029266180354170501, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -33,-20,14,-50,75,6,15,-18,-9,-4,-12,-7,-21,12,-9,-16,-17,7,-27,-21,-9,33,-27,42,-2,-16,-46,-4,25,-3,18,18,18,5,-10,-19,-6,-52,-45,-7,-4,-30,19,-27,-25,46,-41,-26,-21,-3,-14,51,-58,-15,35,-19,14,0,8,-4,4,-17,13,-35,-10,-16,-46,-13,-23,34,-1,-13,13,2,-24,-5,-5,8,127,-63,-85,9,-127,-40,-42,-21,-7,18,-25,-9,-5,-34,-10,43,28,-3, -47,39,63,-127,-26,1,127,-53,-14,-13,-34,10,-127,0,-99,63,-15,65,54,-34,-7,127,44,127,26,17,42,89,127,67,127,-21,-122,-10,-83,-42,-22,-54,127,-52,-35,-127,-12,-52,67,-32,-27,-9,41,-5,20,124,-64,30,-78,-8,-79,7,-9,32,-2,-127,-120,-25,-78,14,-5,-63,-12,28,-64,70,-127,-8,1,-29,-127,-83,8,-127,-68,12,13,-68,127,81,-58,48,-92,-4,63,-18,3,127,-53,-108, -23,-15,-5,-39,66,10,54,-25,-34,9,-11,14,14,-1,-6,-15,-15,-3,-59,-24,-13,9,1,25,5,2,3,-9,5,4,11,18,9,5,-18,51,-1,-60,-25,16,-3,30,2,-6,-13,-22,-39,-26,-16,9,-8,29,33,-21,-3,-16,63,-9,9,-17,13,-6,-45,1,-35,-31,120,-2,-19,34,6,-8,16,5,-24,6,19,29,-31,-35,-127,8,-118,-34,19,-24,2,-19,-77,-44,-2,38,-3,34,-4,1, 
  /* [0][1][][] */ -69,-6,43,-51,39,84,-81,-26,-13,-5,-24,-27,-120,36,26,46,-20,43,127,17,30,-17,92,-23,18,20,52,4,7,-7,-4,-7,-98,-14,69,-2,-4,-108,-83,-118,-13,10,80,-56,-84,127,-82,-86,49,52,12,-45,-99,64,69,-28,46,-23,34,-9,7,-9,112,-127,-33,21,-21,-27,-22,-1,-121,9,56,127,-2,-73,-76,-71,-70,-15,-69,-16,-24,-71,33,17,-119,64,-73,127,82,-102,127,6,-34,-4, 62,127,127,127,-127,-127,110,-57,127,127,-73,-67,-62,127,-26,127,127,-127,121,127,127,-115,127,-113,-127,-127,127,127,-90,127,-12,127,-127,127,127,-118,127,90,-1,-14,127,32,-127,-127,127,-22,127,127,127,-127,127,-127,113,127,-127,127,-127,127,-127,127,-81,120,116,-56,127,127,-15,127,-107,-127,-17,-127,11,114,127,68,4,-127,103,-76,47,127,109,127,116,80,-127,127,-123,53,18,-28,-95,-32,-127,-24, -127,-23,14,-66,12,66,-81,-2,-53,-18,-3,127,-114,31,16,27,-30,50,58,5,7,-24,76,-23,27,10,34,0,2,-28,13,-8,-104,-26,73,127,3,-127,-88,-97,-23,18,9,-45,-60,-51,-67,-100,40,63,1,-29,127,-6,92,-37,103,-29,50,-37,11,-29,-115,-77,-73,-9,-56,-34,-26,10,-127,-10,34,-93,-4,127,-41,-86,-55,62,-60,-20,-42,-71,0,38,-94,62,-127,-77,127,127,-51,-19,-67,-9, 
  /* [0][2][][] */ -35,-46,-35,-26,37,10,-14,34,-18,8,34,-47,74,15,-17,-36,3,5,-55,-8,-9,-25,31,-30,-5,8,0,6,18,-28,-15,18,-13,1,2,-35,-2,-21,-28,-31,-10,38,20,1,50,21,-81,12,-27,-4,-27,-29,1,-38,39,-9,4,-22,12,-18,8,25,1,-16,-42,-18,127,15,27,26,-24,-10,-8,3,-30,-30,-38,5,-47,-29,12,8,-61,-30,-25,-3,22,-31,-2,3,0,-31,-7,-12,-5,-2, -37,-59,35,-98,-34,2,66,127,-67,57,127,-38,-64,16,127,62,-6,-26,84,-41,-11,-64,98,3,19,3,26,22,4,-8,-75,-39,-116,-23,-84,-25,-93,-120,58,-127,-10,-64,-36,126,52,-16,-45,4,27,-6,-28,-25,44,19,-52,-44,-73,-48,41,-49,127,37,127,-10,-111,-41,-27,-28,127,33,-66,-4,31,-31,8,-15,-14,-45,-1,100,-86,-20,-53,-60,28,-127,-20,0,-15,3,70,-8,16,-106,-51,127, -19,27,-24,-29,38,10,15,25,-35,-5,18,47,74,4,-21,-25,-2,20,-54,-21,-19,-22,19,-25,-8,-7,-39,-6,13,-20,-28,6,-39,7,-6,-10,0,-78,-19,-28,-18,-16,-17,-7,35,-5,-83,24,-25,-14,-25,-32,-3,-50,23,-5,37,-17,16,-26,16,30,16,29,-12,-27,-35,11,28,14,-42,-23,-36,-60,-28,9,-1,-17,96,39,7,0,-48,5,-16,12,29,10,-69,4,-11,14,-5,-13,-2,-4, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0051154689863324165, 0.016899507492780685, 0.0074302679859101772, 0.0054485946893692017, 0.011027705855667591, 0.027592860162258148, 0.0043291286565363407, 0.010231613181531429, 0.011778432875871658, 0.010247258469462395, 0.0097478665411472321, 0.0084980716928839684, 0.0041876514442265034, 0.0066386852413415909, 0.010760054923593998, 0.0097580356523394585, 0.01388302817940712, 0.020683756098151207, 0.0061134351417422295, 0.012748110108077526, 0.011090933345258236, 0.0099829789251089096, 0.0049254065379500389, 0.0088600059971213341, 0.12623296678066254, 0.0075287260115146637, 0.01240149512887001, 0.0065333130769431591, 0.015049600973725319, 0.0080893067643046379, 0.0096674934029579163, 0.011266501620411873, 0.0024376686196774244, 0.01800406351685524, 0.0067228460684418678, 0.0086601516231894493, 0.014287825673818588, 0.0037345383316278458, 0.0084720170125365257, 0.0043617072515189648, 0.028003938496112823, 0.012722127139568329, 0.010262232273817062, 0.0051581738516688347, 0.0063079241663217545, 0.014859350398182869, 0.006878651212900877, 0.013433996587991714, 0.0081233978271484375, 0.015274026431143284, 0.014144620858132839, 0.0088273277506232262, 0.006501317024230957, 0.017673159018158913, 0.012854181230068207, 0.014913556165993214, 0.0066838730126619339, 0.026622286066412926, 0.020238602533936501, 0.013715469278395176, 0.013247707858681679, 0.012272771447896957, 0.0059413244016468525, 0.0057682730257511139, 0.0093702767044305801, 0.02499120682477951, 0.0053379647433757782, 0.012137747369706631, 0.011807958595454693, 0.01765858381986618, 0.0043113888241350651, 0.010463972575962543, 0.019871292635798454, 0.0088374782353639603, 0.0087639400735497475, 0.010290593840181828, 0.0035634220112115145, 0.0056195938959717751, 0.0051507190801203251, 0.0087817516177892685, 0.0045652016997337341, 0.011224884539842606, 0.005025812890380621, 0.013752130791544914, 0.0048416811041533947, 0.014064718969166279, 0.005238379817456007, 0.0084486277773976326, 0.0041257510893046856, 0.010561468079686165, 0.0045145703479647636, 0.0097484616562724113, 0.012425444088876247, 0.0076560378074645996, 0.0047798082232475281, 0.012438125908374786, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1047, 4765, 199, 978, 3601, 11769, 11, 1666, 11170, -434, 12133, 4267, 1114, 315, 4369, 351, 2204, 3734, -329, 8544, 711, 7166, -1004, 916, -7747, 944, 2330, 1654, 6128, 1641, 3229, 2907, 1452, 9622, 5139, 4521, 3150, 2247, 2576, 2355, 16081, 1677, 2373, 1639, 2640, 5814, 5335, 5264, 678, -473, 1454, 5008, 2842, -2876, 6849, 45, 2848, 13683, 1144, 1319, 2055, 9007, 2953, -292, 9477, 7783, 1420, 3048, 5846, 4168, 1583, 1758, -3023, 5242, 2110, 2668, 326, 10765, 3990, 7669, 2024, 818, 3454, 13203, 474, 6503, 5557, 1429, -423, 2186, 1280, 9176, 3114, 2227, 3460, 5260, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00025248297606594861, 0.00015471418737433851, 0.00030041742138564587, 0.00033214723225682974, 0.00018667904078029096, 7.8268873039633036e-05, 0.00027932989178225398, 0.00014074743376113474, 7.989871664904058e-05, 0.00020576464885380119, 6.8493551225401461e-05, 0.00012926780618727207, 0.00023853866150602698, 0.00045752231380902231, 0.00013853584823664278, 0.00017516114166937768, 0.00026994186919182539, 0.00017721160838846117, 0.00025652878684923053, 9.9898505141027272e-05, 0.00029552594060078263, 0.00010105643741553649, 0.00020881755335722119, 0.00025067874230444431, 9.6818679594434798e-05, 0.00018731814634520561, 0.00021433160873129964, 0.00024954395485110581, 0.0001404296635882929, 0.00021724466932937503, 0.00019703707948792726, 0.00019437973969615996, 0.00028014543931931257, 8.4429906564764678e-05, 0.00011733834253391251, 0.00013531517470255494, 0.00018293384346179664, 0.00018621231720317155, 0.00017123557336162776, 0.0001927804114529863, 5.8311485190642998e-05, 0.00018807913875207305, 0.00017978101095650345, 0.00014255772111937404, 0.00015484289906453341, 0.00012952115503139794, 0.00013186578871682286, 0.00013332060188986361, 0.00033202036865986884, 0.00033891381463035941, 0.00030274022719822824, 0.00014786185056436807, 0.00017027954163495451, 0.00014321862545330077, 0.00010797764116432518, 0.00044251899817027152, 0.0001384925126330927, 6.9349138357210904e-05, 0.00020945689175277948, 0.00019004964269697666, 0.0001910417340695858, 9.842996223596856e-05, 0.00019976944895461202, 0.00022367363271769136, 9.5087430963758379e-05, 0.00011765646922867745, 0.00027926836628466845, 0.000204148527700454, 0.00014443296822719276, 0.00010408929665572941, 0.00029296497814357281, 0.00018890576029662043, 0.00019758529379032552, 0.00013840069004800171, 0.00020151591161265969, 0.00023848550335969776, 0.00025881448527798057, 7.7349221101030707e-05, 0.00015977832663338631, 0.00011752411228371784, 0.00017705078062135726, 0.00022980803623795509, 0.00014483135601039976, 7.7809927461203188e-05, 0.00015591710689477623, 0.00010991360613843426, 0.0001316559937549755, 0.00027065191534347832, 0.00027026183670386672, 0.0002517246175557375, 0.00017481748363934457, 9.3635157099924982e-05, 0.00017193781968671829, 0.00015534144768025726, 0.0001482033112552017, 0.0001376631116727367, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 63,-11,4,54,-119,-14,127,43,75,89,-47,46,12,7,20,84, 
  /* [1][0][][] */ -17,16,-72,-3,127,91,-6,24,-27,32,-61,46,-75,92,-58,-68, 
  /* [2][0][][] */ -38,48,79,-8,57,77,11,34,34,-5,33,-19,50,-127,-7,7, 
  /* [3][0][][] */ 127,-31,21,15,33,28,6,5,36,16,-49,-18,-32,43,-35,49, 
  /* [4][0][][] */ -69,-32,7,28,-114,-6,-95,-38,5,31,-8,-76,-1,15,-31,127, 
  /* [5][0][][] */ -127,-25,33,-12,127,39,23,50,-49,18,5,21,-41,93,-79,-34, 
  /* [6][0][][] */ -127,21,-43,30,-16,-68,89,23,15,-44,-35,46,12,-4,-38,23, 
  /* [7][0][][] */ 48,127,106,-76,111,52,124,-34,61,70,1,82,87,11,31,-36, 
  /* [8][0][][] */ -33,-22,-94,41,-48,104,-40,-60,49,-42,107,71,127,57,-116,-1, 
  /* [9][0][][] */ -33,-127,-17,64,-32,-65,-28,62,62,66,4,66,-103,-1,-21,-32, 
  /* [10][0][][] */ -33,-69,-91,25,-94,127,67,-89,54,-82,6,-34,50,108,-44,74, 
  /* [11][0][][] */ -58,-84,-24,22,-5,76,36,-8,5,20,64,-92,12,127,-115,97, 
  /* [12][0][][] */ -6,-100,-73,106,-103,-127,23,48,59,77,-32,100,6,-61,-26,-17, 
  /* [13][0][][] */ -59,-25,-36,2,-15,-5,22,19,-18,127,-19,-24,34,27,11,-15, 
  /* [14][0][][] */ -127,-37,-36,-87,-19,100,-43,-85,103,-48,61,12,67,-84,-71,-101, 
  /* [15][0][][] */ -3,-127,106,-53,-60,-45,-2,63,13,-41,-84,-39,72,-37,-26,-45, 
  /* [16][0][][] */ -11,-41,23,-58,29,44,-8,-25,64,-127,37,-10,7,4,-66,-98, 
  /* [17][0][][] */ -26,24,49,-53,26,-21,-25,22,57,-46,40,74,107,-50,-12,-127, 
  /* [18][0][][] */ 55,-9,-38,-94,-16,-27,127,-17,12,33,0,46,7,80,-12,-92, 
  /* [19][0][][] */ -57,-41,-40,-72,-97,73,-13,20,50,-63,18,-127,-23,3,-16,17, 
  /* [20][0][][] */ 13,55,78,-89,79,2,-61,99,-96,-108,38,-63,-51,127,-28,-24, 
  /* [21][0][][] */ -44,-111,-89,0,86,16,108,127,-84,-127,-27,29,96,-88,16,50, 
  /* [22][0][][] */ 57,-12,81,-4,-19,-4,41,35,15,125,44,31,-18,-22,127,-21, 
  /* [23][0][][] */ -127,-52,-7,29,42,45,20,28,4,0,2,-77,1,41,43,92, 
  /* [24][0][][] */ 7,-5,37,22,14,-86,5,-58,17,127,-107,76,-33,-70,66,-64, 
  /* [25][0][][] */ 127,-62,90,124,64,-2,-13,26,-111,85,54,-55,-3,42,46,-7, 
  /* [26][0][][] */ -25,22,11,44,-52,118,-18,39,-62,-33,-78,39,1,29,43,-127, 
  /* [27][0][][] */ 34,0,-11,-48,-48,-2,-84,18,-102,-24,-72,-42,-76,37,-12,127, 
  /* [28][0][][] */ -66,31,24,13,17,-34,-127,17,-8,-33,-12,-8,15,-34,-71,-26, 
  /* [29][0][][] */ -25,-86,-15,73,-33,9,127,-5,61,61,-113,48,25,-26,-55,74, 
  /* [30][0][][] */ 36,-53,-52,17,-127,4,23,-30,4,17,23,-11,-16,25,4,54, 
  /* [31][0][][] */ -127,-18,11,97,-21,-2,-61,-5,-10,-49,-4,-44,-32,-62,-14,73, 
  /* [32][0][][] */ -127,-84,-99,-5,-76,-43,5,-27,112,64,-40,-66,54,58,19,-6, 
  /* [33][0][][] */ 0,20,-110,45,-127,-90,58,-6,-112,9,-58,-48,-30,91,67,64, 
  /* [34][0][][] */ 50,105,49,83,-91,-82,21,6,-14,-122,-30,46,-70,16,62,127, 
  /* [35][0][][] */ 41,-21,-86,-27,-127,-1,108,-32,19,68,21,-6,39,95,18,74, 
  /* [36][0][][] */ -15,-29,-51,60,127,-6,29,76,-93,31,-85,-79,10,-40,19,0, 
  /* [37][0][][] */ -106,52,3,-63,41,-103,-41,-34,-14,-15,-13,50,43,-63,11,-127, 
  /* [38][0][][] */ 54,113,49,-46,-107,-64,-127,-84,-70,-64,21,30,-49,-94,47,-12, 
  /* [39][0][][] */ -16,-48,-7,69,17,77,73,-44,-37,55,23,-29,-16,127,30,117, 
  /* [40][0][][] */ 127,30,88,87,-38,-73,-2,25,-76,84,-25,-29,-42,-56,121,-49, 
  /* [41][0][][] */ -28,1,3,62,-100,106,-13,77,-70,37,-110,14,10,46,59,-127, 
  /* [42][0][][] */ 1,-123,24,-29,127,23,73,38,-39,-123,-81,-8,-25,10,18,47, 
  /* [43][0][][] */ -46,-92,-52,-10,127,18,-12,113,-66,-50,-108,-50,113,8,-71,50, 
  /* [44][0][][] */ -43,-59,-38,-92,2,63,67,18,-29,-127,-61,48,-25,30,41,98, 
  /* [45][0][][] */ -3,-48,-59,-7,-127,56,-22,-68,45,-44,19,-53,-12,9,-34,55, 
  /* [46][0][][] */ 29,-62,-5,10,67,-89,-11,74,-24,-20,22,65,-45,-34,48,-127, 
  /* [47][0][][] */ -69,-31,-3,119,-3,-5,18,33,-18,127,66,80,-21,93,-3,108, 
  /* [48][0][][] */ 50,-10,-68,-73,29,-62,4,46,47,-72,18,33,-55,0,-35,-127, 
  /* [49][0][][] */ 44,42,0,24,1,-28,55,64,-41,127,-30,49,-41,6,56,74, 
  /* [50][0][][] */ -14,-6,12,3,-127,-14,-6,-29,41,14,26,45,-26,-48,13,5, 
  /* [51][0][][] */ -12,-3,-11,-127,-30,93,39,-24,13,5,44,-37,45,65,-31,16, 
  /* [52][0][][] */ 9,-36,-6,-80,110,-113,-22,-22,47,-6,127,-63,50,27,-43,109, 
  /* [53][0][][] */ -27,-62,47,-22,-44,-127,17,-90,-3,89,-97,75,-38,-17,31,-83, 
  /* [54][0][][] */ 93,94,37,-26,-127,-41,-86,-106,18,15,33,60,-106,-77,54,-2, 
  /* [55][0][][] */ 22,-3,-24,67,-10,17,37,-8,8,127,12,68,2,8,1,32, 
  /* [56][0][][] */ 14,-105,-120,48,-57,74,19,106,127,-8,77,74,-31,28,42,98, 
  /* [57][0][][] */ 27,39,92,-47,42,-38,-47,13,14,-1,64,127,48,-26,79,-58, 
  /* [58][0][][] */ 47,-22,16,-72,22,10,10,127,12,93,-3,75,38,47,78,-4, 
  /* [59][0][][] */ -46,26,30,-49,1,-85,3,1,13,26,-112,-100,-127,-63,51,-17, 
  /* [60][0][][] */ 59,-37,43,33,-4,-34,0,-37,12,127,-20,59,-34,-50,-19,-54, 
  /* [61][0][][] */ 53,81,23,-12,-84,-127,-23,-42,-72,-35,-29,3,-58,-26,105,112, 
  /* [62][0][][] */ -18,75,-51,58,-67,127,-58,29,-60,2,-49,20,-45,37,61,-90, 
  /* [63][0][][] */ 29,-17,-64,-127,-1,-24,92,0,11,-100,-22,32,-12,69,37,-33, 
  /* [64][0][][] */ -47,-7,30,-6,45,-87,-1,79,-127,-13,-90,-32,-69,51,67,46, 
  /* [65][0][][] */ -52,-1,-10,1,60,10,-45,-50,-127,-22,13,18,-100,97,-17,40, 
  /* [66][0][][] */ -21,53,-10,26,-51,127,-28,21,-46,10,-35,36,-35,26,51,-78, 
  /* [67][0][][] */ -3,-32,-34,-15,1,-87,48,-65,-24,23,28,119,-62,-24,-1,-127, 
  /* [68][0][][] */ 2,-127,-26,62,-28,0,38,84,37,17,46,5,-63,26,-2,-4, 
  /* [69][0][][] */ 32,96,108,-91,40,-1,-24,96,32,118,90,121,66,-123,66,-127, 
  /* [70][0][][] */ 45,33,27,-20,82,-1,-98,-42,-127,-91,1,30,-28,64,-108,-1, 
  /* [71][0][][] */ -55,-80,24,-74,41,-20,29,35,-119,93,-127,-44,-18,83,-16,52, 
  /* [72][0][][] */ 32,10,53,20,-75,-50,-117,-76,2,74,-20,55,32,125,-127,-1, 
  /* [73][0][][] */ -6,-33,-12,-48,37,-126,21,-36,69,98,102,-14,11,-24,-74,127, 
  /* [74][0][][] */ -11,0,-28,85,-98,-10,104,48,62,72,48,127,109,47,-55,19, 
  /* [75][0][][] */ -32,47,-18,38,-54,127,-26,27,-41,41,-41,39,-28,42,23,-68, 
  /* [76][0][][] */ -62,85,-60,49,-97,-8,-34,20,51,65,-55,-42,35,-71,-127,37, 
  /* [77][0][][] */ 99,116,-125,127,66,80,80,58,32,0,126,-41,77,45,84,40, 
  /* [78][0][][] */ -5,-46,-2,-65,56,-111,21,-49,46,44,125,-31,0,-20,-38,127, 
  /* [79][0][][] */ -39,65,15,23,12,-72,-51,-4,-127,11,51,1,100,30,-79,-48, 
  /* [80][0][][] */ -95,21,92,9,82,59,14,-127,-80,43,-71,-33,-5,-72,18,73, 
  /* [81][0][][] */ 72,72,-34,-15,24,-17,85,104,-104,105,-47,-25,-47,21,95,127, 
  /* [82][0][][] */ 43,107,-18,-59,4,-44,103,-87,41,29,-45,96,127,7,58,-49, 
  /* [83][0][][] */ -4,-36,9,25,-12,19,-46,-69,52,-41,111,17,33,-64,-49,-127, 
  /* [84][0][][] */ -127,-72,-39,-33,-18,108,102,-7,70,66,106,97,48,85,-70,9, 
  /* [85][0][][] */ 81,2,78,-97,98,21,-11,89,42,127,-70,-2,-50,75,112,15, 
  /* [86][0][][] */ -78,70,-45,-2,32,80,20,20,90,35,127,-22,-19,66,-3,-18, 
  /* [87][0][][] */ 12,-60,23,-42,47,-127,29,-32,49,-11,72,-34,36,-37,-36,70, 
  /* [88][0][][] */ -68,60,45,-16,109,-17,41,4,-60,-64,112,-50,90,124,116,-127, 
  /* [89][0][][] */ -27,35,-16,35,-33,127,-23,38,-45,13,-61,17,-15,52,31,-93, 
  /* [90][0][][] */ 52,-99,29,11,121,-1,57,52,6,-127,-124,-13,-16,-28,-45,19, 
  /* [91][0][][] */ -10,84,-20,-44,-9,-124,-109,61,-82,17,-80,-127,-117,-62,-16,3, 
  /* [92][0][][] */ 69,51,59,43,-127,-99,17,5,-12,34,-14,-44,-38,-84,17,-4, 
  /* [93][0][][] */ 13,-125,-110,85,-32,-82,-22,127,90,102,6,94,-46,76,-22,-52, 
  /* [94][0][][] */ 109,3,127,-24,26,-22,28,32,37,70,-14,65,26,22,124,-8, 
  /* [95][0][][] */ -86,-46,-7,-24,127,-22,1,74,-75,21,-104,-61,-21,-5,-98,16, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0038872088771313429, 0.0023819678463041782, 0.0046252040192484856, 0.0051137139089405537, 0.0028740963898599148, 0.0012050216319039464, 0.0043005417101085186, 0.0021669368725270033, 0.0012301146052777767, 0.0031679370440542698, 0.0010545215336605906, 0.0019901974592357874, 0.0036725231911987066, 0.0070439791306853294, 0.0021328874863684177, 0.0026967676822096109, 0.0041560046374797821, 0.0027283364906907082, 0.003949497826397419, 0.0015380298718810081, 0.0045498949475586414, 0.0015558572486042976, 0.0032149392645806074, 0.003859431017190218, 0.0014906130963936448, 0.002883936045691371, 0.0032998332753777504, 0.0038419598713517189, 0.0021620444022119045, 0.0033446825109422207, 0.0030335679184645414, 0.0029926558490842581, 0.0043130978010594845, 0.0012998764868825674, 0.0018065322656184435, 0.0020833022426813841, 0.0028164356481283903, 0.0028669107705354691, 0.0026363299693912268, 0.0029680326115339994, 0.00089775922242552042, 0.0028956523165106773, 0.0027678948827087879, 0.0021948078647255898, 0.0023839494679123163, 0.001994097838178277, 0.0020301956683397293, 0.0020525939762592316, 0.0051117604598402977, 0.0052178916521370411, 0.0046609658747911453, 0.0022764699533581734, 0.0026216108817607164, 0.0022049830295145512, 0.0016624155687168241, 0.0068129892461001873, 0.0021322201937437057, 0.0010676940437406301, 0.0032247824128717184, 0.0029259899165481329, 0.0029412640724331141, 0.00151542027015239, 0.0030756352934986353, 0.0034436623100191355, 0.0014639588771387935, 0.0018114300910383463, 0.0042995945550501347, 0.0031430553644895554, 0.0022236790973693132, 0.0016025509685277939, 0.0045104664750397205, 0.0029083788394927979, 0.0030420082621276379, 0.0021308066789060831, 0.0031025237403810024, 0.0036717047914862633, 0.0039846883155405521, 0.0011908627348020673, 0.0024599351454526186, 0.0018093923572450876, 0.0027258603367954493, 0.0035381072666496038, 0.0022298125550150871, 0.0011979558039456606, 0.002400487894192338, 0.0016922216163948178, 0.0020269658416509628, 0.0041669365018606186, 0.0041609308682382107, 0.0038755333516746759, 0.0026914768386632204, 0.0014415998011827469, 0.0026471416931599379, 0.0023916251957416534, 0.0022817270364612341, 0.0021194508299231529, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -6423, 12925, -17606, 1985, 8087, -15736, -42245, -8110, -9352, 9932, -14720, -14403, 8704, -10606, -3245, -508, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00019049993716180325, 0.00016841095930431038, 0.00012613811122719198, 0.00012599716137629002, 9.9963610409758985e-05, 0.00013777907588519156, 0.00010121455125045031, 0.00014628813369199634, 8.433437324129045e-05, 9.1834954218938947e-05, 0.00017972497153095901, 0.00012226919352542609, 0.00011217045539524406, 9.6065850812010467e-05, 0.000119117641588673, 0.0001225245650857687, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 21,34,20,-38,71,77,-33,58,-17,115,8,49,-35,36,-11,50,32,87,44,-71,-61,74,-9,50,64,52,43,56,-38,-50,-3,93,-26,3,-70,51,50,-127,-33,17,17,-24,65,-9,-3,-50,-56,-11, 
  /* [1][0][][] */ -44,7,-77,-44,14,99,-57,24,-8,-39,-50,27,56,-8,-25,-19,-37,-39,-1,15,-69,49,-104,-47,-49,-42,52,71,-29,-32,40,-41,12,-61,-32,65,14,-65,127,-38,-20,29,-48,-10,33,50,30,22, 
  /* [2][0][][] */ 15,3,56,-38,-23,-85,12,24,107,75,-68,13,113,-47,127,86,-72,-28,-37,37,85,-86,-37,-102,7,-44,39,-75,42,47,-41,10,28,-28,58,49,-65,6,-4,-41,26,33,56,-25,17,-98,101,-53, 
  /* [3][0][][] */ 34,-3,-23,-24,32,111,19,-16,40,-38,23,-18,-56,6,4,42,-40,-74,34,-120,-4,0,-31,-10,-44,95,127,60,-9,-35,30,35,49,-28,98,28,-48,-59,4,41,23,9,-23,-3,27,13,-9,-27, 
  /* [4][0][][] */ 103,-5,3,-62,87,91,46,3,82,-25,-105,29,51,-21,27,-21,-94,-114,-17,-98,-28,25,-26,-32,-81,127,-99,125,-44,-67,25,94,52,-42,16,-28,-9,22,-24,39,-44,-15,16,60,-51,107,-13,-47, 
  /* [5][0][][] */ 0,-4,-59,5,-22,55,19,-27,68,63,36,96,52,-26,29,-5,-42,127,-22,43,9,-2,-72,-17,34,4,-72,-45,-16,37,22,-25,-49,3,43,13,-50,16,-94,6,95,-25,27,54,-15,-3,-38,33, 
  /* [6][0][][] */ 60,9,10,71,8,-29,105,-67,-4,79,127,103,47,40,-58,51,48,-41,-77,98,51,-69,-37,72,-90,97,91,-1,127,41,-37,-16,95,-49,-110,-18,97,37,3,14,10,55,66,-29,69,115,46,-17, 
  /* [7][0][][] */ -88,2,-23,27,-59,-55,23,42,85,106,-57,-78,-102,21,-10,-22,-86,98,4,119,-52,44,24,38,-23,-94,-35,-79,26,36,-3,1,-13,14,10,-9,4,-53,127,17,7,49,21,-9,60,65,-26,-6, 
  /* [8][0][][] */ -17,-103,54,-71,63,-63,77,-50,-30,-110,32,20,-27,-5,31,25,6,11,-45,109,8,41,-22,28,67,4,-71,-32,-120,-21,-59,-120,0,-68,-1,84,1,45,119,23,14,0,86,127,-4,-72,-40,85, 
  /* [9][0][][] */ 26,-37,23,-54,44,83,-43,51,18,-38,-34,-23,13,-47,120,-19,12,-127,36,44,-80,36,62,-35,-26,-90,-24,82,47,83,-38,-27,-58,35,-5,126,-31,-52,-61,-20,-29,-2,23,111,59,91,-74,8, 
  /* [10][0][][] */ -18,18,-24,-6,21,25,-67,-42,45,39,65,-10,-34,-10,49,-54,-58,127,0,49,2,-13,19,31,-44,41,1,91,33,5,-35,-7,69,7,-4,23,-10,-49,-35,16,-85,-1,21,-17,13,49,28,31, 
  /* [11][0][][] */ -34,58,-25,39,32,67,-4,18,15,23,-127,-73,69,19,-9,-49,-3,26,-41,-47,-5,-11,105,-1,41,12,-13,35,-9,29,-9,49,28,5,-56,7,39,79,110,16,35,-23,58,4,-50,-16,92,-1, 
  /* [12][0][][] */ -69,-5,28,16,-59,-55,7,2,-46,-35,-127,14,75,-93,25,35,42,97,92,-124,-28,34,-46,-87,-12,-20,29,-24,9,12,-20,78,60,88,36,-38,-62,-32,30,-12,-37,18,62,7,37,-11,-38,-48, 
  /* [13][0][][] */ -62,-114,-51,-106,16,33,59,16,-127,31,112,-62,54,40,114,0,113,21,-4,-93,72,-84,121,2,-83,9,-26,16,-29,-101,-112,6,40,-14,-69,53,26,-54,84,-72,-6,43,77,48,56,-36,112,-70, 
  /* [14][0][][] */ 71,23,-58,2,-53,30,-88,-19,-44,62,55,44,-7,-64,17,-45,46,-127,18,6,98,-59,16,-8,-11,127,-92,-3,-64,-27,-94,-3,125,42,90,-16,-78,11,-26,58,-8,-40,103,-21,-64,-48,-55,58, 
  /* [15][0][][] */ -62,12,48,23,111,0,3,30,9,77,-19,53,61,-17,-36,-19,7,35,-1,-39,23,-44,-58,-57,49,-73,-51,72,-40,10,19,9,-59,-2,127,-10,-88,19,60,-19,-48,-21,11,-4,-39,-32,-19,6, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0080962469801306725, 0.0071574659086763859, 0.0053608696907758713, 0.0053548794239759445, 0.0042484533041715622, 0.0058556105941534042, 0.0043016183190047741, 0.0062172454781830311, 0.0035842107608914375, 0.0039029854815453291, 0.0076383110135793686, 0.0051964404992759228, 0.004767244216054678, 0.0040827984921634197, 0.0050624995492398739, 0.0052072936668992043, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 13935, -810, 19337, 145, 19929, -1303, 48197, 232, 11292, 33636, 5368, 27068, 2400, 9563, 33952, 24970, 800, -1700, 10224, 44526, 169, 19546, 190, 13842, 17186, 36151, -4133, -2118, -3178, 11465, 22329, -353, 468, -2891, 2035, 14279, 8887, 26626, 1352, 21304, 31266, 2011, 524, 14689, -1032, 4097, 37930, 27834, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.4466646260116249e-05, 0.00011717909364961088, 5.943935684626922e-05, 0.00012993004929739982, 9.3490722065325826e-05, 8.5539737483486533e-05, 4.0200906369136646e-05, 0.00018842473218683153, 9.3351809482555836e-05, 6.07927686360199e-05, 5.5433712986996397e-05, 9.6879441116470844e-05, 5.9556459746090695e-05, 0.00010959038627333939, 4.6311233745655045e-05, 9.2685128038283437e-05, 7.6118580182082951e-05, 7.4238021625205874e-05, 0.00011889394954778254, 4.9049387598643079e-05, 8.4217906987760216e-05, 6.422550359275192e-05, 0.00013461129856295884, 0.00010529142309678718, 5.0552771426737309e-05, 7.0826274168211967e-05, 6.8658366217277944e-05, 4.9275400670012459e-05, 0.00026501508546061814, 0.00013098774070385844, 6.9755595177412033e-05, 0.00029639579588547349, 9.4730858108960092e-05, 0.00016838536248542368, 8.4756778960581869e-05, 6.588643736904487e-05, 9.360073454445228e-05, 6.5512103901710361e-05, 0.00010362158354837447, 7.2309339884668589e-05, 4.8094538215082139e-05, 0.0001404507493134588, 0.00034409592626616359, 7.5254851253703237e-05, 0.00016404294001404196, 4.7369219828397036e-05, 4.8790090659167618e-05, 5.2271861932240427e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -84,67,-127,94,-103,53,-51,65,-96,-48,82,-43,65,-41,-36,-51,87,69,89,-103,69,-114,79,-98,-103,-41,98,105,-99,-67,-108,32,114,-86,71,-127,-93,-127,78,-90,-26,-97,123,-127,99,75,-100,-83, -124,108,-71,107,-76,127,-51,117,-101,-81,106,-57,82,-85,-66,-99,86,114,127,-127,72,-125,79,-127,-106,-93,110,97,42,-83,-87,42,127,-127,85,-124,-88,-97,98,-97,-91,83,127,-94,-39,103,-102,-101, -47,67,-2,3,-48,51,-46,42,-44,-38,54,-42,50,-30,-7,-24,27,49,50,-52,27,-50,55,-44,-76,-49,42,38,109,-49,-63,42,55,-66,45,-46,-17,-8,30,-75,-127,-42,53,-21,-50,64,1,-100, 
  /* [0][1][][] */ -86,89,-66,105,-72,123,-109,89,-121,-83,86,-85,77,-78,-76,-98,104,100,-92,-113,85,-104,97,-57,-118,-91,111,94,-125,-69,-99,127,122,42,96,-89,-103,-87,96,-91,-93,-127,82,-109,127,70,-126,-127, -127,127,-72,127,-127,120,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-106,-108,127,-127,127,-92,-127,-127,127,127,16,-127,-127,113,118,53,127,-103,-127,-97,127,-127,-105,105,97,-106,-49,127,-127,-111, -72,71,-70,33,-75,33,-59,45,-65,-38,58,-67,61,-46,-49,-22,68,50,-90,-24,50,-52,53,-60,-109,-45,48,46,127,-55,-68,59,56,13,49,-29,-34,-24,37,-90,-67,-43,19,-41,-71,88,5,-94, 
  /* [0][2][][] */ -41,44,-16,50,-54,41,-85,54,-65,-45,24,-69,49,-48,-51,-42,62,45,-86,-22,22,-27,34,-16,-73,-58,54,6,-74,-25,-49,43,35,75,43,-50,-35,-46,21,-58,-114,-77,44,-92,84,28,-76,-35, -74,88,-90,69,-83,33,-125,83,-103,-47,35,-75,80,-64,-59,-38,59,53,-114,-11,35,-43,56,-32,-63,-81,60,42,-3,-46,-68,30,25,84,70,-77,-43,-58,35,-56,-62,70,44,-112,-39,61,-36,-46, -41,42,-89,-5,-55,8,-62,51,-26,-12,28,-55,53,-15,-7,2,50,20,-75,18,18,-10,18,-18,-77,-29,27,35,63,-8,-39,3,15,60,30,-24,7,6,19,-34,-44,-4,26,-50,-51,69,45,-74, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0040148324333131313, 0.0049801114946603775, 0.0025261726696044207, 0.0055220271460711956, 0.0039733555167913437, 0.0036354388576000929, 0.0017085385043174028, 0.0080080507323145866, 0.0039674518629908562, 0.0025836925487965345, 0.0023559327237308025, 0.0041173761710524559, 0.0025311494246125221, 0.0046575912274420261, 0.0019682273268699646, 0.0039391177706420422, 0.003235039534047246, 0.0031551157590001822, 0.0050529926083981991, 0.0020845988765358925, 0.0035792610142379999, 0.0027295839972794056, 0.0057209799997508526, 0.0044748852960765362, 0.0021484927274286747, 0.0030101165175437927, 0.0029179805424064398, 0.0020942045375704765, 0.01126314140856266, 0.0055669788271188736, 0.0029646127950400114, 0.012596821412444115, 0.0040260613895952702, 0.0071563776582479477, 0.0036021631676703691, 0.0028001735918223858, 0.0039780312217772007, 0.0027842642739415169, 0.0044039171189069748, 0.0030731470324099064, 0.0020440178923308849, 0.0059691569767892361, 0.014624076895415783, 0.0031983312219381332, 0.0069718249142169952, 0.0020131918136030436, 0.0020735787693411112, 0.0022215540520846844, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1759, -1101, 621, -2422, 4305, -760, 3851, -2548, 1250, 656, 2000, 5470, 207, -359, 633, 5225, -1621, 2352, 5079, 769, -626, 2436, -1222, 3885, 1610, 1935, 1166, -866, 11474, -402, 2127, -1553, -579, 3675, -902, 2035, 1666, 674, 337, 3560, 1924, 5775, -3763, 1324, 5595, 16, 1697, 2306, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00024238093465100974, 0.00030862906714901328, 0.00031703346758149564, 0.00021137515432201326, 0.00019216365762986243, 0.00020929350284859538, 0.00019909779075533152, 0.00018899128190241754, 0.00026079465169459581, 0.00030283853993751109, 0.00020460697123780847, 0.00015066146443132311, 0.00041359898750670254, 0.00038804803625680506, 0.00023986701853573322, 0.00016758820856921375, 0.00023444848193321377, 0.00031542248325422406, 0.00017918362573254853, 0.00031480527832172811, 0.00033040050766430795, 0.00025238565285690129, 0.00016328478523064405, 0.00020657463755924255, 0.00024634759756736457, 0.00022764020832255483, 0.00030495453393086791, 0.00028367503546178341, 8.7364416685886681e-05, 0.00026871936279349029, 0.0002109212800860405, 0.00020066900469828397, 0.00021551092504523695, 0.00020507615408860147, 0.0002806421834975481, 0.00025746773462742567, 0.00028631038730964065, 0.00032197099062614143, 0.00024583243066444993, 0.0002138567651854828, 0.00029725953936576843, 0.00013891184062231332, 0.0001442969951312989, 0.00028137248591519892, 0.00014600633585359901, 0.0002750147832557559, 0.0003088705416303128, 0.00026033489848487079, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 77,32,127,-40,68,98,-87,-53, 
  /* [1][0][][] */ 6,-77,-127,11,54,16,40,7, 
  /* [2][0][][] */ -127,-7,-34,-25,54,23,-66,-34, 
  /* [3][0][][] */ 23,66,127,-58,-7,-81,-12,0, 
  /* [4][0][][] */ -127,20,-54,-27,44,17,-44,-57, 
  /* [5][0][][] */ -114,26,-48,-22,11,34,-77,-127, 
  /* [6][0][][] */ -39,-127,-113,36,83,11,14,39, 
  /* [7][0][][] */ -82,-127,-110,-80,-76,-69,23,97, 
  /* [8][0][][] */ 72,30,-4,-9,85,-59,-127,4, 
  /* [9][0][][] */ -33,51,-48,95,-63,-36,127,-35, 
  /* [10][0][][] */ -22,116,41,57,127,-27,-10,53, 
  /* [11][0][][] */ -81,-35,-18,-11,-85,97,127,-8, 
  /* [12][0][][] */ 63,26,-127,27,-12,-32,-56,-12, 
  /* [13][0][][] */ 55,-30,-75,9,19,-127,-31,-12, 
  /* [14][0][][] */ 11,-67,92,21,127,-104,-62,27, 
  /* [15][0][][] */ -43,-46,-5,127,54,75,-68,24, 
  /* [16][0][][] */ 126,35,-42,14,80,-125,-127,-24, 
  /* [17][0][][] */ 59,127,58,78,44,64,21,-81, 
  /* [18][0][][] */ 36,-13,-13,1,127,7,27,-10, 
  /* [19][0][][] */ 15,127,13,11,-127,20,27,-30, 
  /* [20][0][][] */ -38,0,76,-127,36,25,-11,95, 
  /* [21][0][][] */ -33,61,25,-127,28,35,-11,102, 
  /* [22][0][][] */ -81,-84,-99,12,-117,127,118,-22, 
  /* [23][0][][] */ 92,44,-127,19,24,-60,-76,-8, 
  /* [24][0][][] */ -56,40,12,-7,-26,74,-127,111, 
  /* [25][0][][] */ -104,-63,-127,13,-59,-82,71,100, 
  /* [26][0][][] */ 43,-9,-28,-43,102,-9,127,-33, 
  /* [27][0][][] */ 127,-68,26,91,0,22,-15,91, 
  /* [28][0][][] */ 44,62,55,-9,127,-52,38,-28, 
  /* [29][0][][] */ -14,-8,-34,-44,-79,25,127,-34, 
  /* [30][0][][] */ 44,-127,-41,-66,-98,16,4,-40, 
  /* [31][0][][] */ 2,36,-12,-14,-127,11,-33,-7, 
  /* [32][0][][] */ 38,-64,-61,64,-18,-83,113,-127, 
  /* [33][0][][] */ 31,127,67,24,49,-27,-9,-28, 
  /* [34][0][][] */ -127,-26,124,-5,-24,78,103,20, 
  /* [35][0][][] */ -38,74,127,-10,-74,-64,-38,23, 
  /* [36][0][][] */ -100,4,88,-13,-17,127,73,35, 
  /* [37][0][][] */ -22,-67,-2,-127,-37,-73,70,44, 
  /* [38][0][][] */ 48,-20,79,-51,52,67,-127,12, 
  /* [39][0][][] */ -16,91,-127,-51,-14,-13,6,92, 
  /* [40][0][][] */ 58,-46,16,25,7,-3,7,127, 
  /* [41][0][][] */ -19,86,127,-2,19,77,-62,42, 
  /* [42][0][][] */ 64,-107,-127,-23,-116,7,13,-78, 
  /* [43][0][][] */ 3,-85,41,-83,127,-57,11,35, 
  /* [44][0][][] */ 6,127,110,17,11,48,-65,8, 
  /* [45][0][][] */ -33,46,18,80,-112,56,-127,23, 
  /* [46][0][][] */ -41,-32,59,50,-127,-122,-33,-6, 
  /* [47][0][][] */ -18,53,42,-99,-127,29,-12,57, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0026606062892824411, 0.0033878094982355833, 0.0034800644498318434, 0.0023202570155262947, 0.0021093732211738825, 0.0022974067833274603, 0.0021854888182133436, 0.0020745501387864351, 0.0028627330902963877, 0.0033242471981793642, 0.0022459628526121378, 0.0016538051422685385, 0.004540060181170702, 0.0042595886625349522, 0.0026330112013965845, 0.0018396093510091305, 0.0025735320523381233, 0.0034623804967850447, 0.001966891810297966, 0.0034556055907160044, 0.0036267938558012247, 0.0027704278472810984, 0.0017923708073794842, 0.0022675618529319763, 0.002704148180782795, 0.0024987978395074606, 0.0033474743831902742, 0.003113890066742897, 0.00095899589359760284, 0.0029497223440557718, 0.0023152749054133892, 0.0022027359809726477, 0.0023656552657485008, 0.0022511130664497614, 0.0030805985443294048, 0.0028262133710086346, 0.0031428183428943157, 0.0035342632327228785, 0.0026984931901097298, 0.0023474975023418665, 0.0032630066853016615, 0.0015248300042003393, 0.0015839426778256893, 0.0030886151362210512, 0.0016027059173211455, 0.0030188269447535276, 0.0033904602751135826, 0.0028576862532645464, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -2112, 37, 22274, -4241, 6669, -14921, 2981, -12908, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.1182504547759891e-05, 0.00010562427632976323, 0.00013504840899258852, 0.00011874915071530268, 0.00013845792273059487, 0.00012823574070353061, 9.0214940428268164e-05, 7.1289563493337482e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -45,-45,-9,-71,-3,-1,88,94,-102,-92,-41,19,-46,0,-60,41,-76,10,27,127,70,-25,15,98,76,89,42,19,-85,-44,-74,-58,-44,98,46,-46,35,-23,99,-3,22,-8,7,-92,49,-28,-28,-77, 
  /* [1][0][][] */ -14,48,-17,-39,-75,57,-10,-35,-38,70,-18,27,66,57,-53,2,-18,-126,83,-53,127,20,-61,37,63,-3,-78,65,51,-13,79,28,-37,-17,4,-12,9,113,-14,-26,70,36,-7,13,107,7,-32,66, 
  /* [2][0][][] */ -26,-38,127,-1,86,-50,-5,41,-40,-5,-11,60,20,-32,-52,-126,-53,-105,-27,15,-102,32,-36,-25,-50,20,0,-47,-34,10,-27,-13,-2,-2,33,-5,25,-27,-53,11,42,-43,27,-52,-39,-49,-64,-50, 
  /* [3][0][][] */ 60,18,59,4,24,-41,37,77,-47,-38,36,-41,-83,62,-16,53,63,40,-41,30,-106,-68,123,-2,3,-2,-60,-30,-53,74,124,-68,4,-127,-23,54,-12,-77,-16,88,-71,-67,71,-11,-103,-70,62,-8, 
  /* [4][0][][] */ 16,-21,72,-33,4,-15,-6,0,-57,-5,-23,0,42,-71,35,-102,43,43,-8,-35,8,30,14,12,-5,4,60,-19,26,23,-127,-16,-26,-17,3,7,48,0,34,-3,-39,-14,-68,20,-17,-103,3,19, 
  /* [5][0][][] */ 33,-47,48,36,29,3,23,0,-76,-13,-43,32,29,7,13,-49,88,72,-4,-14,87,-58,127,-95,-21,52,-1,42,10,13,-35,-53,-16,-50,-46,23,41,26,66,13,-68,34,24,22,44,-2,82,-2, 
  /* [6][0][][] */ -63,58,-123,80,54,22,38,18,-11,-6,61,-83,-96,-22,-27,25,-127,38,-16,85,22,53,-95,-89,-7,-24,16,83,-41,-33,-47,6,35,78,-39,-31,-23,3,80,9,75,60,-125,-55,-32,115,-44,-39, 
  /* [7][0][][] */ 42,82,-97,18,12,65,127,61,49,75,-111,-3,-55,-4,-73,-56,30,38,121,109,87,-8,124,22,109,88,-63,101,-87,32,-6,-86,26,-76,-27,17,-9,103,-65,88,-51,47,-16,-96,78,-13,63,-41, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0038752565160393715, 0.004489031620323658, 0.0057395575568079948, 0.0050468388944864273, 0.0058844615705311298, 0.005450019147247076, 0.0038341348990797997, 0.0030298065394163132, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -100, 13166, 81, -822, 1304, -872, 3479, -2348, -4054, 202, -5293, -6, -146, -830, -3922, 4738, 6436, 4912, -19, -5247, -7125, 973, 18519, -3399, 1298, -412, 7290, -5374, -260, -1240, -8525, 11016, 6370, 898, 5060, 377, -17, 120, 11688, -2510, 7829, -2692, 3463, 7197, -1093, 10542, -2427, 2728, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00033879454713314772, 0.00015880369755905122, 0.00084145809523761272, 0.00024722720263525844, 0.00027229322586208582, 0.00034761978895403445, 0.00018575457215774804, 0.00033161172177642584, 9.066579514183104e-05, 0.00032773791463114321, 0.00023555355437565595, 0.0021472806110978127, 0.00048478489043191075, 0.00067894550738856196, 0.00032425278914161026, 0.00062433484708890319, 0.00019080194761045277, 5.768039045506157e-05, 0.00030525124748237431, 0.00029680086299777031, 0.00029261293821036816, 0.0002609601360745728, 8.4256149420980364e-05, 0.00049940624739974737, 0.0002027396549237892, 0.00044227694161236286, 0.00051180302398279309, 0.00022294267546385527, 0.00026325939688831568, 0.00041602153214626014, 0.00012550648534670472, 0.00011539489059941843, 0.00013206254516262561, 0.00024239803315140307, 0.0001303113967878744, 0.00035962933907285333, 0.0034758406691253185, 0.00032287821522913873, 0.00011996443936368451, 0.00019893050193786621, 0.00017456815112382174, 0.00013996024790685624, 0.00030132921529002488, 0.0001763370237313211, 0.00029752464615739882, 7.7486169175244868e-05, 7.1150469011627138e-05, 0.00021423594444058836, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 16,-42,8,11,-15,-123,-59,45,-27,-11,-4,14,44,-8,-2,-2,87,21,33,0,0,-24,-72,11,-12,-19,-12,-37,-63,78,-12,-127,33,-16,-68,-67,-9,-36,1,-2,-30,37,2,-3,-10,71,127,-36, -127,-71,-25,127,-68,80,-111,127,22,16,14,-6,53,17,-2,-45,-35,63,27,16,7,113,3,127,118,-36,-53,30,65,-119,-14,-76,51,-5,-51,-127,26,7,-60,-46,-127,9,-97,-127,41,56,51,97, -21,2,10,14,-25,27,41,52,2,-41,-9,6,-15,1,-2,1,-66,50,-73,-10,1,-40,127,16,-72,4,10,8,10,44,11,-3,-12,-19,-48,68,9,-5,15,95,19,-10,20,-49,-4,43,-27,-21, 
  /* [0][1][][] */ -4,-34,-30,4,30,-118,127,-80,-1,10,16,39,127,13,11,-35,-18,-39,27,37,61,-71,37,5,-76,127,-89,-28,127,-84,64,-125,-55,-5,-94,8,11,-71,-57,20,112,127,9,-102,-69,-54,4,72, 88,-127,127,2,127,77,-80,-53,48,127,127,-127,-92,127,127,127,127,127,115,127,127,116,0,5,115,-104,-127,111,36,127,127,12,-127,127,127,121,-127,127,-127,-116,43,29,-127,-37,127,-127,-9,73, 16,15,-43,-3,-53,127,-127,102,100,-78,9,68,-34,10,19,-66,10,18,-127,23,19,-127,-35,-6,73,-10,-28,127,-81,-25,23,-43,-25,12,87,-28,41,-10,-5,-65,106,3,28,21,-61,89,85,-86, 
  /* [0][2][][] */ 1,-7,3,-28,0,-74,-27,-7,10,2,0,-2,-18,-14,8,0,-37,1,7,-32,-2,-23,77,-16,-127,4,33,-26,14,3,2,22,-16,-13,-76,34,2,-16,9,44,-35,5,14,8,-18,32,1,0, 38,-39,-41,-37,25,19,122,-91,127,-32,-9,-2,-74,-26,-11,-67,-7,103,6,26,8,38,-22,-34,-93,58,84,-18,-91,10,-36,-15,-23,-6,-40,6,58,-33,3,127,-120,-5,1,44,39,63,16,-127, -10,-8,-1,-20,-18,-20,-11,-30,-23,-24,-13,1,17,-13,2,15,38,42,-23,-9,-7,-21,-38,-19,15,-22,18,-7,-20,2,-15,2,27,-22,-27,-52,-4,1,30,33,-21,-17,11,-11,-15,15,57,-56, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.014398768544197083, 0.0067491568624973297, 0.035761967301368713, 0.010507156141102314, 0.011572461575269699, 0.014773841015994549, 0.0078945690765976906, 0.014093497768044472, 0.0038532961625605822, 0.013928861357271671, 0.010011025704443455, 0.091259419918060303, 0.020603356882929802, 0.028855184093117714, 0.013780742883682251, 0.026534229516983032, 0.008109082467854023, 0.0024514165706932545, 0.012973178178071976, 0.012614035978913307, 0.012436049990355968, 0.011090805754065514, 0.0035808864049613476, 0.021224765107035637, 0.0086164353415369987, 0.0187967699021101, 0.021751629188656807, 0.0094750635325908661, 0.011188523843884468, 0.01768091507256031, 0.005334025714546442, 0.0049042827449738979, 0.0056126578710973263, 0.010301915928721428, 0.0055382344871759415, 0.015284246765077114, 0.14772322773933411, 0.013722323812544346, 0.0050984886474907398, 0.008454546332359314, 0.0074191461317241192, 0.0059483102522790432, 0.012806491926312447, 0.0074943234212696552, 0.012644797563552856, 0.0032931619789451361, 0.0030238947365432978, 0.0091050276532769203, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2253, 3535, 14884, 1048, 2519, -1502, 3718, 15021, 2697, -463, 2963, -1951, 14980, -1324, 1983, 17406, -279, 1749, 105, 2902, 3384, 5143, 614, 23341, 5403, 2822, 17609, 1378, 5987, 5110, 521, 1142, 731, 1385, -187, 360, -2504, -314, 2214, 1985, 4389, 1348, 3688, 4316, 4282, 3520, 1975, 5521, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00026298334705643356, 0.00022328112390823662, 6.7267625126987696e-05, 0.00024470040807500482, 0.00020993540238123387, 0.00024587666848674417, 0.00019540832727216184, 6.6332453570794314e-05, 0.00021812801423948258, 0.00029493111651390791, 0.00027289718855172396, 0.00023052845790516585, 6.2989529396872967e-05, 0.00027693959418684244, 0.00023902572866063565, 6.025899710948579e-05, 0.00033113895915448666, 0.00021444112644530833, 0.00035639276029542089, 0.00022387152421288192, 0.00023301460896618664, 0.00016952214355114847, 0.00035752798430621624, 4.6132925490383059e-05, 0.00015343328414019197, 0.00018652089056558907, 6.0659232985926792e-05, 0.00029351544799283147, 0.00013297449913807213, 0.00015095759590622038, 0.00049651868175715208, 0.00042443224810995162, 0.00028763458249159157, 0.00026356172747910023, 0.00033846002770587802, 0.00033928413176909089, 0.00022879586322233081, 0.00039095085230655968, 0.00026571849593892694, 0.00024844572180882096, 0.00018764656851999462, 0.00031610389123670757, 0.00022688126773573458, 0.00018092586833517998, 0.00015870790230110288, 0.00020150351338088512, 0.00037566281389445066, 0.00015247911505866796, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 80,127,-91,-85,7,87,27,60, 
  /* [1][0][][] */ 69,-76,42,-127,-51,68,-95,-48, 
  /* [2][0][][] */ -40,99,127,46,121,-1,59,23, 
  /* [3][0][][] */ 107,38,-88,52,0,-85,-127,-30, 
  /* [4][0][][] */ -53,38,-1,-70,-58,114,127,48, 
  /* [5][0][][] */ 8,62,-127,-81,26,100,33,-27, 
  /* [6][0][][] */ -16,127,61,54,88,23,33,-108, 
  /* [7][0][][] */ 127,-19,-18,38,37,2,97,27, 
  /* [8][0][][] */ 56,127,41,80,115,84,105,-84, 
  /* [9][0][][] */ 49,91,-127,-89,-9,86,8,62, 
  /* [10][0][][] */ -75,-43,14,-57,-18,-25,-53,127, 
  /* [11][0][][] */ 11,-107,-127,-21,21,-8,38,-14, 
  /* [12][0][][] */ -12,-107,-116,-7,-127,25,-67,19, 
  /* [13][0][][] */ -12,7,-100,101,-127,-27,-1,-11, 
  /* [14][0][][] */ -68,-50,-127,-12,39,-3,-10,-54, 
  /* [15][0][][] */ 28,-99,-127,19,-114,-22,-20,-15, 
  /* [16][0][][] */ 127,-65,-20,66,-84,23,25,104, 
  /* [17][0][][] */ -27,127,124,-19,-52,-13,-26,-23, 
  /* [18][0][][] */ 11,-127,38,64,1,-55,48,-76, 
  /* [19][0][][] */ 127,-42,-60,39,-97,2,38,104, 
  /* [20][0][][] */ -27,-127,71,70,-15,-83,1,-64, 
  /* [21][0][][] */ -1,-53,-4,-50,127,-6,59,11, 
  /* [22][0][][] */ -127,24,-69,54,49,37,-101,-106, 
  /* [23][0][][] */ -88,-49,60,-1,-113,127,126,-63, 
  /* [24][0][][] */ -25,56,-11,-38,-50,127,108,-7, 
  /* [25][0][][] */ -41,-88,-127,-47,-51,-14,-7,-34, 
  /* [26][0][][] */ -16,63,-26,127,-106,41,-57,-12, 
  /* [27][0][][] */ 17,-127,31,82,11,-66,1,-120, 
  /* [28][0][][] */ 27,127,66,49,107,-20,5,-37, 
  /* [29][0][][] */ 105,14,-71,-35,73,-127,-114,26, 
  /* [30][0][][] */ 27,-7,28,-127,20,-26,18,-29, 
  /* [31][0][][] */ 43,-43,5,64,-17,26,13,127, 
  /* [32][0][][] */ -74,-42,25,-36,-47,127,45,74, 
  /* [33][0][][] */ -34,50,46,-36,39,127,-105,77, 
  /* [34][0][][] */ 41,127,-91,-59,11,48,-77,62, 
  /* [35][0][][] */ 8,-127,31,64,-11,-67,37,-71, 
  /* [36][0][][] */ -14,-34,-80,-14,-127,-55,-16,-4, 
  /* [37][0][][] */ -55,-127,62,75,-35,-82,-9,-35, 
  /* [38][0][][] */ -69,28,65,-67,-127,-82,-58,80, 
  /* [39][0][][] */ 57,-127,105,70,-23,-87,-27,-99, 
  /* [40][0][][] */ -6,58,22,51,-127,-9,-38,30, 
  /* [41][0][][] */ 101,127,-68,-87,59,10,-9,20, 
  /* [42][0][][] */ -6,-30,-15,11,127,9,39,23, 
  /* [43][0][][] */ 127,28,81,27,-79,-23,74,109, 
  /* [44][0][][] */ 74,38,-23,19,94,-127,-107,43, 
  /* [45][0][][] */ 44,20,26,19,81,-127,-18,-50, 
  /* [46][0][][] */ 57,-32,-12,127,42,48,11,75, 
  /* [47][0][][] */ -63,-99,56,60,-30,10,127,-82, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0034421712625771761, 0.0029225116595625877, 0.00088046141900122166, 0.0032028672285377979, 0.002747830469161272, 0.0032182633876800537, 0.0025576865300536156, 0.00086822104640305042, 0.0028550629504024982, 0.0038603334687650204, 0.0035719331353902817, 0.0030173715204000473, 0.00082446570741012692, 0.0036248438991606236, 0.0031285916920751333, 0.00078872597077861428, 0.0043342555873095989, 0.0028068055398762226, 0.0046648010611534119, 0.0029302393086254597, 0.0030499126296490431, 0.0022188639268279076, 0.0046796598471701145, 0.0006038307910785079, 0.0020082779228687286, 0.0024413594510406256, 0.00079396466026082635, 0.0038418041076511145, 0.0017404943937435746, 0.001975873950868845, 0.0064988997764885426, 0.0055553652346134186, 0.0037648295983672142, 0.0034497417509555817, 0.0044300807639956474, 0.0044408673420548439, 0.0029946938157081604, 0.0051171295344829559, 0.0034779715351760387, 0.0032518894877284765, 0.0024560934398323298, 0.0041374624706804752, 0.0029696337878704071, 0.002368126530200243, 0.0020773170981556177, 0.002637465950101614, 0.0049170255661010742, 0.0019957888871431351, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7956, 13853, -4760, 6887, -996, 4495, -11328, -18129, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00021999665477778763, 0.00011596774129429832, 0.00014570352504961193, 0.00014569827180821449, 0.00019566329137887806, 0.00013238588871899992, 0.00025466326042078435, 0.00012316202628426254, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -48,-4,33,13,-38,-11,10,7,-47,-6,-65,-56,-24,-65,-11,-34,44,-40,41,42,-16,30,-37,13,-4,-40,56,-14,-7,-19,21,10,85,33,40,-127,15,-2,-16,-34,5,-16,46,46,35,3,27,5, 
  /* [1][0][][] */ -1,44,71,-24,-8,45,-47,-27,8,28,-16,-87,15,94,-22,60,-15,12,-20,-53,7,-82,-26,26,-75,-2,-2,-119,-30,-18,33,-66,43,71,-38,4,127,-29,5,50,-20,47,-82,-28,121,-19,-30,-23, 
  /* [2][0][][] */ -8,-15,-64,16,-2,50,20,10,-10,46,-1,31,64,-97,19,-63,43,-97,21,37,-25,51,-9,30,-22,62,-26,-71,10,3,21,-73,-50,-97,38,-33,98,22,-6,-61,12,29,81,25,127,19,20,30, 
  /* [3][0][][] */ -12,34,-73,51,17,-42,-62,-99,13,-22,-41,-3,6,24,36,79,-10,16,-38,30,3,-99,26,-68,-73,-16,127,-13,-48,5,-61,14,-1,-79,7,-7,-22,-38,-18,98,-46,-37,0,22,38,-4,-42,48, 
  /* [4][0][][] */ -23,-49,-9,11,34,-29,-10,-7,29,-33,57,-78,4,28,9,10,-18,-27,15,-15,-5,-50,-2,-15,11,-10,39,46,39,20,-14,29,-13,-4,3,0,-74,92,40,-25,32,-18,-23,-21,-80,12,127,13, 
  /* [5][0][][] */ 40,-7,1,9,22,-51,38,-127,30,-31,-10,118,-83,65,21,-68,-7,-90,17,7,-35,69,-29,-57,-56,75,-29,7,-20,52,-40,-29,27,52,29,-8,-43,-17,-48,-39,10,-46,-50,-9,-38,50,85,18, 
  /* [6][0][][] */ 58,-29,18,-14,-37,-15,-36,13,-43,11,-40,127,-44,-36,-4,56,6,46,17,32,33,-82,-23,19,20,35,-62,7,10,-44,11,36,3,15,-15,-1,14,4,-4,-5,-13,-18,39,57,-2,-37,72,-9, 
  /* [7][0][][] */ -29,3,-4,64,29,42,8,28,19,7,70,-6,124,109,66,53,43,51,-18,-1,23,-20,-90,-30,14,-6,-27,64,27,-33,-30,-11,41,8,45,-93,-71,39,37,55,-28,34,87,127,-58,-31,-106,66, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0093498574569821358, 0.0049286289140582085, 0.0061923996545374393, 0.0061921761371195316, 0.0083156898617744446, 0.0056264004670083523, 0.010823188349604607, 0.0052343858405947685, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 13536, 4407, 3770, 472, 1951, -237, 196, 37045, -716, 2217, 9135, 45619, 1408, 3521, -32, 12679, -560, 14269, 1770, 7214, 10491, 665, 2945, -8864, 9606, 736, 4508, 12317, 1769, -2715, -10997, 10354, 5647, 1280, 937, 6468, -8028, 11011, -421, 15880, -23, -566, 5564, 2856, 1303, -1560, 4408, -427, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.6289630669634789e-05, 0.00010282121365889907, 0.00017127925821114331, 0.00017757412570063025, 0.00081588153261691332, 0.00017890620802063495, 0.0001742046297295019, 9.6537951321806759e-05, 0.00013767322525382042, 9.7660260507836938e-05, 6.3245890487451106e-05, 6.308181764325127e-05, 8.5973762907087803e-05, 6.1544888012576848e-05, 0.00025876567815430462, 0.00018403197464067489, 0.00011461719259386882, 0.00034145513200201094, 0.00012733902258332819, 0.00013477873289957643, 0.00012903372407890856, 0.00053621630650013685, 0.00013233245408628136, 0.00023142478312365711, 0.00012225047976244241, 9.3790942628402263e-05, 4.9796664825407788e-05, 8.5299521742854267e-05, 0.00018407417519483715, 0.00078420428326353431, 0.00025194295449182391, 7.6458272815216333e-05, 0.00010309587378287688, 0.00016465835506096482, 0.00019315123790875077, 5.7198820286430418e-05, 8.1056154158432037e-05, 4.7869554691715166e-05, 0.00013609440065920353, 6.6464890551287681e-05, 0.00013270723866298795, 0.00015627738321200013, 6.7228531406726688e-05, 7.5964271673001349e-05, 8.1215781392529607e-05, 0.0004005594237241894, 5.8969977544620633e-05, 0.00023446494014933705, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -71,-119,-14,-26,127,-68,46,-52,-99,-69,-15,-21,108,49,83,-121,53,-37,6,-39,-64,71,9,26,7,72,70,-47,71,-66,33,-52,-121,-83,39,44,21,84,112,-83,-123,-14,50,82,47,-127,95,88, -61,-117,-93,58,-90,106,51,-58,-73,44,78,-83,114,96,124,-78,-83,-96,31,-68,-67,65,-42,115,-99,101,82,-99,92,-41,6,-123,-54,-83,70,124,127,122,127,-65,-127,-64,61,98,72,110,107,75, 11,-49,-76,93,-56,-25,37,-23,90,20,58,-51,8,63,-31,0,-88,-15,26,-56,-35,-20,-60,-19,-99,48,18,-92,23,59,108,-71,36,2,-17,55,69,68,49,0,-32,102,71,26,45,36,19,-116, 
  /* [0][1][][] */ -122,-97,-9,-79,-75,-81,99,-115,-127,-127,91,-67,100,62,-123,-82,127,-127,-62,-77,-101,117,-49,29,13,87,114,-59,-108,-69,25,-73,-114,-127,-127,54,38,73,8,-90,53,-17,89,119,83,109,117,-127, -127,-127,-127,-104,-34,127,127,-127,103,67,127,-127,127,127,78,-127,49,-84,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-22,-127,-127,-82,41,127,105,127,-10,-127,91,-96,127,127,127,1,127,111, -79,-47,-122,127,62,-47,50,-49,82,28,18,-65,24,64,93,-41,-13,3,-20,-62,-55,-5,-81,-41,-127,47,27,-99,-63,43,127,-90,-43,7,60,83,93,80,-29,-33,33,127,88,16,48,-43,15,21, 
  /* [0][2][][] */ -94,-22,38,11,-41,-40,12,-50,35,-51,11,-3,8,26,-53,-57,-91,-28,84,-15,7,37,-64,-3,28,54,86,-25,30,58,17,-10,-8,-64,-47,37,10,12,-65,-28,16,-11,45,36,30,60,21,-66, -88,-44,-48,-84,87,43,43,-64,103,14,-36,-28,-1,49,-127,-104,28,-1,43,-64,-28,26,-58,61,-55,52,73,-30,42,7,-37,-21,-88,-17,-70,59,17,19,-112,-56,22,-48,76,72,40,-103,38,-4, -30,-38,-35,-31,-24,-8,14,-54,-65,15,-14,9,-6,20,29,-44,38,37,-7,-50,-12,-15,-25,-52,-68,-4,26,-42,2,-54,53,-28,-86,26,14,55,26,11,-66,-20,-7,48,30,24,19,4,11,34, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0032423092052340508, 0.0043699014931917191, 0.0072793685831129551, 0.0075469003058969975, 0.034674964845180511, 0.0076035135425627232, 0.0074036968871951103, 0.0041028629057109356, 0.0058511118404567242, 0.0041505610570311546, 0.0026879501529037952, 0.0026809773407876492, 0.0036538848653435707, 0.0026156576350331306, 0.01099754124879837, 0.0078213587403297424, 0.0048712305724620819, 0.014511842280626297, 0.005411908496171236, 0.0057280962355434895, 0.0054839332588016987, 0.022789193317294121, 0.0056241294369101524, 0.0098355533555150032, 0.0051956451497972012, 0.0039861151017248631, 0.0021163581404834986, 0.003625229699537158, 0.0078231524676084518, 0.03332868218421936, 0.01070757582783699, 0.0032494766637682915, 0.0043815746903419495, 0.0069979801774024963, 0.0082089276984333992, 0.0024309498257935047, 0.0034448865335434675, 0.0020344560034573078, 0.0057840119116008282, 0.0028247577138245106, 0.0056400573812425137, 0.0066417884081602097, 0.0028572124429047108, 0.0032284816261380911, 0.003451670752838254, 0.017023775726556778, 0.0025062239728868008, 0.009964759461581707, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1011, -366, -420, 1046, 12527, 1923, -375, 4987, 1118, 1124, 60, 2474, 1045, 565, -649, 473, 2403, 9702, 2747, -619, 959, -1109, -27, 1758, -185, -447, 1282, -13, 3102, 13433, 1847, -14, 441, -48, 2410, 7, 265, -154, 1025, 1015, 1330, 1695, 128, -160, 556, 2534, 1115, -182, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00051254063146188855, 0.00046047291834838688, 0.00034839674481190741, 0.00038669380592182279, 8.3367434854153544e-05, 0.00036627001827582717, 0.0006285087438300252, 0.00019962929945904762, 0.00038382087950594723, 0.00066817674087360501, 0.00042920763371512294, 0.00035544202546589077, 0.00024015310918912292, 0.00043083826312795281, 0.00037605711258947849, 0.00033740393701009452, 0.00026612667716108263, 9.6435454906895757e-05, 0.00027268784469924867, 0.00042674739961512387, 0.00046577691682614386, 0.00021618802566081285, 0.00058123667258769274, 0.00042471956112422049, 0.00062625814462080598, 0.0010165751446038485, 0.0004024332738481462, 0.0011145317694172263, 0.00027457793476060033, 7.3216528107877821e-05, 0.00041605537990108132, 0.00093887647381052375, 0.000504662049934268, 0.00051409716252237558, 0.00029884470859542489, 0.00046728042070753872, 0.00056198664242401719, 0.0007668747566640377, 0.00048326264368370175, 0.00053854979341849685, 0.00038709334330633283, 0.00039852276677265763, 0.00043404352618381381, 0.00062568753492087126, 0.00050802319310605526, 0.00022832932882010937, 0.00030113552929833531, 0.00040705045103095472, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -43,30,4,-17,-84,-37,-127,31, 
  /* [1][0][][] */ 83,-71,-50,-61,127,-88,97,15, 
  /* [2][0][][] */ -108,127,-49,-125,49,-17,-27,47, 
  /* [3][0][][] */ 47,30,102,5,93,121,127,-12, 
  /* [4][0][][] */ -79,-127,52,2,-73,-100,16,-33, 
  /* [5][0][][] */ 127,-28,77,58,-65,-12,5,-32, 
  /* [6][0][][] */ 29,31,127,-26,41,-38,-46,28, 
  /* [7][0][][] */ 32,11,-127,-27,-43,101,103,-77, 
  /* [8][0][][] */ 2,126,-30,2,74,127,64,56, 
  /* [9][0][][] */ 6,127,-49,94,30,-125,31,98, 
  /* [10][0][][] */ 0,-127,-2,-24,-77,-120,-55,-76, 
  /* [11][0][][] */ -127,-78,106,49,-11,-60,91,68, 
  /* [12][0][][] */ -32,56,-127,94,37,-57,-98,120, 
  /* [13][0][][] */ 95,-127,105,83,18,34,44,-60, 
  /* [14][0][][] */ -33,92,-24,-127,-14,-104,-15,-64, 
  /* [15][0][][] */ 44,117,27,-18,44,-65,96,-127, 
  /* [16][0][][] */ -127,-106,-60,78,-46,26,-30,91, 
  /* [17][0][][] */ -27,-110,-127,90,-72,69,-58,64, 
  /* [18][0][][] */ -101,-70,-49,87,-15,63,-9,127, 
  /* [19][0][][] */ 66,-127,96,-121,16,-64,34,-28, 
  /* [20][0][][] */ 3,90,38,8,55,127,73,-20, 
  /* [21][0][][] */ 25,106,44,-35,34,-72,87,-127, 
  /* [22][0][][] */ 19,13,109,15,-3,127,39,-38, 
  /* [23][0][][] */ -91,-70,26,-81,83,100,-51,-127, 
  /* [24][0][][] */ -93,-84,43,-82,95,98,-50,-127, 
  /* [25][0][][] */ 127,14,-52,-17,15,33,-64,-14, 
  /* [26][0][][] */ -127,-23,-112,-18,-47,-29,17,5, 
  /* [27][0][][] */ 80,40,-5,-66,-127,-25,82,91, 
  /* [28][0][][] */ -127,-75,8,57,-90,-110,2,4, 
  /* [29][0][][] */ 126,102,38,-127,41,34,-62,-85, 
  /* [30][0][][] */ -69,-62,36,-64,67,83,-43,-127, 
  /* [31][0][][] */ 49,43,-4,127,0,-70,3,5, 
  /* [32][0][][] */ -31,127,-3,31,26,59,-4,44, 
  /* [33][0][][] */ -37,127,-65,26,18,-31,-18,-4, 
  /* [34][0][][] */ -127,-118,-43,105,-19,9,14,101, 
  /* [35][0][][] */ -43,127,-28,3,70,106,59,67, 
  /* [36][0][][] */ 64,19,0,-49,-127,-36,90,102, 
  /* [37][0][][] */ -64,118,34,16,-127,111,-29,-101, 
  /* [38][0][][] */ 47,30,36,23,127,62,112,52, 
  /* [39][0][][] */ -27,-83,33,-22,3,41,-101,127, 
  /* [40][0][][] */ -70,-58,-64,127,-35,-1,8,66, 
  /* [41][0][][] */ 127,8,53,100,-66,-7,-2,-12, 
  /* [42][0][][] */ -46,6,-67,-127,56,-99,8,83, 
  /* [43][0][][] */ 24,-3,83,-7,36,127,86,7, 
  /* [44][0][][] */ -28,-27,-68,127,44,8,-46,-39, 
  /* [45][0][][] */ 77,119,110,-112,46,-60,30,-127, 
  /* [46][0][][] */ -34,-127,-43,30,-8,38,-74,121, 
  /* [47][0][][] */ 42,45,124,13,86,127,110,-13, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0043094023130834103, 0.0038716208655387163, 0.0029292930848896503, 0.003251291811466217, 0.0007009469554759562, 0.0030795701313763857, 0.0052844532765448093, 0.0016784678446128964, 0.003227136330679059, 0.0056179785169661045, 0.0036087448243051767, 0.0029885291587561369, 0.0020191888324916363, 0.0036224550567567348, 0.0031618592329323292, 0.0028368663042783737, 0.0022375725675374269, 0.00081082188989967108, 0.0022927385289222002, 0.0035880592186003923, 0.0039162165485322475, 0.0018176923040300608, 0.0048869932070374489, 0.0035710094962269068, 0.0052655301988124847, 0.0085472855716943741, 0.0033836280927062035, 0.0093708978965878487, 0.0023086301516741514, 0.00061559892492368817, 0.0034981616772711277, 0.0078940009698271751, 0.0042431596666574478, 0.004322489257901907, 0.0025126633699983358, 0.0039288578554987907, 0.0047251405194401741, 0.0064478241838514805, 0.004063235130161047, 0.0045280852355062962, 0.0032546510919928551, 0.0033507486805319786, 0.0036494045052677393, 0.0052607324905693531, 0.0042714197188615799, 0.0019197753863409162, 0.0025319242849946022, 0.0034224488772451878, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7370, -3036, 11878, -10026, 21593, 7669, -8537, 10972, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00018257442570757121, 0.00023299064196180552, 0.00017786645912565291, 0.00025833945255726576, 0.00021157615992706269, 0.000196169174159877, 0.00016358663560822606, 0.00026551878545433283, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -12,-14,-21,-68,-26,-40,21,-16,36,8,-34,-10,106,127,-21,-108, 
  /* [1][0][][] */ 127,-59,-47,19,-47,74,-68,-47,-39,85,-38,-57,-7,2,-67,-21, 
  /* [2][0][][] */ -42,-97,46,41,46,-62,-74,-20,32,-96,24,-127,47,-23,-75,18, 
  /* [3][0][][] */ 35,7,17,23,-11,73,-53,-17,127,46,9,17,3,-13,12,24, 
  /* [4][0][][] */ -94,-41,-28,-127,-18,35,53,-121,41,-26,-50,-35,-111,31,-38,-25, 
  /* [5][0][][] */ 81,42,56,-29,33,-46,-127,-109,-16,-70,56,42,-49,46,49,-43, 
  /* [6][0][][] */ 101,41,-127,-74,28,-69,8,-92,-43,26,-125,91,89,-88,1,69, 
  /* [7][0][][] */ -127,-2,107,-31,-58,6,-3,-57,-54,63,85,-32,60,-26,29,31, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0077594127506017685, 0.0099021019414067268, 0.0075593246147036552, 0.010979426093399525, 0.0089919865131378174, 0.0083371894434094429, 0.0069524319842457771, 0.011284547857940197, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 20431, -318, 618, 2629, -906, 156, 9934, 1229, -365, 283, -2167, 2989, 524, -721, -288, -711, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00011334632290527225, 0.00021960111916996539, 0.00018933592946268618, 0.00019231346959713846, 0.0012189680710434914, 0.00099790806416422129, 0.00015752055332995951, 0.00093867111718282104, 0.00039229964022524655, 0.0013010548427700996, 0.00027373377815820277, 0.00020812099683098495, 0.00011258891754550859, 0.0002360692888032645, 0.00022122779046185315, 0.00090679415734484792, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 0,-5,1,2,-19,11,4,16,-10,-11,-3,-12,-9,-7,2,-1, 5,-9,4,1,13,-2,11,-26,-11,9,-7,94,-7,21,0,-1, 2,-5,-2,-2,2,-14,-6,10,0,2,-5,-9,0,-5,-4,-2, 
  /* [0][1][][] */ 7,-12,-7,6,127,-23,-127,-21,127,127,-3,-9,102,-23,-3,-20, -127,127,127,2,-87,-90,-13,-101,15,-106,127,127,127,127,127,127, 20,-9,-7,3,-10,127,5,-10,-3,-13,-4,-8,11,-4,-13,-10, 
  /* [0][2][][] */ -2,-1,-8,-12,-17,16,58,7,-13,-8,-2,4,-9,2,-6,-13, 19,-18,-14,-127,7,-16,-6,127,-10,1,6,-15,-15,-56,-9,-39, 2,-6,-10,-4,1,-5,1,-2,-3,2,-1,-1,5,-5,-8,-14, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0048172185197472572, 0.0093330470845103264, 0.0080467769876122475, 0.0081733223050832748, 0.051806144416332245, 0.042411092668771744, 0.0066946232691407204, 0.03989352285861969, 0.016672734171152115, 0.055294830352067947, 0.011633684858679771, 0.008845142088830471, 0.0047850287519395351, 0.01003294438123703, 0.0094021810218691826, 0.038538750261068344, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1239, 264, 111, 1266, 61133, 42476, 3006, 9343, 5275, 6807, 683, -148, 4313, -3514, 190, 36618, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00023216914269141853, 0.0012582661584019661, 0.000270374323008582, 0.00017924343410413712, 2.3399894416797906e-05, 3.5719025618163869e-05, 0.00016717513790354133, 2.4725559342186898e-05, 0.00016106550174299628, 4.1455525206401944e-05, 0.00059833226259797812, 0.0010125951375812292, 0.00039131022640503943, 1.5984825949999504e-05, 0.00097900722175836563, 2.8669399398495443e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -30, 
  /* [0][1][][] */ 67, -36, 16, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 120, 125, 58, 
  /* [3][1][][] */ 1, -22, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 28, -61, 0, 
  /* [4][1][][] */ 29, -127, 2, 
  /* [4][2][][] */ 23, -81, -13, 
  /* [5][0][][] */ -56, 31, 1, 
  /* [5][1][][] */ -127, 35, 7, 
  /* [5][2][][] */ -78, 30, 3, 
  /* [6][0][][] */ -16, 79, 127, 
  /* [6][1][][] */ -50, 56, -15, 
  /* [6][2][][] */ -36, -51, -88, 
  /* [7][0][][] */ 40, 25, -14, 
  /* [7][1][][] */ 127, 76, -1, 
  /* [7][2][][] */ 26, 5, -21, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -26, 47, -21, 
  /* [9][1][][] */ -15, 127, -24, 
  /* [9][2][][] */ -7, 89, -18, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 40, 17, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 72, 11, -11, 
  /* [13][1][][] */ 127, 105, -3, 
  /* [13][2][][] */ 77, 113, 40, 
  /* [14][0][][] */ -30, -28, 47, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 80, 
  /* [15][0][][] */ -93, -19, 26, 
  /* [15][1][][] */ -127, -113, 19, 
  /* [15][2][][] */ -37, -97, -27, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.059203129261732101, 0.32085785269737244, 0.068945445120334625, 0.04570707306265831, 0.0059669725596904755, 0.0091083506122231483, 0.042629659175872803, 0.0063050170429050922, 0.041071701794862747, 0.010571158491075039, 0.15257471799850464, 0.25821173191070557, 0.099784098565578461, 0.0040761302225291729, 0.24964681267738342, 0.0073106964118778706, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.11893543601036072, } };
const TfArray<1, int> quant46_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.076400421559810638, } };
const TfArray<1, int> quant50_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.067223682999610901, } };
const TfArray<1, int> quant53_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.09109988808631897, } };
const TfArray<1, int> quant54_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.064952254295349121, } };
const TfArray<1, int> quant58_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.057362746447324753, } };
const TfArray<1, int> quant61_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.07770848274230957, } };
const TfArray<1, int> quant62_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.040444862097501755, } };
const TfArray<1, int> quant65_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.082387872040271759, } };
const TfArray<1, int> quant66_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.047323387116193771, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.16228336095809937, } };
const TfArray<1, int> quant69_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};
#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, (TfLiteIntArray*)&inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata0)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, (TfLiteIntArray*)&inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata1)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, (TfLiteIntArray*)&inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata2)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, (TfLiteIntArray*)&inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata3)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, (TfLiteIntArray*)&inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, (TfLiteIntArray*)&inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata5)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, (TfLiteIntArray*)&inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata6)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, (TfLiteIntArray*)&inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata7)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, (TfLiteIntArray*)&inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata8)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, (TfLiteIntArray*)&inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata9)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, (TfLiteIntArray*)&inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata10)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, (TfLiteIntArray*)&inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata11)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, (TfLiteIntArray*)&inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, (TfLiteIntArray*)&inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata13)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, (TfLiteIntArray*)&inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata14)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, (TfLiteIntArray*)&inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata15)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, (TfLiteIntArray*)&inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata16)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, (TfLiteIntArray*)&inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata17)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, (TfLiteIntArray*)&inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata18)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, (TfLiteIntArray*)&inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata19)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, (TfLiteIntArray*)&inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata20)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, (TfLiteIntArray*)&inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata21)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, (TfLiteIntArray*)&inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata22)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, (TfLiteIntArray*)&inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata23)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, (TfLiteIntArray*)&inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata24)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, (TfLiteIntArray*)&inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata25)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, (TfLiteIntArray*)&inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, (TfLiteIntArray*)&inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&opdata0)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, (TfLiteIntArray*)&inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&opdata1)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, (TfLiteIntArray*)&inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&opdata2)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, (TfLiteIntArray*)&inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&opdata3)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, (TfLiteIntArray*)&inputs4, nullptr, nullptr, nullptr, 0, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, (TfLiteIntArray*)&inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&opdata5)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, (TfLiteIntArray*)&inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&opdata6)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, (TfLiteIntArray*)&inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&opdata7)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, (TfLiteIntArray*)&inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&opdata8)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, (TfLiteIntArray*)&inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&opdata9)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, (TfLiteIntArray*)&inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&opdata10)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, (TfLiteIntArray*)&inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&opdata11)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, (TfLiteIntArray*)&inputs12, nullptr, nullptr, nullptr, 0, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, (TfLiteIntArray*)&inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&opdata13)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, (TfLiteIntArray*)&inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&opdata14)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, (TfLiteIntArray*)&inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&opdata15)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, (TfLiteIntArray*)&inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&opdata16)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, (TfLiteIntArray*)&inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&opdata17)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, (TfLiteIntArray*)&inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&opdata18)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, (TfLiteIntArray*)&inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&opdata19)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, (TfLiteIntArray*)&inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&opdata20)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, (TfLiteIntArray*)&inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&opdata21)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, (TfLiteIntArray*)&inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&opdata22)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, (TfLiteIntArray*)&inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&opdata23)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, (TfLiteIntArray*)&inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&opdata24)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, (TfLiteIntArray*)&inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&opdata25)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, (TfLiteIntArray*)&inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };



static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_22_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
if (registrations[used_ops[i]].init) {
       tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[used_ops[i]].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_22_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_22_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_22_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_22_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
